<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configurer votre serveur Jenkins</title>

  <sect1 id="sect-configuration-introduction">
    <title>Introduction</title>

    <para><indexterm class="startofrange" id="ch04-config"
        significance="normal">
        <primary>configuration</primary>
      </indexterm><indexterm id="I_indexterm4_d1e4122" significance="normal">
        <primary>Jenkins</primary>

        <secondary>configurer</secondary>

        <see>configuration</see>
      </indexterm>Avant de commencer à créer vos tâches de construction dans
    Jenkins, vous devez faire un peu de configuration pour vous assurer que
    votre serveur Jenkins fonctionnera sans problème dans votre environnement
    spécifique. Jenkins est hautement configurable, et bien que la plupart des
    options soit fournie avec des valeurs raisonnables par défaut, ou que
    l'outil soit capable de trouver les bons outils de construction dans le
    PATH ou dans les variables d'environnement, c'est toujours une bonne idée
    de savoir exactement ce que votre serveur de construction fait.</para>

    <para>Jenkins est globalement très simple à configurer. Les écrans
    d'administration sont intuitifs, et l'aide contextuelle (les icônes en
    forme de point d'interrogation bleu à côté de chaque champ) est détaillée
    et précise. Dans ce chapitre, nous allons voir comment configurer votre
    serveur basique en détail. Nous verrons notamment comment configurer
    Jenkins pour qu'il utilise différentes versions de Java, d'outils de
    construction comme Ant ou Maven, et d'outils de gestion de version comme
    CVS et Subversion. Plus loin dans le livre, nous regarderons aussi des
    configurations de serveur plus avancées, comme l'utilisation d'autres
    systèmes de gestion de version ou d'outils de notifications.</para>
  </sect1>

  <sect1 id="sect-configuration-manage-hudson">
    <title>Le tableau de bord de configuration — L'écran Administrer
    Jenkins</title>

    <para>Dans <indexterm class="startofrange" id="ch04-manage"
        significance="normal">
        <primary>écran Administrer Jenkins</primary>
      </indexterm>Jenkins, vous gérez pratiquement tous les aspects de la
    configuration du système dans l'écran Administrer Jenkins (voir <xref
    linkend="fig-hudson-manage-hudson" />). Vous pouvez aussi atteindre cet
    écran directement depuis n'importe où dans l'application en tapant
    “manage” dans la boîte de recherche Jenkins. Cet écran change en fonction
    des plugins que vous installez, ne soyez donc pas surpris si vous voyez
    plus de choses que ce que nous montrons ici.</para>

    <figure float="0" id="fig-hudson-manage-hudson">
      <title>Configurer son installation Jenkins dans l'écran Administrer
      Jenkins</title>

      <mediaobject id="I_mediaobject4_d1e4146">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0401.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0401.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Cet écran vous permet de configurer différents aspects de votre
    serveur Jenkins. Chaque lien sur cette page vous amène à un écran de
    configuration dédié, où vous pouvez gérer différentes parties du serveur
    Jenkins. Quelques-unes des options les plus intéressantes sont discutées
    ici :</para>

    <variablelist>
      <varlistentry>
        <term>Configurer le système</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4159" significance="normal">
              <primary>configuration</primary>

              <secondary>écran configurer système</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4164"
              significance="normal">
              <primary>écran configurer système</primary>
            </indexterm>C'est là que vous gérez les chemins vers les
          différents outils que vous utilisez dans vos constructions, comme
          les JDKs, les version de Ant et Maven, les options de sécurité, les
          serveurs d'email, et autres détails de configuration de niveau
          système. Plusieurs des plugins que vous installerez nécessiteront
          aussi d'être configurés ici — Jenkins ajoutera les champs
          dynamiquement à l'installation des plugins.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Recharger la configuration à partir du disque</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4173" significance="normal">
              <primary>configuration</primary>

              <secondary>écran de configuration du rechargement à partir du
              disque</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4178"
              significance="normal">
              <primary>écran de configuration du rechargement à partir du
              disque</primary>
            </indexterm>Comme nous l'avons vu dans le précédent chapitre,
          Jenkins stocke tous les détails de configuration du système et des
          tâches de construction dans des fichiers XML localisés dans le
          répertoire utilisateur de Jenkins (voir <xref
          linkend="sec-hudson-home-directory" />). Il stocke aussi tout
          l'historique des constructions dans le même répertoire. Si vous
          migrez des tâches de construction d'une instance Jenkins à une
          autre, ou archivez de vieilles tâches de construction, vous aurez
          besoin d'ajouter ou d'enlever les différents répertoires de tâches
          de construction au répertoire de constructions de Jenkins. Vous
          n'avez pas besoin de désactiver Jenkins pour faire cela — vous
          pouvez simplement utiliser l'option “Recharger la configuration à
          partir du disque” pour recharger directement la configuration
          système de Jenkins et des tâches de construction. Ce processus peut
          être un peu lent s'il y a beaucoup d'historique de construction,
          pendant que Jenkins charge non seulement la configuration des
          constructions mais aussi les données de l'historique.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Gestion des plugins</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4192" significance="normal">
              <primary>configuration</primary>

              <secondary>écran de gestion des plugins</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4197"
              significance="normal">
              <primary>écran de gestion des plugins</primary>
            </indexterm><indexterm id="I_indexterm4_d1e4200"
              significance="normal">
              <primary>plugins</primary>

              <secondary>gestion</secondary>
            </indexterm>L'une des meilleures fonctionnalités de Jenkins est
          son architecture extensible. Il y a un large écosystème de plugins
          open source tierces disponibles, vous permettant d'ajouter des
          fonctionnalités à votre serveur de construction, du support des
          différents outils de gestion de sources comme Git, Mercurial ou
          ClearCase, aux métriques de qualité du code et de couverture de
          code. Nous regarderons plusieurs des plugins les plus populaires et
          utiles à travers ce livre. Les plugins peuvent être installés, mis à
          jour et enlevés via l'écran Gérer les Plugins. Notez qu'enlever des
          plugins nécessite un certain soin, parce que cela peut parfois
          affecter la stabilité de votre instance Jenkins — nous verrons cela
          plus en détails dans <xref
          linkend="sect-maint-migrating-jobs" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Information Système</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4213" significance="normal">
              <primary>configuration</primary>

              <secondary>écran Information Système</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4218"
              significance="normal">
              <primary>écran Information Système</primary>
            </indexterm>Cet écran affiche une liste de toutes les propriétés
          systèmes Java et les variables d'environnement systèmes. Ici, vous
          pouvez vérifier dans quelle version exacte de Java Jenkins est en
          train de fonctionner, avec quel utilisateur, etc. Vous pouvez aussi
          vérifier que Jenkins utilise le bon paramétrage des variables
          d'environnement. Cet écran sert principalement pour le dépannage. Il
          vous permet de vous assurer que votre serveur fonctionne avec les
          propriétés systèmes et les variables d'environnement que vous
          pensez.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Log système</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4230" significance="normal">
              <primary>configuration</primary>

              <secondary>System Log screen</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4235"
              significance="normal">
              <primary>System Log screen</primary>
            </indexterm>L'écran de Log Système est un moyen pratique de voir
          les fichiers de log Jenkins en temps réel. Encore une fois, ceci
          sert principalement au dépannage.</para>

          <para>Vous pouvez aussi souscrire aux flux RSS pour différents
          niveaux de messages de logs. Par exemple, en tant qu'administrateur
          Jenkins, il peut être une bonne idée de souscrire à tous les
          messages de log de niveau ERROR et WARNING.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Statistiques d'utilisation</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4246" significance="normal">
              <primary>configuration</primary>

              <secondary>Ecran de Statistiques d'utilisation</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4251"
              significance="normal">
              <primary>Ecran de Statistiques d'utilisation</primary>
            </indexterm>Jenkins garde la trace du niveau d'activité de votre
          serveur en fonction du nombre de de constructions concurrentes et de
          la longueur de la file d'attente de construction (ce qui vous donne
          une idée de la durée pendant laquelle vos constructions doivent
          attendre avant d'être exécutées). Ces statistiques peuvent vous
          aider à savoir si vous avez besoin d'ajouter de la capacité
          additionnelle ou des nœuds supplémentaires à votre
          infrastructure.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Console de script</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4260" significance="normal">
              <primary>configuration</primary>

              <secondary>Console de script</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4265"
              significance="normal">
              <primary>Ecran de Console de script</primary>
            </indexterm><indexterm id="I_indexterm4_d1e4268"
              significance="normal">
              <primary>scripts Groovy</primary>

              <secondary>fonctionnant dans la console de script</secondary>
            </indexterm>Cet écran vous permet d'exécuter des scripts Groovy
          sur le serveur. C'est utile pour le dépannage avancé : cela requiert
          en effet une connaissance profonde de l'architecture interne de
          Jenkins. Cet écran est donc principalement utile pour les
          développeurs de plugins et consorts.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Gérer les nœuds</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4279" significance="normal">
              <primary>configuration</primary>

              <secondary>Ecran Gérer les nœuds</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4284"
              significance="normal">
              <primary>Ecran Gérer les nœuds</primary>
            </indexterm>Jenkins gère aussi bien les constructions parallèles
          que distribuées. Dans cet écran, vous pouvez configurer le nombre de
          constructions que vous voulez. Jenkins les exécute simultanément,
          et, si vous utilisez des constructions distribuées, vous pouvez
          configurer les nœuds de construction (NDT : version anglaise
          confuse, à revoir). Un nœud de construction est une autre machine
          que Jenkins peut utiliser pour exécuter ses constructions. Nous
          regarderons comment configurer les constructions distribuées en
          détail dans <xref linkend="chapter-distributed-builds" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Préparer à la fermeture</term>

        <listitem>
          <para><indexterm id="I_indexterm4_d1e4295" significance="normal">
              <primary>configuration</primary>

              <secondary>Ecran Préparer à la fermeture</secondary>
            </indexterm><indexterm id="I_indexterm4_d1e4300"
              significance="normal">
              <primary>Ecran Préparer à la fermeture</primary>
            </indexterm>Si vous avez besoin d'éteindre Jenkins, ou le serveur
          sur lequel il fonctionne, c'est mieux de ne pas le faire lorsqu'une
          construction est en cours. Pour fermer Jenkins proprement, vous
          pouvez utiliser le lien Préparer à la fermeture, qui empêche le
          démarrage de toute nouvelle construction. Finalement, lorsque toutes
          les constructions en cours seront terminées, vous pourrez éteindre
          Jenkins proprement.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Nous reviendrons sur certaines de ces fonctionnalités en détails
    plus loin dans le livre. Dans les sections suivantes, nous nous
    concentrerons sur comment configurer les paramètres systèmes les plus
    importants de Jenkins <indexterm class="endofrange"
        id="I_indexterm4_d1e4306" significance="normal" startref="ch04-config">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4308"
        significance="normal" startref="ch04-manage">
        <primary></primary>
      </indexterm>.</para>
  </sect1>

  <sect1 id="sect-configuration-system">
    <title>Configurer l'environnement système</title>

    <para>La <indexterm class="startofrange" id="ch04-configsys1"
        significance="normal">
        <primary>configuration</primary>

        <secondary>Ecran de configuration système</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-configsys2"
        significance="normal">
        <primary>Ecran de configuration système</primary>
      </indexterm>page d'administration la plus importante de Jenkins est
    l'écran Configurer le système (<xref linkend="fig-configure-system" />).
    Ici, vous paramétrez la plupart des outils fondamentaux dont Jenkins a
    besoin pour son travail quotidien. L'écran par défaut contient un certain
    nombre de sections, chacune concernant un domaine différent ou un outil
    externe. De plus, quand vous installez des plugins, leur configuration
    système globale est aussi souvent effectuée dans cet écran.</para>

    <figure float="none" id="fig-configure-system">
      <title>Configuration du système dans Jenkins</title>

      <mediaobject id="I_mediaobject4_d1e4330">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0402.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0402.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>L'écran Configurer le système vous permet de définir les paramètres
    globaux pour votre installation Jenkins, et aussi pour vos outils externes
    nécessaires au processus de construction. La première partie de cet écran
    permet de définir certains paramètres de niveau système.</para>

    <para>Le répertoire utilisateur<indexterm id="I_indexterm4_d1e4339"
        significance="normal">
        <primary>répertoire utilisateur de Jenkins</primary>
      </indexterm><indexterm id="I_indexterm4_d1e4342" significance="normal">
        <primary>Jenkins</primary>

        <secondary>répertoire utilisateur de</secondary>
      </indexterm> de Jenkins est indiqué, pour référence. De cette façon,
    vous pouvez vérifier d'un coup d'œil que vous travaillez avec le
    répertoire utilisateur auquel vous vous attendez. Rappelez-vous, vous
    pouvez changer ce répertoire en positionnant la variable d'environnement
    <indexterm id="I_indexterm4_d1e4348" significance="normal">
        <primary>JENKINS_HOME variable d'environnement</primary>
      </indexterm> <literal moreinfo="none">JENKINS_HOME</literal> dans votre
    environnement (voir <xref linkend="sec-hudson-home-directory"
    os="" />).</para>

    <para>Le champ Message du système<indexterm id="I_indexterm4_d1e4359"
        significance="normal">
        <primary>Jenkins</primary>

        <secondary>page d'accueil pour</secondary>
      </indexterm><indexterm id="I_indexterm4_d1e4364" significance="normal">
        <primary>page d'accueil</primary>
      </indexterm><indexterm id="I_indexterm4_d1e4367" significance="normal">
        <primary>configuration</primary>

        <secondary>message système sur la page d'accueil</secondary>
      </indexterm> sert à plusieurs choses. Ce texte est affiché en haut de
    votre page d'accueil Jenkins. Vous pouvez utiliser des balises HTML, c'est
    donc un moyen simple de personnaliser votre serveur de construction en
    incluant le nom de votre serveur et un petit laïus sur son rôle. Vous
    pouvez aussi l'utiliser pour afficher des messages pour tous les
    utilisateurs, pour annoncer par exemple des indisponibilités du système,
    etc.</para>

    <para>La Période d'attente est <indexterm id="I_indexterm4_d1e4375"
        significance="normal">
        <primary>configuration</primary>

        <secondary>période d'attente avant que la construction ne
        démarre</secondary>
      </indexterm><indexterm id="I_indexterm4_d1e4380" significance="normal">
        <primary>tâches de construction</primary>

        <secondary>retarder le démarrage</secondary>
      </indexterm><indexterm id="I_indexterm4_d1e4385" significance="normal">
        <primary>période d'attente avant que la construction ne
        démarre</primary>
      </indexterm><indexterm id="I_indexterm4_d1e4388" significance="normal">
        <primary>CVS</primary>

        <secondary>retarder les tâches de construction</secondary>
      </indexterm>utile pour les outils de gestion de sources comme CVS qui
    committent les fichiers un par un, au lieu de les grouper ensemble en une
    seule transaction atomique. Normalement, Jenkins déclenchera une
    construction dès qu'il détectera un changement dans le dépôt de sources.
    Toutefois, cela ne convient pas à tous les environnements. Si vous
    utilisez un outil comme CVS, vous ne devriez pas lancer une construction
    dès que le premier changement arrive, parce que le dépôt sera dans un état
    inconsistant tant que tous les changements n'auront pas été committés.
    Vous pouvez utiliser le champ Période d'attente pour éviter des problèmes
    de ce genre. Si vous mettez une valeur à cet endroit, Jenkins attendra
    qu'aucun changement n'ait été détecté pendant le nombre spécifié de
    secondes avant de déclencher la construction. Ce permet de d'assurer que
    tous les changements ont été committés et que le dépôt est dans un état
    stable avant de démarrer la construction.</para>

    <para>Pour les systèmes de gestion de version modernes, comme Subversion,
    Git ou Mercurial, les commits sont atomiques. Cela signifie que des
    changements dans plusieurs fichiers sont soumis au dépôt comme unité
    simple, et le code source sur le dépôt est garanti d'être à tout moment
    dans un état stable. Toutefois, certaines équipes utilisent encore une
    approche où un changement logique est livré en plusieurs opérations de
    commit. Dans ce cas, vous pouvez utiliser la Période d'attente pour vous
    assurer que la construction utilise toujours une version stable de code
    source.</para>

    <para>La valeur de Période d'attente spécifiée est la valeur par défaut au
    niveau système — si nécessaire, vous pouvez redéfinir cette valeur
    individuellement pour chaque projet.</para>

    <para>Vous pouvez aussi gérer les comptes utilisateurs et les droits ici.
    Par défaut, Jenkins laisse n'importe quel utilisateur faire ce qu'il
    souhaite. Si vous souhaitez une approche plus restrictive, vous devrez
    activer la sécurité de Jenkins en sélectionnant le champ Activer la
    sécurité. Il y a plusieurs façons de gérer cela, nous regarderons cet
    aspect de Jenkins<indexterm class="endofrange" id="I_indexterm4_d1e4400"
        significance="normal" startref="ch04-configsys1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4402"
        significance="normal" startref="ch04-configsys2">
        <primary></primary>
      </indexterm> plus tard (voir <xref
    linkend="chapter-security" />).</para>
  </sect1>

  <sect1 id="sect-configuration-global">
    <title>Configuring Global Properties</title>

    <para>The <indexterm class="startofrange" id="ch04-global1"
        significance="normal">
        <primary>configuration</primary>

        <secondary>global properties</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-global2"
        significance="normal">
        <primary>global properties</primary>
      </indexterm><indexterm class="startofrange" id="ch04-global3"
        significance="normal">
        <primary>properties</primary>

        <secondary>global</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-global4"
        significance="normal">
        <primary>build jobs</primary>

        <secondary>global properties for</secondary>
      </indexterm>Global Properties (see <xref
    linkend="fig-configure-global-properties" />) section lets you define
    variables that can be managed centrally but used in all of your build
    jobs. You can add as many properties as you want here, and use them in
    your build jobs. Jenkins will make them available within your build job
    environment, so you can freely use them within your Ant and Maven build
    scripts. Note that you shouldn’t put periods (“.”) in the property names,
    as they won’t be processed correctly. So <literal
    moreinfo="none">ldapserver</literal> or <literal
    moreinfo="none">ldap_server</literal> is fine, but not <literal
    moreinfo="none">ldap.server</literal>.</para>

    <figure float="0" id="fig-configure-global-properties">
      <title>Configuring environment variables in Jenkins</title>

      <mediaobject id="I_mediaobject4_d1e4446">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0403.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0403.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>There are two ways you typically use these variables. Firstly, you
    can use them directly in your build script, using the <literal
    moreinfo="none">${key}</literal> or <literal
    moreinfo="none">$key</literal> notation (so <literal
    moreinfo="none">${ldapserver}</literal> or <literal
    moreinfo="none">$ldapserver</literal> in the example give above. This is
    the simplest approach, but means that there is a tight coupling between
    your build job configuration and your build scripts.</para>

    <para>If your script uses a different property name (one containing dots,
    for example), you can also pass the value to your build script in the
    build job configuration. In <xref
    linkend="fig-config-properties-in-job" /> we pass the <literal
    moreinfo="none">ldapserver</literal> property value defined in <xref
    linkend="fig-configure-global-properties" /> to a Maven build job. Using
    the <literal moreinfo="none">-D</literal> option means that this value
    will be accessible from within the build script. This is a flexible
    approach, as we can assign the global properties defined within Jenkins to
    script-specific variables in our build scripts. In <xref
    linkend="fig-config-properties-in-job" />, for example, the <literal
    moreinfo="none">ldapserver</literal> property will be available from
    within the Maven build via the<indexterm class="endofrange"
        id="I_indexterm4_d1e4483" significance="normal"
        startref="ch04-global1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4485"
        significance="normal" startref="ch04-global2">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4487"
        significance="normal" startref="ch04-global3">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4489"
        significance="normal" startref="ch04-global4">
        <primary></primary>
      </indexterm> internal <literal moreinfo="none">${ldap.server}</literal>
    property.</para>

    <figure float="none" id="fig-config-properties-in-job">
      <title>Using a configured environment variable</title>

      <mediaobject id="I_mediaobject4_d1e4498">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0404.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0404.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1 id="sect-configuration-jdks">
    <title>Configuring Your JDKs</title>

    <para><indexterm class="startofrange" id="ch04-jdk1" significance="normal">
        <primary>configuration</primary>

        <secondary>JDK</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-jdk2"
        significance="normal">
        <primary>JDK (Java Development Kit)</primary>

        <secondary>configuring multiple versions of</secondary>
      </indexterm>Historically, one of the most common uses of Jenkins has
    been to build Java applications. So Jenkins naturally provides excellent
    built-in support for Java.</para>

    <para>By default, Jenkins will build Java applications using whatever
    version of Java it finds on the system path, which is usually the version
    that Jenkins itself is running under. However, for a production build
    server, you will probably want more control than this. For example, you
    may be running your Jenkins server under Java 6, for performance reasons.
    However, your production server might be running under Java 5 or even Java
    1.4. Large organizations are often cautious when it comes to upgrading
    Java versions in their production environments, and some of the more
    heavyweight application servers on the market are notoriously slow to be
    certified with the latest JDKs.</para>

    <para>In any case, it is always a wise practice to build your application
    using a version of Java that is close to the one running on your
    production server. While an application <phrase
    role="keep-together">compiled</phrase> with Java 1.4 will usually run fine
    under Java 6, the inverse is not always true. Or you may have different
    applications that need to be built using different versions of
    Java.</para>

    <para>Jenkins provides good support for working with multiple JVMs.
    Indeed, Jenkins makes it very easy to configure and use as many versions
    of Java as you want. Like most system-level configuration, we do this in
    the Configure System screen (see <xref linkend="fig-configure-system" />).
    Here, you will find a section called JDK which allows you to manage the
    JDK installations you need Jenkins to work with.</para>

    <para>The simplest way to declare a JDK installation is simply to supply
    an appropriate name (which will be used to identify this Java installation
    later on when you configure your builds), along with the path to the Java
    installation directory (the same path you would use for the<indexterm
        id="I_indexterm4_d1e4531" significance="normal">
        <primary>JAVA_HOME environment variable</primary>
      </indexterm> <literal moreinfo="none">JAVA_HOME</literal> variable), as
    shown in <xref linkend="fig-configure-jdk" />. Although you need to type
    the path manually, Jenkins will check in real time both that the directory
    exists and that it looks like a valid JDK directory.</para>

    <figure float="none" id="fig-configure-jdk">
      <title>JDK configuration in Jenkins</title>

      <mediaobject id="I_mediaobject4_d1e4543">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0405.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0405.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can <indexterm id="I_indexterm4_d1e4550" significance="normal">
        <primary>installation</primary>

        <secondary>JDK</secondary>
      </indexterm><indexterm id="I_indexterm4_d1e4555" significance="normal">
        <primary>JDK (Java Development Kit)</primary>

        <secondary>installing</secondary>
      </indexterm>also ask Jenkins to install Java for you. In this case,
    Jenkins will download the JDK installation and install a copy on your
    machine (see <xref linkend="fig-configure-jdk-installers" />). The first
    time a build needs to use this JDK, Jenkins will download and install the
    specified version of Java into the <filename
    moreinfo="none">tools</filename> directory in the Jenkins home directory.
    If the build is running on a new build agent that doesn’t have this JDK
    installed, it will download and install it onto the build agent machine as
    well.</para>

    <para>This<indexterm id="I_indexterm4_d1e4568" significance="normal">
        <primary>build agents</primary>

        <secondary>configuring for multiple JDK versions</secondary>
      </indexterm> is also a great way to configure build agents. As we’ll see
    later on in the book, Jenkins can delegate build jobs to other machines,
    or build agents. A build agent (or “slave”) is simply another computer
    that Jenkins can use to run some of its builds. If you use Jenkins’s
    Install automatically option, you don’t need to manually install all the
    JDK versions you need on the build agent machines—Jenkins will do it for
    you the first time it needs to.</para>

    <para>By default, Jenkins proposes to download the JDK from the Oracle
    website. If your Jenkins installation is behind a proxy server, you may
    need to configure your proxy settings to ensure that Jenkins can access
    the external download sites (see <xref
    linkend="sect-configuration-proxies" />). Another option is to provide a
    URL pointing to your own internal copy of the JDK binaries (either in the
    form of a ZIP or a GZip-compressed TAR file), stored on a local server
    within your organization. This lets you provide standard installations on
    a local server and makes for faster automatic installations. When you use
    this option, Jenkins also lets you specify a label, which will restrict
    the use of this installation to the build notes with this label. This is a
    useful technique if you need to install a specific version of a tool on
    certain build machines. The same approach can also be used for other build
    tools (such as Maven and Ant).</para>

    <figure float="0" id="fig-configure-jdk-installers">
      <title>Installing a JDK automatically</title>

      <mediaobject id="I_mediaobject4_d1e4581">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0406.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0406.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The automatic installer will not work in all environments (if it
    can’t find or identify your operating system to its satisfaction, for
    example, the installation will fail), but it is nevertheless a useful and
    convenient way to set up new build servers or distributed build agents in
    a <indexterm class="endofrange" id="I_indexterm4_d1e4589"
        significance="normal" startref="ch04-jdk1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4591"
        significance="normal" startref="ch04-jdk2">
        <primary></primary>
      </indexterm>consistent manner.</para>
  </sect1>

  <sect1 id="sect-configuration-build-tools">
    <title>Configuring Your Build Tools</title>

    <para>Build tools<indexterm class="startofrange" id="ch04-tool1"
        significance="normal">
        <primary>configuration</primary>

        <secondary>build tools</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-tool2"
        significance="normal">
        <primary>build tools, configuring</primary>
      </indexterm> are the bread-and-butter of any build server, and Jenkins
    is no exception. Out of the box, Jenkins supports three principal build
    tools: Ant, Maven, and the basic shell-script (or Batch script in
    Windows). Using Jenkins plugins, you can also add support for other build
    tools and other languages, such as Gant, Grails, MSBuild, and many
    more.</para>

    <sect2>
      <title>Maven</title>

      <para><indexterm class="startofrange" id="ch04-maven1"
          significance="normal">
          <primary>configuration</primary>

          <secondary>Maven</secondary>
        </indexterm><indexterm class="startofrange" id="ch04-maven2"
          significance="normal">
          <primary>Maven</primary>

          <secondary>configuring</secondary>
        </indexterm>Maven is a high-level build scripting framework for Java
      that uses notions such as a standard directory structure and standard
      life cycles, Convention over Configuration, and Declarative Dependency
      Management to simplify a lot of the low-level scripting that you find in
      a typical Ant build script. In Maven, your project uses a standard,
      well-defined build life cycle—compile, test, package, deploy, and so
      forth. Each life cycle phase is associated with a Maven plugin. The
      various Maven plugins use the standard directory structure to carry out
      these tasks with a minimum of intervention on your part. You can also
      extend Maven by overriding the default plugin configurations or by
      invoking additional plugins.</para>

      <para>Jenkins <indexterm id="I_indexterm4_d1e4625" significance="normal">
          <primary>Maven</primary>

          <secondary>installing</secondary>
        </indexterm><indexterm id="I_indexterm4_d1e4630" significance="normal">
          <primary>installation</primary>

          <secondary>Maven</secondary>
        </indexterm>provides excellent support for Maven, and has a good
      understanding of Maven project structures and dependencies. You can
      either get Jenkins to install a specific version of Maven automatically
      (as we are doing with Maven 3 in the example), or provide a path to a
      local Maven installation (see <xref linkend="fig-configure-maven"
      os="" />). You can configure as many versions of Maven for your build
      projects as you want, and use different versions of Maven for different
      projects.</para>

      <figure float="none" id="fig-configure-maven">
        <title>Configuring Maven in Jenkins</title>

        <mediaobject id="I_mediaobject4_d1e4641">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0407.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0407.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you tick the Install automatically checkbox, Jenkins will
      download and install the requested version of Maven for you. You can
      either ask Jenkins to download Maven directly from the Apache site, or
      from a (presumably local) URL of your choice. This is an excellent
      choice when you are using distributed builds, and, since Maven is
      cross-platform, it will work on any machine. You don’t need to install
      Maven explicitly on each build machine—the first time a build machine
      needs to use Maven, it will download a copy and install it to the
      <filename moreinfo="none">tools</filename> directory in the Jenkins home
      directory.</para>

      <para>Sometimes you need to pass Java system options to your Maven build
      process. For instance it is often useful to give Maven a bit of extra
      memory for heavyweight tasks such as code coverage or site generation.
      Maven lets you do this by setting the <code>MAVEN_OPTS</code> variable.
      In Jenkins, you can set a system-wide default value, to be used across
      all projects (see <xref linkend="fig-configure-mvnopts" />). This comes
      in handy if you want to use certain standard memory options (for
      example) across all projects, without having to set it up in each
      project by<indexterm class="endofrange" id="I_indexterm4_d1e4658"
          significance="normal" startref="ch04-maven1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4660"
          significance="normal" startref="ch04-maven2">
          <primary></primary>
        </indexterm> hand.</para>

      <figure float="none" id="fig-configure-mvnopts">
        <title>Configuring system-wide MVN_OPTS</title>

        <mediaobject id="I_mediaobject4_d1e4666">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0408.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0408.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 id="hudson-config-ant">
      <title>Ant</title>

      <para><indexterm class="startofrange" id="ch04-ant1"
          significance="normal">
          <primary>configuration</primary>

          <secondary>Ant</secondary>
        </indexterm><indexterm class="startofrange" id="ch04-ant2"
          significance="normal">
          <primary>Ant</primary>

          <secondary>configuring</secondary>
        </indexterm><indexterm class="startofrange" id="ch06-ant3"
          significance="normal">
          <primary>Ant</primary>
        </indexterm>Ant is a widely-used and very well-known build scripting
      language for Java. It is a flexible, extensible, relatively low-level
      scripting language, used in a large number of open source projects. An
      Ant build script (typically called <filename
      moreinfo="none">build.xml</filename>) is made up of a number of
      <emphasis>targets</emphasis>. Each target performs a particular job in
      the build process, such as compiling your code or running your unit
      tests. It does so by executing <emphasis>tasks</emphasis>, which carry
      out a specific part of the build job, such as invoking <command
      moreinfo="none">javac</command> to compile your code, or creating a new
      directory. Targets also have <emphasis>dependencies</emphasis>,
      indicating the order in which your build tasks need to be executed. For
      example, you need to compile your code before you can run your unit
      tests.</para>

      <para>Jenkins provides excellent build-in support for Ant—you can invoke
      Ant targets from your build job, providing properties to customize the
      process as required. We look at how to do this in detail later on in
      this book.</para>

      <para>If Ant is available on the system path, Jenkins will find it.
      However, if you want to know precisely what version of Ant you are
      using, or if you need to be able to use several different versions of
      Ant on different build jobs, you can configure as many installations of
      Ant as required (see <xref linkend="fig-configure-ant" />). Just provide
      a name and installation directory for each version of Ant in the Ant
      section of the Configure System screen. You will then be able to choose
      what version of Ant you want to use for each project.</para>

      <para>If you<indexterm id="I_indexterm4_d1e4713" significance="normal">
          <primary>Ant</primary>

          <secondary>installing</secondary>
        </indexterm><indexterm id="I_indexterm4_d1e4718" significance="normal">
          <primary>installation</primary>

          <secondary>Ant</secondary>
        </indexterm> tick the Install automatically checkbox, Jenkins will
      download and install Ant into the <filename
      moreinfo="none">tools</filename> directory of your Jenkins home
      directory, just like it does for Maven. It will download an Ant
      installation the first time a build job needs to use Ant, either from
      the Apache website or from a local URL. Again, this is a great way to
      standardize <phrase role="keep-together">build servers</phrase> and make
      it easier to add new distributed build servers to an existing <phrase
      role="keep-together">infrastructure</phrase>.<indexterm
          class="endofrange" id="I_indexterm4_d1e4733" significance="normal"
          startref="ch06-ant3">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4736"
          significance="normal" startref="ch04-ant1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4738"
          significance="normal" startref="ch04-ant2">
          <primary></primary>
        </indexterm></para>

      <figure float="0" id="fig-configure-ant">
        <title>Configuring Ant in Jenkins</title>

        <mediaobject id="I_mediaobject4_d1e4743">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0409.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0409.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>Shell-Scripting Language</title>

      <para>If you<indexterm id="I_indexterm4_d1e4753" significance="normal">
          <primary>shell scripts</primary>
        </indexterm><indexterm id="I_indexterm4_d1e4756" significance="normal">
          <primary>scripts</primary>

          <secondary>shell scripts</secondary>
        </indexterm> are running your build server on Unix or Linux, Jenkins
      lets you insert shell scripts into your build jobs. This is handy for
      performing low-level, OS-related tasks that you don’t want to do in Ant
      or Maven. In the Shell section, you define the default shell that will
      be used when executing these shell scripts. By default, this is
      <filename moreinfo="none">/bin/sh</filename>, but there are times you
      may want to modify this to another command interpreter such as <filename
      moreinfo="none">bash</filename> or <filename
      moreinfo="none">Perl</filename>.</para>

      <para>In <indexterm id="I_indexterm4_d1e4773" significance="normal">
          <primary>batch scripts</primary>
        </indexterm><indexterm id="I_indexterm4_d1e4776" significance="normal">
          <primary>scripts</primary>

          <secondary>batch scripts</secondary>
        </indexterm>Windows, the Shell section does not apply—you use Windows
      batch scripting instead. So, on a Windows build server, you should
      leave<indexterm class="endofrange" id="I_indexterm4_d1e4782"
          significance="normal" startref="ch04-tool1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4784"
          significance="normal" startref="ch04-tool2">
          <primary></primary>
        </indexterm> this field blank.</para>
    </sect2>
  </sect1>

  <sect1 id="sect-configuration-scm">
    <title>Configuring Your Version Control Tools</title>

    <para><indexterm class="startofrange" id="ch04-vc1" significance="normal">
        <primary>configuration</primary>

        <secondary>version control systems</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-vc2"
        significance="normal">
        <primary>version control systems</primary>

        <secondary>configuring</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-vc3"
        significance="normal">
        <primary>version control systems</primary>

        <secondary>supported by Jenkins</secondary>
      </indexterm><indexterm id="I_indexterm4_d1e4806" significance="normal">
        <primary>version control systems</primary>

        <seealso>CVS; Git; Subversion</seealso>
      </indexterm>Jenkins comes preinstalled with plugins for CVS and
    Subversion. Other version control systems are supported by plugins that
    you can download from the Manage Plugins screen.</para>

    <sect2>
      <title>Configuring Subversion</title>

      <para><indexterm id="I_indexterm4_d1e4816" significance="normal">
          <primary>configuration</primary>

          <secondary>Subversion</secondary>
        </indexterm><indexterm id="I_indexterm4_d1e4821" significance="normal">
          <primary>Subversion</primary>

          <secondary>configuring</secondary>
        </indexterm>Subversion needs no special configuration, since Jenkins
      uses native Java libraries to interact with Subversion repositories. If
      you need to authenticate to connect to a repository, Jenkins will prompt
      you when you enter the Subversion URL in the build job
      configuration.</para>
    </sect2>

    <sect2>
      <title>Configuring CVS</title>

      <para>CVS <indexterm id="I_indexterm4_d1e4832" significance="normal">
          <primary>CVS</primary>

          <secondary>configuring</secondary>
        </indexterm><indexterm id="I_indexterm4_d1e4837" significance="normal">
          <primary>configuration</primary>

          <secondary>CVS</secondary>
        </indexterm>needs little or no configuration. By default, Jenkins will
      look for tools like CVS on the system path, though you can provide the
      path explicitly if it isn’t on the system path. CVS keeps login and
      password details in a file called <filename
      moreinfo="none">.cvspass</filename>, which is usually in your home
      directory. If this is not the case, you can provide a path where Jenkins
      can find<indexterm class="endofrange" id="I_indexterm4_d1e4846"
          significance="normal" startref="ch04-vc1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4848"
          significance="normal" startref="ch04-vc2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4850"
          significance="normal" startref="ch04-vc3">
          <primary></primary>
        </indexterm> this file.</para>
    </sect2>
  </sect1>

  <sect1 id="sect-configuration-email">
    <title>Configuring the Mail Server</title>

    <para><indexterm class="startofrange" id="ch04-email1"
        significance="normal">
        <primary>configuration</primary>

        <secondary>email server</secondary>
      </indexterm><indexterm class="startofrange" id="ch04-email2"
        significance="normal">
        <primary>email server, configuring</primary>
      </indexterm><indexterm class="startofrange" id="ch04-email3"
        significance="normal">
        <primary>mail server, configuring</primary>
      </indexterm>The last of the basic configuration options you need to set
    up is the email server configuration. Email is Jenkins’s more fundamental
    notification technique—when a build fails, it will send an email message
    to the developer who committed the changes, and optionally to other team
    members as well. So Jenkins needs to know about your email server (see
    <xref linkend="fig-configure-email" />).</para>

    <figure float="none" id="fig-configure-email">
      <title>Configuring an email server in Jenkins</title>

      <mediaobject id="I_mediaobject4_d1e4874">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0410.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0410.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The System Admin email address is the address from which the
    notification messages are sent. You can also use this field to check the
    email setup—if you click on the Test configuration button, Jenkins will
    send a test email to this address.</para>

    <para>In many organizations, you can derive a user’s email address from
    their login by adding the organization domain name. For example, at ACME,
    user John Smith will have a login of “jsmith" and an email address of
    “jsmith@acme.com”. If this extends to your version control system, Jenkins
    can save you a lot of configuration effort in this area. In the previous
    example, you could simply specify the default user email suffix of
    acme.com and Jenkins will figure out the rest.</para>

    <para>You also need to provide a proper base URL for your Jenkins server
    (one that does not use localhost). Jenkins uses this URL in the email
    notifications so that users can go directly from the email to the build
    failure screen on Jenkins.</para>

    <para>Jenkins also provides for more sophisticated email configuration,
    using more advanced features such as SMTP authentication and SSL. If this
    is your case, click on the Advanced button to configure these
    options.</para>

    <para><indexterm id="I_indexterm4_d1e4888" significance="normal">
        <primary>Gmail, configuring</primary>
      </indexterm>For example, many organizations use Google Apps for their
    email services. You can configure Jenkins to work with the Gmail service
    as shown in <xref linkend="fig-configure-gmail" os="" />. All you need to
    do in this case is to use the Gmail SMTP server, and provide your Gmail
    username and password in the SMTP Authentication (you also need to use SSL
    and the non-standard <indexterm class="endofrange"
        id="I_indexterm4_d1e4894" significance="normal" startref="ch04-email1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4896"
        significance="normal" startref="ch04-email2">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4898"
        significance="normal" startref="ch04-email3">
        <primary></primary>
      </indexterm>port of 465).</para>

    <figure float="none" id="fig-configure-gmail">
      <title>Configuring an email server in Jenkins to use a Google Apps
      domain</title>

      <mediaobject id="I_mediaobject4_d1e4904">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0411.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0411.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1 id="sect-configuration-proxies">
    <title>Configuring a Proxy</title>

    <para><indexterm class="startofrange" id="ch04-proxy1"
        significance="normal">
        <primary>proxy, configuring</primary>
      </indexterm><indexterm class="startofrange" id="ch04-proxy2"
        significance="normal">
        <primary>configuration</primary>

        <secondary>proxy</secondary>
      </indexterm>In most enterprise environments, your Jenkins server will be
    situated behind a firewall, and will not have direct access to the
    Internet. Jenkins needs Internet access to download plugins and updates,
    and also to install tools such as the JDK, Ant and Maven from remote
    sites. If you need to go through an HTTP proxy server<indexterm
        id="I_indexterm4_d1e4922" significance="normal">
        <primary>HTTP proxy server</primary>
      </indexterm> to get to the Internet, you can configure the connection
    details (the server and port, and if required the <phrase
    role="keep-together">username</phrase> and password) in the Advanced tab
    on the Plugin Manager screen (see <phrase role="keep-together"><xref
    linkend="fig-configuration-proxy" /></phrase>).</para>

    <para>If your proxy is using Microsoft’s <indexterm
        id="I_indexterm4_d1e4934" significance="normal">
        <primary>NTLM proxy authentication</primary>
      </indexterm>NTLM authentication scheme, then you will need to provide a
    domain name as well as a username. You can place both in the User name
    field: just enter the domain name, followed by a back-slash (\), followed
    by the username, such as “MyDomain\Joe Bloggs”.</para>

    <figure float="none" id="fig-configuration-proxy">
      <title>Configuring Jenkins to use a proxy</title>

      <mediaobject id="I_mediaobject4_d1e4941">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0412.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0412.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Finally, if you are setting up Proxy access on your Jenkins build
    server, remember that all of the other tools running on this server will
    need to know about the proxy as well. In particular, this may include
    tools such as Subversion (if you are accessing an external repository) and
    Maven (if you are not using an Enterprise Repository <indexterm
        class="endofrange" id="I_indexterm4_d1e4948" significance="normal"
        startref="ch04-proxy1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm4_d1e4950"
        significance="normal" startref="ch04-proxy2">
        <primary></primary>
      </indexterm>Manager).</para>
  </sect1>

  <sect1 id="I_sect14_d1e4953">
    <title id="sect-configuration-conclusion">Conclusion</title>

    <para>You don’t need a great deal of configuration to get started with
    Jenkins. The configuration that is required is fairly straightforward, and
    is centralised in the Configure System screen. Once this is done, you are
    ready to create your first Jenkins build job!</para>
  </sect1>
</chapter>
