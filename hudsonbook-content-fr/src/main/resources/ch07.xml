<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-security">
  <title>Sécuriser Jenkins</title>

  <sect1 id="sect-security-introduction">
    <title>Introduction</title>

    <para><indexterm class="startofrange" id="ch07-sec" significance="normal">
        <primary>securité</primary>
      </indexterm><indexterm id="I_indexterm7_d1e10038" significance="normal">
        <primary>autorisation</primary>

        <seealso>sécurité</seealso>
      </indexterm>Jenkins supporte plusieurs modèles de sécurité, et peut
    s'intégrer avec différents gestionnaires d'utilisateurs. Dans les petites
    organisations, où les développeurs travaillent proches les uns des autres,
    la sécurité de votre machine Jenkins n'est peut-être pas un gros problème
    — vous pourriez juste vouloir éviter que des utilisateurs non identifiés
    n'altèrent vos configurations de tâches de build. Pour de plus importantes
    organisations, avec de multiples équipes, une approche plus stricte
    pourrait être nécessaire, dans laquelle seuls les membres de l'équipe et
    les administrateurs systèmes ont les droits pour modifier la configuration
    des tâches de build. Et dans des situations où Jenkins serait exposé à une
    audience plus large, comme un site web interne d'une entreprise, ou même
    sur Internet, certaines tâches de build pourraient être visibles à tous
    les utilisateurs alors que d'autres nécessiteraient d'être cachées aux
    utilisateurs non autorisés.</para>

    <para>Dans ce chapitre, nous regarderons comment configurer différentes
    configurations de sécurité dans Jenkins, pour différents environnements et
    circonstances.</para>
  </sect1>

  <sect1 id="sect-security-activating">
    <title>Activer la sécurité dans Jenkins</title>

    <para>Configurer <indexterm id="I_indexterm7_d1e10051"
        significance="normal">
        <primary>securité</primary>

        <secondary>activer</secondary>
      </indexterm> une sécurité basique dans Jenkins est assez simple. Allez
    dans la page de configuration principale et sélectionnez la case à cocher
    Activer la sécurité (voir <xref
    linkend="fig-hudson-enabling-security" />). Ceci affiche plusieurs options
    que nous allons expliquer en détails dans ce chapitre. La première
    <indexterm id="I_indexterm7_d1e10059" significance="normal">
        <primary>securité</primary>

        <secondary>domaine de sécurité</secondary>
      </indexterm>section, domaine de sécurité, définit où Jenkins regardera
    pendant l'authentification, et inclut des options telles que l'utilisation
    d'utilisateurs stockés dans un serveur LDAP, en utilisant le compte
    utilisateur Unix sous-jacent (en supposant, bien sûr, que Jenkins est
    exécuté sur une machine Unix), ou utilisant une simple base de données
    embarquée gérée par Jenkins.</para>

    <para>La <indexterm id="I_indexterm7_d1e10067" significance="normal">
        <primary>securité</primary>

        <secondary>autorisation</secondary>
      </indexterm><indexterm id="I_indexterm7_d1e10072" significance="normal">
        <primary>autorisation</primary>
      </indexterm>seconde section, Autorisations, détermine ce que les
    utilisateurs peuvent faire une fois qu'ils sont connectés. Cela va de
    simples options comme "Tout le monde a accès à toutes les fonctionnalités"
    ou "Les utilisateurs connectés peuvent tout faire" à des rôles plus
    sophistiqués ou des politiques d'autorisations par projet.</para>

    <figure float="0" id="fig-hudson-enabling-security">
      <title>Activer la sécurité dans Jenkins</title>

      <mediaobject id="I_mediaobject7_d1e10079">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0701.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0701.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Dans la fin de ce chapitre, nous regarderons comment configurer la
    sécurité Jenkins pour un certain nombre de scénarii courants.</para>
  </sect1>

  <sect1 id="hudson-security-simple">
    <title>Sécurité simple dans Jenkins</title>

    <para>Le <indexterm class="startofrange" id="ch07-none1"
        significance="normal">
        <primary>securité</primary>

        <secondary>autorisation</secondary>

        <tertiary>pas de restrictions sur</tertiary>
      </indexterm><indexterm class="startofrange" id="ch07-none2"
        significance="normal">
        <primary>autorisation</primary>

        <secondary>pas de restrictions sur</secondary>
      </indexterm><indexterm id="I_indexterm7_d1e10103" significance="normal">
        <primary>utilisateurs</primary>

        <secondary>autorisation pour</secondary>

        <see>autorisation</see>
      </indexterm>modèle de sécurité le plus simple disponible dans Jenkins
    permet aux utilisateurs authentifiés de faire tout ce qu'ils veulent,
    alors que les utilisateurs non authentifiés auront seulement une vue en
    lecture seule de leurs tâches de build. C'est super pour les petites
    équipes - les développeurs peuvent gérer les tâches de construction, alors
    que les autres utilisateurs (testeur, analyste métier, responsable de
    projet etc.) peuvent accéder aux tâches de build pour voir l'état du
    projet. En effet, certaines tâches pourraient même être configurées
    uniquement dans ce but, affichant les résultats de tests d'acceptation
    automatisés ou des métriques de qualité de code, par exemple.</para>

    <para>Vous pouvez mettre en place ce type de configuration en choisissant
    “Les utilisateurs connectés peuvent tout faire” dans la section
    Autorisations. Il y a plusieurs façons dans Jenkins pour authentifier les
    utilisateurs (voir <xref linkend="sect-security-realms" />), mais pour cet
    exemple, nous allons utiliser l'option la plus simple, qui est d'utiliser
    <indexterm id="I_indexterm7_d1e10115" significance="normal">
        <primary>sécurité</primary>

        <secondary>domaines de sécurité</secondary>

        <tertiary>base de données utilisateurs interne à Jenkins</tertiary>
      </indexterm><indexterm id="I_indexterm7_d1e10122" significance="normal">
        <primary>base de données utilisateurs</primary>
      </indexterm><indexterm id="I_indexterm7_d1e10125" significance="normal">
        <primary>base de données</primary>

        <seealso>sécurité, domaines de sécurité</seealso>
      </indexterm><indexterm id="I_indexterm7_d1e10130" significance="normal">
        <primary>base de données</primary>

        <secondary>base de données utilisateurs</secondary>
      </indexterm>la base de données intégrée à Jenkins (voir <xref
    linkend="hudson-users-internal" />). C'est la configuration illustrée dans
    <xref linkend="fig-hudson-enabling-security" />.</para>

    <para>Assurez-vous <indexterm id="I_indexterm7_d1e10142"
        significance="normal">
        <primary>sécurité</primary>

        <secondary>domaines de sécurité</secondary>

        <tertiary>activer les connexions</tertiary>
      </indexterm>de cocher l'option "Autoriser les utilisateurs à se
    connecter". Cette option affichera un lien Se connecter en haut de l'écran
    permettant aux utilisateurs de créer leurs propres comptes (voir <xref
    linkend="fig-hudson-user-signup" />). C'est une bonne idée pour les
    développeurs d'utiliser ici leur nom de gestionnaire de sources : dans ce
    cas, Jenkins sera capable de retrouver quels utilisateurs ont contribué
    aux changements qui ont déclenché un build particulier.</para>

    <figure float="0" id="fig-hudson-user-signup">
      <title>La page de connexion Jenkins</title>

      <mediaobject id="I_mediaobject7_d1e10155">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0702.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0702.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Cette approche est évidemment un peu trop simple pour beaucoup de
    situations — il est utile pour les petites équipes de travailler en forte
    proximité, où le but est de savoir le changement de qui a déclenché (ou
    cassé) un build particulier, plutôt que de gérer l'accès de façon plus
    restrictive. Dans les sections suivantes, nous discuterons de deux aspects
    orthogonaux de la sécurité Jenkins : identifier vos utilisateurs (domaines
    de sécurité) et déterminer ce qu'ils sont autorisés à faire<indexterm
        class="endofrange" id="I_indexterm7_d1e10162" significance="normal"
        startref="ch07-none1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10164"
        significance="normal" startref="ch07-none2">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10166"
        significance="normal" startref="ch07-sec">
        <primary></primary>
      </indexterm> (Autorisation).</para>
  </sect1>

  <sect1 id="sect-security-realms">
    <title id="sec-identifying-users">Domaines de sécurité — Identifier les
    utilisateurs Jenkins</title>

    <para>Jenkins vous permet d'identifier et de gérer les utilisateurs de
    plusieurs façons, depuis une simple base de données intégrée pour les
    petites équipes jusqu'à l'intégration avec des annuaires d'entreprise,
    avec de nombreuses autres options entre les deux.</para>

    <sect2 id="hudson-users-internal">
      <title>Utiliser la base de données intégrée à Jenkins</title>

      <para>Le <indexterm class="startofrange" id="ch07-internal"
          significance="normal">
          <primary>sécurité</primary>

          <secondary>domaines de sécurité</secondary>

          <tertiary>base de données utilisateurs interne à Jenkins</tertiary>
        </indexterm><indexterm class="startofrange" id="ch07-internal2"
          significance="normal">
          <primary>base de données utilisateurs</primary>
        </indexterm><indexterm class="startofrange" id="ch07-internal3"
          significance="normal">
          <primary>base de données</primary>

          <secondary>base de données utilisateurs</secondary>
        </indexterm>moyen le plus simple pour gérer des comptes utilisateurs
      dans Jenkins est d'utiliser la base de données interne de Jenkins. C'est
      une bonne option si vous voulez garder les choses simples, car peu de
      configuration est nécessaire. Les utilisateurs qui ont besoin de se
      connecter au serveur Jenkins peuvent s'enregistrer et créer un compte
      par eux-mêmes, et, en fonction du modèle de sécurité choisi, un
      <indexterm id="I_indexterm7_d1e10195" significance="normal">
          <primary>administrateur</primary>

          <secondary sortas="Jenkins">pour la base de données utilisateurs
          interne de Jenkins</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10200"
          significance="normal">
          <primary>utilisateurs</primary>

          <secondary>administrateur</secondary>

          <tertiary sortas="Jenkins">pour la base de données utilisateurs
          interne de Jenkins</tertiary>
        </indexterm>administrateur peut ensuite décider ce que ces
      utilisateurs sont autorisés à faire.</para>

      <para>Jenkins ajoute automatiquement tout utilisateur de gestionnaire de
      sources à cette base de données dès qu'un changement est committé dans
      le code source surveillé par Jenkins. Ces noms d'utilisateurs sont
      utilisés principalement pour enregistrer le responsable de chaque tâche
      de build. Vous pouvez voir la liste des utilisateurs actuellement connus
      en cliquant sur l'entrée de menu Personnes (voir <xref
      linkend="fig-hudson-user-list" />). Ici, vous pouvez visualiser les
      utilisateurs que Jenkins connaît actuellement, et aussi voir le dernier
      projet dans lequel ils ont committé. Notez que cette liste contient la
      liste de tous les utilisateurs à avoir jamais committé dans les projets
      que Jenkins surveille — ils pourraient ne pas être (et en général ne
      sont pas) tous des utilisateurs actifs de Jenkins capables de se logguer
      sur le serveur Jenkins.</para>

      <figure float="none" id="fig-hudson-user-list">
        <title>La liste des utilisateurs connus de Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10215">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0703.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0703.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Si vous cliquez sur un utilisateur de cette liste, Jenkins vous
      emmène sur une page affichant différentes informations à propos de cet
      utilisateur, incluant son nom complet et les tâches de build auxquelles
      il a contribué (voir <xref linkend="fig-hudson-user-builds" />). De là,
      vous pouvez aussi modifier ou compléter les détails à propos de cet
      utilisateur, comme son mot de passe ou son adresse email.</para>

      <figure float="none" id="fig-hudson-user-builds">
        <title>Afficher les builds auxquels un utilisateur participe</title>

        <mediaobject id="I_mediaobject7_d1e10227">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0704.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0704.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Un utilisateur apparaissant sur cette liste ne peut pas
      nécessairement se connecter à Jenkins. Pour pouvoir se connecter,
      l'utilisateur doit avoir un mot de passe configuré. Il y a
      essentiellement deux façons de faire cela. Si <indexterm
          id="I_indexterm7_d1e10234" significance="normal">
          <primary>sécurité</primary>

          <secondary>domaines de sécurité</secondary>

          <tertiary>activer l'enregistrement utilisateur</tertiary>
        </indexterm>vous avez configuré l'option "Autoriser les utilisateurs à
      s'enregistrer", les utilisateurs peuvent simplement se connecter avec
      leur nom d'utilisateur SCM et fournir leur adresse email et leur mot de
      passe (voir <xref linkend="hudson-security-simple" />). Autrement, vous
      pouvez activer un utilisateur en cliquant sur l'option de menu
      Configurer dans l'écran de détails utilisateur, et fournir une adresse
      email et un mot de passe vous-même (voir <xref
      linkend="fig-hudson-edit-user" />).</para>

      <figure float="none" id="fig-hudson-edit-user">
        <title>Créer un nouveau compte utilisateur en s'enregistrant</title>

        <mediaobject id="I_mediaobject7_d1e10249">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0705.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0705.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Il est <indexterm id="I_indexterm7_d1e10256" significance="normal">
          <primary>notifications</primary>

          <secondary>email</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10261"
          significance="normal">
          <primary>notifications email</primary>
        </indexterm>utile de noter que, si vos adresses email sont
      synchronisées avec vos noms d'utilisateurs de contrôle de version (par
      exemple, si vous travaillez chez acme.com, et que l'utilisateur “joe”
      dans votre système de contrôle de version a une adresse email
      <emphasis>joe@acme.com</emphasis>), vous pouvez faire que Jenkins dérive
      l'adresse email de l'utilisateur en ajoutant un suffixe que vous
      configurez dans la section Notification Email (voir <xref
      linkend="fig-security-email-config" />). Si vous avez effectué ce type
      de configuration, vous n'avez pas besoin de spécifier l'adresse email
      pour les nouveaux utilisateurs à moins qu'elle ne respecte pas cette
      convention.</para>

      <figure float="none" id="fig-security-email-config">
        <title>Synchroniser les adresses email</title>

        <mediaobject id="I_mediaobject7_d1e10273">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0706.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0706.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Une autre façon de gérer les utilisateurs courants actifs (ceux
      qui peuvent vraiment se connecter à Jenkins) s'effectue via le lien
      Gérer les utilisateurs dans la page de configuration principale de
      Jenkins (voir <xref linkend="fig-hudson-manage-users" />).</para>

      <figure float="none" id="fig-hudson-manage-users">
        <title>Vous pouvez aussi gérer les utilisateurs Jenkins depuis la page
        de configuration Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10286">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0707.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0707.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>D'ici, vous pouvez voir et éditer les utilisateurs qui peuvent se
      connecter à Jenkins (voir <xref linkend="fig-hudson-user-database" />).
      Cela inclut à la fois les utilisateurs qui se sont enregistrés
      manuellement (si cette option a été activée) et les utilisateurs SCM que
      vous avez activés en leur configurant un mot de passe. Vous pouvez aussi
      éditer des informations utilisateur (par exemple, modifier leur adresse
      email or réinitialiser leur mot de passe), ou même les supprimer de la
      liste des utilisateurs actifs. Procéder ainsi ne les enlèvera pas de la
      liste globale des utilisateurs (leurs noms apparaîtront toujours dans
      l'historique de build, par exemple), mais ils ne seront plus capables de
      se connecter au serveur Jenkins.</para>

      <figure float="none" id="fig-hudson-user-database">
        <title>La base de données des utilisateurs de Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10298">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0708.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0708.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>La base de données interne de Jenkins est suffisante pour de
      nombreuses équipes et organisations. Toutefois, pour des organisations
      plus importantes, cela peut devenir fastidieux et répétitif de gérer un
      grand nombre d'utilisateurs à la main. Et plus particulièrement encore
      si cette information existe déjà quelque part. Dans les sections
      suivantes, nous regarderons comment brancher Jenkins avec d'autres
      systèmes de gestion utilisateurs, comme des annuaires LDAP ou des
      utilisateurs et groupes <indexterm class="endofrange"
          id="I_indexterm7_d1e10305" significance="normal"
          startref="ch07-internal">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10307"
          significance="normal" startref="ch07-internal2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10309"
          significance="normal" startref="ch07-internal3">
          <primary></primary>
        </indexterm>Unix.</para>
    </sect2>

    <sect2 id="sec-security-ldap">
      <title>Utiliser un annuaire LDAP</title>

      <para>Plusieurs <indexterm class="startofrange" id="ch07-ldap1"
          significance="normal">
          <primary>sécurité</primary>

          <secondary>domaines de sécurité</secondary>

          <tertiary>annuaire LDAP</tertiary>
        </indexterm><indexterm class="startofrange" id="ch07-ldap2"
          significance="normal">
          <primary>annuaire LDAP, comme domaine de sécurité</primary>
        </indexterm>organisations utilisent des annuaires LDAP pour stocker
      des comptes et mots de passe à travers différentes applications. Jenkins
      s'intègre bien avec LDAP, sans nécessiter de plugin spécial. Il peut
      authentifier les utilisateurs en utilisant l'annuaire LDAP, vérifier
      l'appartenance à un groupe, et récupérer les adresses email des
      utilisateurs authentifiés.</para>

      <para>Pour intégrer Jenkins à votre annuaire LDAP, sélectionnez
      simplement “LDAP” dans la section Domaine de sécurité, et remplissez les
      détails concernant votre serveur LDAP (voir <xref
      linkend="fig-hudson-security-ldap" />). Le champ le plus important est
      le serveur de l'annuaire. Si vous utilisez un port non standard, vous
      devrez aussi l'indiquer (par exemple, <filename
      moreinfo="none">ldap.acme.org:1389</filename>). Si vous utilisez LDAPS,
      vous devrez aussi le spécifier (par exemple, <filename
      moreinfo="none">ldaps://ldap.acme.org</filename>)</para>

      <para>Si votre serveur autorise le <emphasis>binding</emphasis> anonyme,
      cela vous suffira probablement pour démarrer. Sinon, vous pouvez
      utiliser les options avancées pour paramétrer plus finement votre
      configuration.</para>

      <para>La plupart des champs Avancés peuvent sans problème être laissés
      vides à moins que vous n'ayez une bonne raison de les changer. Si votre
      annuaire est extrêmement volumineux, vous devriez spécifiez une valeur
      de DN racine (e.g., <literal moreinfo="none">dc=acme, dc=com</literal>)
      et/ou une base de recherche utilisateur et groupe (e.g., <literal
      moreinfo="none">ou=people</literal>) pour réduire la portée des requêtes
      utilisateur. Ceci n'est habituellement pas nécessaire à moins que vous
      ne remarquiez des problèmes de performance. Ou, si votre serveur
      n'autorise pas les bindind anonymes, vous devrez fournir un DN et un mot
      de passe de gestionnaire, afin que Jenkins puisse se connecter au
      serveur pour exécuter ses requêtes.</para>

      <figure float="none" id="fig-hudson-security-ldap">
        <title>Configurer LDAP dans Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10351">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0709.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0709.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Une fois que vous avez configuré votre serveur LDAP comme domaine
      de sécurité, vous pouvez configurer votre modèle de sécurité comme
      décrit précédemment. Quand les utilisateurs se connecteront à Jenkins,
      ils seront authentifiés sur l'annuaire LDAP.</para>

      <para>Vous <indexterm id="I_indexterm7_d1e10360" significance="normal">
          <primary>groupes</primary>

          <secondary>LDAP</secondary>
        </indexterm>pouvez aussi utiliser des groupes LDAP, bien que la
      configuration ne soit pas immédiatement évidente. Supposons que vous
      ayez défini un group appelé JenkinsAdmin dans votre annuaire LDAP, avec
      un DN <code>cn=JenkinsAdmin, ou-Groups, dc=acme, dc=com</code>. Pour
      référencer ce groupe dans Jenkins, vous devez prendre le nom commun (cn)
      en majuscules, et le préfixer avec <literal
      moreinfo="none">ROLE_</literal>. Ainsi <code>cn=JenkinsAdmin</code>
      devient <code>ROLE_JENKINSADMIN</code>. Vous pouvez voir un exemple de
      groupes LDAP<indexterm class="endofrange" id="I_indexterm7_d1e10379"
          significance="normal" startref="ch07-ldap1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10381"
          significance="normal" startref="ch07-ldap2">
          <primary></primary>
        </indexterm> utilisés de cette façon dans <xref
      linkend="fig-hudson-security-ldap-groups" />.</para>

      <figure float="none" id="fig-hudson-security-ldap-groups">
        <title>Utiliser des groupes LDAP dans Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10389">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0710.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0710.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>Utiliser Microsoft Active Directory</title>

      <para>Microsoft Active Directory<indexterm class="startofrange"
          id="ch07-ad1" significance="normal">
          <primary>Microsoft Active Directory, comme domaine de
          sécurité</primary>
        </indexterm><indexterm class="startofrange" id="ch07-ad2"
          significance="normal">
          <primary>sécurité</primary>

          <secondary>domaines de sécurité</secondary>

          <tertiary>Microsoft Active Directory</tertiary>
        </indexterm><indexterm class="startofrange" id="ch07-atlas3"
          significance="normal">
          <primary>Active Directory, Microsoft, comme domaine de
          sécurité</primary>
        </indexterm> est un logiciel d'annuaire largement utilisé dans les
      architectures Microsoft. Bien qu'Active Directory fournisse un service
      LDAP, il peut être compliqué à configurer, et il est plus simple de
      demander à Jenkins de parler directement au serveur Active Directory.
      Heureusement, il y a un plugin pour ça.</para>

      <para>Le plugin Active Directory de Jenkins vous permet <indexterm
          id="I_indexterm7_d1e10415" significance="normal">
          <primary>plugins</primary>

          <secondary>Active Directory</secondary>
        </indexterm> de configurer Jenkins pour authentifier les utilisateurs
      via un serveur Microsoft Active Directory. Vous pouvez à la fois
      authentifier les utilisateurs, et récupérer leurs groupes pour la
      matrice d'autorisations générale ou par projet. Notez que, à l'inverse
      d'une intégration LDAP conventionnelle (voir <xref
      linkend="sec-security-ldap" />), il n'est pas nécessaire de préfixer les
      groupes avec <literal moreinfo="none">ROLE_</literal>— vous pouvez
      utiliser l'annuaire des groupes Active Directory <indexterm
          id="I_indexterm7_d1e10426" significance="normal">
          <primary>groups</primary>

          <secondary>Active Directory</secondary>
        </indexterm>(comme “Administrateur de Domaine”).</para>

      <para>Pour configurer le plugin, vous devez fournir le nom de domaine
      complet de votre serveur Active Directory. Si vous avez plus d'un
      domaine, vous pouvez fournir une liste séparée par des virgule. Si vous
      fournissez le nom de la forêt (say “acme.com” au lieu de
      “europe.acme.com”), alors la recherche sera faite à partir du catalogue
      global. Notez que si vous faites cela sans spécifier le <emphasis>bind
      DN</emphasis> (voir ci-dessous), l'utilisateur devra se connecter en
      tant que “europe\joe” ou “joe@europe”.</para>

      <para>Les options avancées vous permettent de spécifier un nom de site
      (pour améliorer les performances en restreignant les contrôleurs de
      domaine que Jenkins requête), et un DN de liaison et un mot de passe, ce
      qui peut être pratique si vous vous connectez à une forêt multidomaines.
      Vous devez fournir des valeurs de DN de liaison et de mot de passe
      valides, que Jenkins puisse utiliser pour se connecter à votre serveur
      afin qu'il établisse l'identité complète de l'utilisateur en cours
      d'authentification. De cette façon, l'utilisateur peut taper simplement
      “jack” ou “jill”, et faire que le système retrouve automatiquement
      qu'ils sont <emphasis>jack@europe.acme.com</emphasis> ou
      <emphasis>jack@asia.acme.com</emphasis>. Vous devez fournir le nom
      principal complet avec le nom de domaine, tel que
      <emphasis>admin@europe.acme.com</emphasis>, ou un nom distinctif de
      style LDAP, tel que <literal
      moreinfo="none">CN=Administrator,OU=europe,DC=acme,DC=com</literal>.</para>

      <para>Une autre bonne chose à propos de ce plugin est qu'il fonctionne à
      la fois dans un environnement Windows et un environnement Unix. Donc si
      Jenkins fonctionne sur un serveur Unix, il pourra quand même effectuer
      les authentifications via un service Microsoft Active Directory d'une
      autre machine.</para>

      <para>Plus précisément, si Jenkins s'exécute sur une machine Windows et
      que vous ne spécifiez pas de domaine, cette machine doit être un membre
      du domaine auprès duquel vous souhaitez vous authentifier. Jenkins
      utilisera ADSI pour retrouver tous les détails, aucune configuration
      additionnelle n'est donc nécessaire.</para>

      <para>Sur une machine non Windows (ou si vous spécifiez un ou plusieurs
      domaines), vous devez dire à Jenkins le nom du domaine Active Directory
      auprès duquel s'authentifier. Jenkins utilise alors les enregistrements
      DNS SRV et le service LDAP d'Active Directory pour authentifier les
      utilisateurs.</para>

      <para>Jenkins peut déterminer les <indexterm id="I_indexterm7_d1e10462"
          significance="normal">
          <primary>groupes</primary>

          <secondary>Active Directory</secondary>
        </indexterm>groupes Active Directory auxquels l'utilisateur
      appartient. Vous pouvez donc les utiliser dans votre stratégie
      d'autorisations. Par exemple, vous pouvez utiliser ces groupes dans la
      sécurité basée sur une matrice, ou autoriser les "Administrateurs de
      domaine" à administrer <indexterm class="endofrange"
          id="I_indexterm7_d1e10468" significance="normal" startref="ch07-ad1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10470"
          significance="normal" startref="ch07-ad2">
          <primary></primary>
        </indexterm>Jenkins.</para>
    </sect2>

    <sect2>
      <title>Utiliser les utilisateurs et les groupes Unix</title>

      <para>Si <indexterm id="I_indexterm7_d1e10478" significance="normal">
          <primary>Unix</primary>

          <secondary>utilisateurs et groupes, en tant que domaine de
          sécurité</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10483"
          significance="normal">
          <primary>sécurité</primary>

          <secondary>domaines de sécurité</secondary>

          <tertiary>Utilisateurs et groupes Unix</tertiary>
        </indexterm><indexterm id="I_indexterm7_d1e10490"
          significance="normal">
          <primary>groupes</primary>

          <secondary>Unix</secondary>
        </indexterm>vous exécutez Jenkins sur une machine Unix, vous pouvez
      aussi demander à Jenkins d'utiliser les comptes utilisateur et groupes
      définis sur cette machine. Dans ce cas, les utilisateurs se connecteront
      à Jenkins en utilisant leurs comptes et mots de passe Unix. On utilise
      alors le système Pluggable Authentication Modules (PAM), et cela
      fonctionne aussi bien avec NIS.</para>

      <para>Dans sa forme la plus basique, c'est un peu rébarbatif, parce que
      cela nécessite de créer et de configurer des comptes utilisateurs pour
      chaque nouvel utilisateur Jenkins. Ce n'est véritablement utile que si
      ces comptes nécessitent d'être mis en place pour d'autres
      besoins.</para>
    </sect2>

    <sect2>
      <title>Delegating to the Servlet Container</title>

      <para>Another <indexterm id="I_indexterm7_d1e10503"
          significance="normal">
          <primary>Servlet container</primary>

          <secondary>as security realm</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10508"
          significance="normal">
          <primary>security</primary>

          <secondary>security realms</secondary>

          <tertiary>Servlet container</tertiary>
        </indexterm>way to identify Jenkins users is to let your Servlet
      container do it for you. This approach is useful if you are running
      Jenkins on a Servlet container such as <indexterm
          id="I_indexterm7_d1e10516" significance="normal">
          <primary>Tomcat Servlet container</primary>
        </indexterm>Tomcat or <indexterm id="I_indexterm7_d1e10520"
          significance="normal">
          <primary>GlassFish Servlet container</primary>
        </indexterm>GlassFish, and you already have an established way to
      integrate the Servlet container with your local enterprise user
      directory. Tomcat, for example, allows you to authenticate users against
      a relational database (using direct JDBC or a DataSource), JNDI, JAAS,
      or an XML configuration file. You can also use the roles defined in the
      Servlet container’s user directory for use with Matrix and Project-based
      authorization <phrase role="keep-together">strategies</phrase>.</para>

      <para>In Jenkins, this is easy to configure—just select this option in
      the Security Realm section (see <xref
      linkend="fig-hudson-security-container" />). Once you have done this,
      Jenkins will let the server take care of everything.</para>

      <figure float="none" id="fig-hudson-security-container">
        <title>Selecting the security realm</title>

        <mediaobject id="I_mediaobject7_d1e10534">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0711.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0711.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>Using Atlassian Crowd</title>

      <para>If <indexterm class="startofrange" id="ch07-atlas1"
          significance="normal">
          <primary>Atlassian Crowd, as security realm</primary>
        </indexterm><indexterm class="startofrange" id="ch07-atlas2"
          significance="normal">
          <primary>security</primary>

          <secondary>security realms</secondary>

          <tertiary>Atlassian Crowd</tertiary>
        </indexterm><indexterm id="I_indexterm7_d1e10554"
          significance="normal">
          <primary>Crowd, Atlassian, as security realm</primary>
        </indexterm>your organization is using Atlassian products such as JIRA
      and Confluence, you may also be using Crowd. Crowd is a commercial
      Identity Management and Single-Sign On (SSO) application from Atlassian
      that lets you manage single user accounts across multiple products. It
      lets you manage both an internal database of users, groups and roles,
      and integrate with external directories such as LDAP directories or
      custom user stores.</para>

      <para>Using the Jenkins Crowd plugin, you<indexterm
          id="I_indexterm7_d1e10560" significance="normal">
          <primary>plugins</primary>

          <secondary>Crowd, for Atlassian Crowd</secondary>
        </indexterm> can use Atlassian Crowd as the source of your Jenkins
      users and groups. Before you start, you need to set up a new application
      in Crowd (see <xref linkend="fig-hudson-security-cloud-app" />). Just
      set up a new Generic Application called “hudson” (or something similar),
      and step through the tabs. In the Connections tab, you need to provide
      the IP address of your Jenkins server. Then map the Crowd directories
      that you will be using to retrieve Jenkins user accounts and group
      information. Finally, you will need to tell Crowd which users from these
      directories can connect to Jenkins. One option is to allow all users to
      authenticate, and let Jenkins sort out the details. Alternatively, you
      can list the Crown user groups who are allowed to connect to
      Jenkins.</para>

      <figure float="0" id="fig-hudson-security-cloud-app">
        <title>Using Atlassian Crowd as the Jenkins Security Realm</title>

        <mediaobject id="I_mediaobject7_d1e10571">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0712.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0712.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you have set this up, you need to install the Jenkins Crowd
      plugin, which you do as usual via the Jenkins Plugin Manager. Once you
      have installed the plugin and restarted Jenkins, you can define Crowd as
      your Security Realm in the main Jenkins configuration screen (see <xref
      linkend="fig-hudson-security-crowd" />).</para>

      <figure float="0" id="fig-hudson-security-crowd">
        <title>Using Atlassian Crowd as the Jenkins Security Realm</title>

        <mediaobject id="I_mediaobject7_d1e10583">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0713.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0713.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>With this plugin installed and configured, you can use users and
      <indexterm id="I_indexterm7_d1e10590" significance="normal">
          <primary>groups</primary>

          <secondary>Atlassian Crowd</secondary>
        </indexterm>groups from Crowd for any of the Jenkins Authorization
      strategies we discussed earlier on in the chapter. For example, in <xref
      linkend="fig-hudson-security-crowd-groups-matrix" />, we are using user
      groups defined in Crowd to set up Matrix-based security in the main
      configuration <indexterm class="endofrange" id="I_indexterm7_d1e10598"
          significance="normal" startref="ch07-atlas2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10600"
          significance="normal" startref="ch07-atlas1">
          <primary></primary>
        </indexterm>screen.</para>

      <figure float="0" id="fig-hudson-security-crowd-groups-matrix">
        <title>Using Atlassian Crowd groups in Jenkins</title>

        <mediaobject id="I_mediaobject7_d1e10606">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0714.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0714.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>Integrating with Other Systems</title>

      <para>In <indexterm id="I_indexterm7_d1e10616" significance="normal">
          <primary>security</primary>

          <secondary>security realms</secondary>

          <tertiary>CAS</tertiary>
        </indexterm><indexterm id="I_indexterm7_d1e10623"
          significance="normal">
          <primary>security</primary>

          <secondary>security realms</secondary>

          <tertiary>SFEE</tertiary>
        </indexterm><indexterm id="I_indexterm7_d1e10630"
          significance="normal">
          <primary>CAS (Central Authentication Service)</primary>
        </indexterm><indexterm id="I_indexterm7_d1e10633"
          significance="normal">
          <primary>SFEE (Source Forge Enterprise Edition)</primary>
        </indexterm><indexterm id="I_indexterm7_d1e10636"
          significance="normal">
          <primary>plugins</primary>

          <secondary>CAS</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10641"
          significance="normal">
          <primary>plugins</primary>

          <secondary>SFEE</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e10646"
          significance="normal">
          <primary>Source Forge Enterprise Edition</primary>

          <see>SFEE</see>
        </indexterm>addition to the authentication strategies discussed here,
      there are a number of other plugins that allow Jenkins to authenticate
      against other systems. At the time of writing, these include Central
      Authentication Service (CAS)—an open source single sign-on tool—and the
      Collabnet Source Forge Enterprise Edition (SFEE) server.</para>

      <para>If <indexterm class="startofrange" id="ch07-cust"
          significance="normal">
          <primary>security</primary>

          <secondary>security realms</secondary>

          <tertiary>customizing</tertiary>
        </indexterm><indexterm class="startofrange" id="ch07-cust2"
          significance="normal">
          <primary>plugins</primary>

          <secondary>Script Security Realm</secondary>
        </indexterm><indexterm class="startofrange" id="ch07-cust3"
          significance="normal">
          <primary>Script Security Realm plugin</primary>
        </indexterm><indexterm class="startofrange" id="ch07-cust4"
          significance="normal">
          <primary>scripts</primary>

          <secondary>custom authentication scripts</secondary>
        </indexterm>no plugin is available, you can also write your own custom
      authentication script. To do this, you need to install the Script
      Security Realm plugin. Once you have installed the script and restarted
      Jenkins, you can write two scripts in your favorite scripting language.
      One script authenticates users, whereas the other determines the groups
      of a given user (see <xref
      linkend="fig-hudson-security-scripts" />).</para>

      <figure float="0" id="fig-hudson-security-scripts">
        <title>Using custom scripts to handle authentication</title>

        <mediaobject id="I_mediaobject7_d1e10680">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0715.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0715.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Before invoking the authentication script, Jenkins sets two
      <indexterm id="I_indexterm7_d1e10687" significance="normal">
          <primary>U environment variable</primary>
        </indexterm><indexterm id="I_indexterm7_d1e10690"
          significance="normal">
          <primary>P environment variable</primary>
        </indexterm><phrase>environment</phrase> variables: <literal
      moreinfo="none">U</literal>, containing the username, and <literal
      moreinfo="none">P</literal>, containing the password. This script uses
      these <phrase role="keep-together">environment</phrase> variables to
      authenticate using the specified username and password, returning 0 if
      the authentication is successful, and some other value otherwise. If
      authentication fails, the output from the process will be reported in
      the error message displayed to the user. Here is a simple <indexterm
          class="startofrange" id="ch07-authgroovy" significance="normal">
          <primary>Groovy scripts</primary>

          <secondary>authentication script</secondary>
        </indexterm>Groovy authentication script:</para>

      <programlisting format="linespecific" id="I_programlisting7_d1e10712">def env = System.getenv()
def username = env['U']
def password = env['P']

println "Authenticating user $username"

if (authenticate(username, password)) {
    System.exit 0
} else {
    System.exit 1
}

def authenticate(def username, def password) {
    def userIsAuthenticated = true
    // Authentication logic goes here
    return userIsAuthenticated
}</programlisting>

      <para>This script is enough if all you have to deal with is basic
      authentication without groups. If you want to use groups from your
      custom authentication source in your Matrix-<phrase
      role="keep-together">based</phrase> or Project-based authorizations (see
      <xref linkend="sect-authorization" />), you can write a second script,
      which determines the groups for a given user. This groups uses the U
      environment variable to determine which user is trying to log on, and
      prints a comma-separated list of groups for this user to the standard
      output. If you don’t like commas, you can override the separating
      character in the configuration. A simple Groovy script to do this job is
      shown here:</para>

      <programlisting format="linespecific" id="I_programlisting7_d1e10721">def env = System.getenv()
def username = env['U'] 

println findGroupsFor(username)

System.exit 0

def findGroupsFor(def username) {
    return "admin,game-of-life-developer"
}</programlisting>

      <para>Both these scripts must return 0 when called for a user to
      be<indexterm class="endofrange" id="I_indexterm7_d1e10725"
          significance="normal" startref="ch07-cust2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10727"
          significance="normal" startref="ch07-cust3">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10729"
          significance="normal" startref="ch07-cust3">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10731"
          significance="normal" startref="ch07-cust">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e10733"
          significance="normal" startref="ch07-authgroovy">
          <primary></primary>
        </indexterm> authenticated.</para>
    </sect2>
  </sect1>

  <sect1 id="sect-authorization">
    <title>Authorization—Who Can Do What</title>

    <para>Once you have defined how to identify your users, you need to decide
    what they are allowed to do. Jenkins supports a variety of strategies in
    this area, ranging from a simple approach where a logged-in user can do
    anything to more involved roles and project-based authentication
    strategies.</para>

    <sect2 id="sec-matrix-security">
      <title>Matrix-based Security</title>

      <para>Letting<indexterm class="startofrange" id="ch07-matrix1"
          significance="normal">
          <primary>matrix-based security</primary>
        </indexterm><indexterm class="startofrange" id="ch07-matrix2"
          significance="normal">
          <primary>authorization</primary>

          <secondary>matrix-based security</secondary>
        </indexterm><indexterm class="startofrange" id="ch07-matrix3"
          significance="normal">
          <primary>security</primary>

          <secondary>authorization</secondary>

          <tertiary>matrix-based security</tertiary>
        </indexterm><indexterm id="I_indexterm7_d1e10761"
          significance="normal">
          <primary>permissions</primary>

          <see>authorization</see>
        </indexterm> signed-in users do anything is certainly flexible, and
      may be all you need for a small team. For larger or multiple teams, or
      cases where Jenkins is being used outside the development environment, a
      more sophisticated approach is generally required.</para>

      <para>Matrix-based security is a more sophisticated approach, where
      different users are assigned different rights, using a role-based
      approach.</para>

      <sect3>
        <title>Setting up matrix-based security</title>

        <para>The<indexterm id="I_indexterm7_d1e10774" significance="normal">
            <primary>administrator</primary>

            <secondary sortas="matrix">for matrix-based security</secondary>
          </indexterm><indexterm id="I_indexterm7_d1e10779"
            significance="normal">
            <primary>users</primary>

            <secondary>administrator</secondary>

            <tertiary sortas="matrix">for matrix-based security</tertiary>
          </indexterm> first step in setting up matrix-based security in
        Jenkins is to create an administrator. <emphasis>This is an essential
        step, and must be done before all others.</emphasis> Now your
        administrator can be an existing user, or one created specially for
        the purpose. If you want to create a dedicated administrator user,
        simply create one by signing up in the usual way (see <xref
        linkend="fig-hudson-user-signup" />). It doesn’t have to be associated
        with an SCM user.</para>

        <para>Once you have your admin user ready, you can activate
        matrix-based security by selecting “Matrix-based security” in the
        Authorization section of the main configuration page. Jenkins will
        display a table containing authorized users, and checkboxes
        corresponding to the various permissions that you can assign to these
        users (see <xref linkend="fig-hudson-matrix-anonymous" />).</para>

        <figure float="none" id="fig-hudson-matrix-anonymous">
          <title>Matrix-based security configuration</title>

          <mediaobject id="I_mediaobject7_d1e10799">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0716.pdf" format="PDF" />
            </imageobject>

            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0716.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The special “anonymous” user is always present in the table.
        This user represents unauthenticated users. Typically, you only grant
        very limited rights to unauthenticated users, such as read-only
        access, or no access at all (as shown in <xref
        linkend="fig-hudson-matrix-anonymous" />).</para>

        <para>The first thing you need to do now is to grant administration
        rights to your administrator. Add your administration user in the
        “User/group to add” field and click on Add. Your administrator will
        now appear in the permissions matrix. Now make sure you grant this
        user every permission (see <xref
        linkend="fig-hudson-matrix-admin" />), and save your configuration.
        You should now be able to log in with your administrator account (if
        you aren’t already logged in with this account) and continue to set up
        your other users.</para>

        <figure float="none" id="fig-hudson-matrix-admin">
          <title>Setting up an administrator</title>

          <mediaobject id="I_mediaobject7_d1e10815">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0717.pdf" format="PDF" />
            </imageobject>

            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0717.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3>
        <title>Fine-tuning user permissions</title>

        <para>Once you have set up your administrator account, you can add any
        other users that need to access your Jenkins instance. Simply add the
        user names and tick the permissions you want to grant them (see <xref
        linkend="fig-hudson-matrix-users" />). If you are using an LDAP server
        or Unix users and groups as the underlying authentication schema (see
        <xref linkend="sec-security-ldap" />), you can also configure
        permissions for groups of users.</para>

        <figure float="none" id="fig-hudson-matrix-users">
          <title>Setting up other users</title>

          <mediaobject id="I_mediaobject7_d1e10832">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0718.pdf" format="PDF" />
            </imageobject>

            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0718.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You can grant a range of permissions, which are organized into
        several groups: Overall, Slave, Job, Run, View and SCM. Most of the
        permissions are fairly obvious, but some need a little more
        explanation. The individual permissions are as follows:</para>

        <variablelist>
          <varlistentry>
            <term><emphasis>Overall</emphasis></term>

            <listitem>
              <para>This group covers basic system-wide permissions:</para>

              <variablelist>
                <varlistentry>
                  <term>Administer</term>

                  <listitem>
                    <para>Lets a user make system-wide configuration changes
                    and other sensitive operations, for example in the main
                    Jenkins configuration pages. This should be reserved for
                    the Jenkins administrator.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Read</term>

                  <listitem>
                    <para>This permission provides read-only access to
                    virtually all of the pages in Jenkins. If you want
                    anonymous users to be able to view build jobs freely, but
                    not to be able to modify or start them, grant the Read
                    role to the special “anonymous” user. If not, simply
                    revoke this permission for the Anonymous user. And if you
                    want all authenticated users to be able to see build jobs,
                    then add a special user called “authenticated”, and grant
                    this user Overall/Read <phrase
                    role="keep-together">permission</phrase>.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis>Slave</emphasis></term>

            <listitem>
              <para>This group covers permissions about remote build nodes, or
              slaves:</para>

              <variablelist>
                <varlistentry>
                  <term>Configure</term>

                  <listitem>
                    <para>Create and configure new build nodes.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Delete</term>

                  <listitem>
                    <para>Delete build nodes.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis>Job</emphasis></term>

            <listitem>
              <para>This group covers job-related permissions:</para>

              <variablelist>
                <varlistentry>
                  <term>Create</term>

                  <listitem>
                    <para>Create a new build job.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Delete</term>

                  <listitem>
                    <para>Delete an existing build job.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Configure</term>

                  <listitem>
                    <para>Update the configuration of an existing build
                    jobs.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Read</term>

                  <listitem>
                    <para>View build jobs.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Build</term>

                  <listitem>
                    <para>Start a build job.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Workspace</term>

                  <listitem>
                    <para>View and download the workspace contents for a build
                    job. Remember, the workspace contains source code and
                    artifacts, so if you want to protect these from general
                    access, you should revoke this permission.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Release</term>

                  <listitem>
                    <para>Start a Maven release for a project configured with
                    the M2Release plugin.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis>Run</emphasis></term>

            <listitem>
              <para>This <indexterm id="I_indexterm7_d1e10940"
                  significance="normal">
                  <primary>build history</primary>

                  <secondary>permissions for</secondary>
                </indexterm>group covers rights related to particular builds
              in the build history:</para>

              <variablelist>
                <varlistentry>
                  <term>Delete</term>

                  <listitem>
                    <para>Delete a build from the build history.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Update</term>

                  <listitem>
                    <para>Update the description and other properties of a
                    build in the build history. This can be useful if a user
                    wants to leave a note about the cause of a build failure,
                    for example.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis>View</emphasis></term>

            <listitem>
              <para>This group covers managing views:</para>

              <variablelist>
                <varlistentry>
                  <term>Create</term>

                  <listitem>
                    <para>Create a new view.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Delete</term>

                  <listitem>
                    <para>Delete an existing view.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Configure</term>

                  <listitem>
                    <para>Configure an existing view.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>SCM</term>

            <listitem>
              <para>Permissions related to your version control system:</para>

              <variablelist>
                <varlistentry>
                  <term>Tag</term>

                  <listitem>
                    <para>Create a new tag in the source code repository for a
                    given build.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Others</term>

            <listitem>
              <para>There can also be other permissions available, depending
              on the plugins installed. One useful one is:</para>

              <variablelist>
                <varlistentry>
                  <term>Promote</term>

                  <listitem>
                    <para>If the Promoted Builds plugin is installed, this
                    permission allows users to manually promote a
                    build.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3>
        <title>Help! I’ve locked myself out!</title>

        <para>Now it may happen that, during this process, you may end up
        locking yourself out of Jenkins. This can happen if, for example, you
        save the matrix configuration without having correctly set up your
        administrator. If this happens, do not panic—there is an easy fix, as
        long as you have access to Jenkins’s home directory. Simply open up
        the <filename moreinfo="none">config.xml</filename> file at the root
        of the Jenkins home directory. This will contain something like
        this:</para>

        <programlisting format="linespecific" id="I_programlisting7_d1e11019">&lt;hudson&gt;
    &lt;version&gt;1.391&lt;/version&gt;
    &lt;numExecutors&gt;2&lt;/numExecutors&gt;
    &lt;mode&gt;NORMAL&lt;/mode&gt;
    &lt;useSecurity&gt;true&lt;/useSecurity&gt;
    ...</programlisting>

        <para>The thing to look for is the <code>&lt;useSecurity&gt;</code>
        element. To restore your access to Jenkins, change this value to
        false, and restart your server. You will now be able to access Jenkins
        again, and set up your security configuration<indexterm
            class="endofrange" id="I_indexterm7_d1e11026"
            significance="normal" startref="ch07-matrix1">
            <primary></primary>
          </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11028"
            significance="normal" startref="ch07-matrix2">
            <primary></primary>
          </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11030"
            significance="normal" startref="ch07-matrix3">
            <primary></primary>
          </indexterm> correctly.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Project-based Security</title>

      <para>Project-based <indexterm class="startofrange" id="ch07-proj1"
          significance="normal">
          <primary>project-based security</primary>
        </indexterm><indexterm class="startofrange" id="ch07-proj2"
          significance="normal">
          <primary>authorization</primary>

          <secondary>project-based security</secondary>
        </indexterm><indexterm class="startofrange" id="ch07-proj3"
          significance="normal">
          <primary>security</primary>

          <secondary>authorization</secondary>

          <tertiary>project-based security</tertiary>
        </indexterm>security lets you build on the matrix-based security model
      we just discussed, and apply it to individual projects. Not only can you
      assign system-wide roles for your users, you can also configure more
      specific rights for certain individual projects.</para>

      <para>To activate project-level security, select “Project-based Matrix
      Authorization Strategy” in the Authorization section of the main
      configuration screen (see <xref
      linkend="fig-hudson-project-based-security" />). Here, you set up the
      default rights for users and groups, as we saw with Matrix-based
      security (see <xref linkend="sec-matrix-security" />).</para>

      <figure float="0" id="fig-hudson-project-based-security">
        <title>Project-based security</title>

        <mediaobject id="I_mediaobject7_d1e11063">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0719.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0719.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <?dbfo-need height=”1in”?>

      <para>These are the default permissions that apply to all projects that
      have not been specially configured. However, when you use project-based
      security, you can also set up special project-specific permissions. You
      do this by selecting “Enable project-based security” in the project
      configuration screen (see <xref
      linkend="fig-hudson-security-project-anon" />). Jenkins will display a
      table of project-specific permissions. You can configure these
      permissions for different users and groups just like on the system-wide
      configuration page. These permissions will be added to the system-wide
      permissions to produce a project-specific set of permissions applicable
      for this project.</para>

      <figure float="0" id="fig-hudson-security-project-anon">
        <title>Configuring project-based security</title>

        <mediaobject id="I_mediaobject7_d1e11076">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0720.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0720.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The way this works is easiest to understand with a few practical
      examples. In <xref linkend="fig-hudson-project-based-security" />, for
      instance, no permissions have been granted to the anonymous user, so by
      default all build jobs will remain invisible until a user signs on.
      However, we are using project-based security, so we can override this on
      a project-by-project basis. In <xref
      linkend="fig-hudson-security-project-anon" />, for example, we have set
      up the <emphasis>game-of-life</emphasis> project to have read-only
      access for the special “anonymous” user.</para>

      <para>When you save this configuration, unauthenticated users will be
      able to see the <emphasis>game-of-life</emphasis> project in read-only
      mode (see <xref linkend="fig-hudson-security-readonly-project" />). This
      same principle applies with all of the project-specific
      permissions.</para>

      <figure float="0" id="fig-hudson-security-readonly-project">
        <title>Viewing a project</title>

        <mediaobject id="I_mediaobject7_d1e11100">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0721.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0721.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Note that Jenkins permissions are cumulative—at the time of
      writing, there is no way to revoke a system-wide permission for a
      particular project. For example, if the anonymous user has read-access
      to build jobs at the system level, you can’t revoke read-only access for
      an individual project. So when using project-based security, use the
      system level matrix to define minimum default permissions applicable
      across all of your projects, and set up projects with additional
      project-specific authorizations.</para>

      <para>There are many approaches to managing project permissions, and
      they depend as much on organizational culture as on technical
      considerations. One common strategy <phrase
      role="keep-together">approach</phrase> is to allow team members to have
      full access to their own projects, and read-only access to other
      projects. <indexterm id="I_indexterm7_d1e11113" significance="normal">
          <primary>plugins</primary>

          <secondary>Extended Read Permission</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e11118"
          significance="normal">
          <primary>Extended Read Permission plugin</primary>
        </indexterm>The Extended Read Permission plugin is a useful <phrase
      role="keep-together">extension</phrase> to have for this scenario. This
      plugin lets you let users from other teams see a read-only view of your
      project configuration, without being able to modify anything (see <xref
      linkend="fig-hudson-security-extended-read" />). This is a great way to
      share build configuration practices and tips with other teams without
      letting them tamper with your builds.</para>

      <figure float="none" id="fig-hudson-security-extended-read">
        <title>Setting up Extended Read Permissions</title>

        <mediaobject id="I_mediaobject7_d1e11130">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0722.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0722.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>It is worth noting that, whenever large and/or multiple teams are
      involved, the internal Jenkins database reaches its limits quite
      quickly, and it is worth considering integrating with a more specialized
      directory service such as an LDAP server, Active Directory or Atlassian
      Crowd, or possibly a more sophisticated permission system such as
      role-based security, discussed in the following <indexterm
          class="endofrange" id="I_indexterm7_d1e11137" significance="normal"
          startref="ch07-proj1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11139"
          significance="normal" startref="ch07-proj2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11141"
          significance="normal" startref="ch07-proj3">
          <primary></primary>
        </indexterm>section.</para>
    </sect2>

    <sect2>
      <title>Role-based Security</title>

      <para>Sometimes <indexterm class="startofrange" id="ch07-role1"
          significance="normal">
          <primary>role-based security</primary>
        </indexterm><indexterm class="startofrange" id="ch07-role2"
          significance="normal">
          <primary>authorization</primary>

          <secondary>role-based security</secondary>
        </indexterm><indexterm class="startofrange" id="ch07-role3"
          significance="normal">
          <primary>security</primary>

          <secondary>authorization</secondary>

          <tertiary>role-based security</tertiary>
        </indexterm>managing user permissions individually can be cumbersome,
      and you may not want to integrate with an LDAP server to set up groups
      that way. A more recent alternative option is to use the<indexterm
          id="I_indexterm7_d1e11165" significance="normal">
          <primary>plugins</primary>

          <secondary>Role Strategy</secondary>
        </indexterm><indexterm id="I_indexterm7_d1e11170"
          significance="normal">
          <primary>Role Strategy plugin</primary>
        </indexterm> Role Strategy plugin, which allows you to define global
      and project-level roles, and assign these roles to users.</para>

      <para>You install the plugin in the usual way, via the Plugin Manager.
      Once installed, you can activate this authorization strategy in the main
      configuration page (see <xref
      linkend="fig-hudson-security-role-based" />).</para>

      <figure float="none" id="fig-hudson-security-role-based">
        <title>Setting up Role-based security</title>

        <mediaobject id="I_mediaobject7_d1e11181">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0723.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0723.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you have set this up, you can define roles that regroup sets
      of related permissions. You set up and configure your roles, and assign
      these roles to your users, in the Manage Roles screen, which you can
      access in the Manage Jenkins screen (see <xref
      linkend="fig-hudson-security-manage-roles-menu" />).</para>

      <figure float="none" id="fig-hudson-security-manage-roles-menu">
        <title>The Manage Roles configuration menu</title>

        <mediaobject id="I_mediaobject7_d1e11193">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0724.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0724.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In the Manage Roles screen, you can set up global and <indexterm
          id="I_indexterm7_d1e11200" significance="normal">
          <primary>project-level permissions, in role-based security</primary>
        </indexterm>project-level permissions. Global permissions apply across
      all projects, and are typically system-wide administration or general
      access permissions (see <xref
      linkend="fig-hudson-security-global-roles" />). Setting these roles up
      is intuitive and similar to setting up user permissions in the other
      security models we have seen.</para>

      <figure float="0" id="fig-hudson-security-global-roles">
        <title>Managing global roles</title>

        <mediaobject id="I_mediaobject7_d1e11209">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0725.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0725.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Project roles are slightly more complicated. A project role
      regroups a set of permissions that are applicable to one or more
      (presumably related) projects. You define the relevant projects using a
      regular expression, so it helps to have a clear and consistent set of
      naming conventions in place for your project names (see <xref
      linkend="fig-hudson-security-project-roles" />). For example, you may
      wish to create roles distinguishing developers with full configuration
      rights on their own project from users who can simply trigger a build
      and view the build results, or create roles where developers can
      configure certain automated deployment build jobs, but only production
      teams are allowed to execute these jobs.</para>

      <figure float="0" id="fig-hudson-security-project-roles">
        <title>Managing project roles</title>

        <mediaobject id="I_mediaobject7_d1e11221">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0726.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0726.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you have defined these roles, you can go to the Assign Roles
      screen to set up individual users or groups with these roles (see <xref
      linkend="fig-hudson-security-assign-roles" />).</para>

      <figure float="0" id="fig-hudson-security-assign-roles">
        <title>Assigning roles to users</title>

        <mediaobject id="I_mediaobject7_d1e11234">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0727.pdf" format="PDF" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0727.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Role-based strategy is relatively new in Jenkins, but it is an
      excellent way to simplify the task of managing permissions in large,
      multiteam and<indexterm class="endofrange" id="I_indexterm7_d1e11241"
          significance="normal" startref="ch07-role1">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11243"
          significance="normal" startref="ch07-role2">
          <primary></primary>
        </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11245"
          significance="normal" startref="ch07-role3">
          <primary></primary>
        </indexterm> multiproject organizations.</para>
    </sect2>
  </sect1>

  <sect1 id="sect-security-auditing">
    <title>Auditing—Keeping Track of User Actions</title>

    <para>In <indexterm class="startofrange" id="ch07-audit1"
        significance="normal">
        <primary>auditing user actions</primary>
      </indexterm><indexterm class="startofrange" id="ch07-audit2"
        significance="normal">
        <primary>users</primary>

        <secondary>auditing actions of</secondary>
      </indexterm>addition to configuring user accounts and access rights, it
    can also be useful to keep track of the individual user actions: in other
    words, who did what to your server configuration. This sort of audit trail
    facility is even required in many organizations.</para>

    <para>There are two Jenkins plugins that can help you do this. The Audit
    Trail plugin keeps a record of user changes in a special log file. And the
    JobConfigHistory plugin lets you keep a copy of previous versions of the
    various system and job configuration files that Jenkins uses.</para>

    <para>The<indexterm class="startofrange" id="ch07-at1"
        significance="normal">
        <primary>plugins</primary>

        <secondary>Audit Trail</secondary>
      </indexterm><indexterm class="startofrange" id="ch07-at2"
        significance="normal">
        <primary>Audit Trail plugin</primary>
      </indexterm> Audit Trail Plugin keeps track of the main user actions in
    a set of rolling log files. To set this up, go to the Plugin Manager page
    and select the Audit Trail plugin in the list of available plugins. Then,
    as usual, click on Install and restart Jenkins once the plugin has been
    downloaded.</para>

    <para>You can set up the audit trail configuration in the Audit Trail
    section of the main Jenkins configuration page (see <xref
    linkend="fig-hudson-security-audit-trail" />). The most important field is
    the Log Location, which is where you indicate the directory in which the
    log files are to be written. The audit trail is designed to produce
    system-style log files, which are often placed in a special system
    directory such as <filename moreinfo="none">/var/log</filename>. You can
    also configure the number of log files to be maintained, and the
    (approximate) maximum size of each file. The simplest option is to provide
    an absolute path (such as <filename
    moreinfo="none">/var/log/hudson.log</filename>), in which case Jenkins
    will write to log files with names like <filename
    moreinfo="none">/var/log/hudson.log.1</filename>, <filename
    moreinfo="none">/var/log/hudson.log.2</filename>, and so forth. Of course,
    you need to ensure that the user running your Jenkins instance is allowed
    to write to this directory.</para>

    <figure float="0" id="fig-hudson-security-audit-trail">
      <title>Configuring the Audit Trail plugin</title>

      <mediaobject id="I_mediaobject7_d1e11294">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0728.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0728.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can also use the format defined in the Java logging <ulink
    url="http://download.oracle.com/javase/1.5.0/docs/api/java/util/logging/FileHandler.html">FileHandler</ulink>
    class for more control over the generated log files. In this format, you
    can insert variables such as <literal moreinfo="none">%h</literal>, for
    the current user’s home directory, and <literal
    moreinfo="none">%t</literal>, for the system temporary directory, to build
    a more dynamic file path.</para>

    <para>By default, the details recorded in the audit logs are fairly
    sparse—they effectively record key actions performed, such as creating,
    modifying or deleting job configurations or views, and the user who
    performed the actions. The log also shows how individual build jobs
    started. An extract of the default log is shown here:</para>

    <programlisting format="linespecific" id="I_programlisting7_d1e11312">Dec 27, 2010 9:16:08 AM /job/game-of-life/configSubmit by johnsmart
Dec 27, 2010 9:16:42 AM /view/All/createItem by johnsmart
Dec 27, 2010 9:16:57 AM /job/game-of-life-prod-deployment/doDelete by johnsmart
Dec 27, 2010 9:24:38 AM job/game-of-life/ #177 Started by user johnsmart
Dec 27, 2010 9:25:57 AM job/game-of-life-acceptance-tests/ #107 Started by upstream 
    project "game-of-life" build number 177
Dec 27, 2010 9:25:58 AM job/game-of-life-functional-tests/ #7 Started by upstream 
    project "game-of-life" build number 177
Dec 27, 2010 9:28:15 AM /configSubmit by johnsmart</programlisting>

    <para>This audit trail is certainly useful, especially from a system
    administration perspective. However, it doesn’t provide any information
    about the exact changes that were made to the Jenkins configuration.
    Nevertheless, one of the most important reasons to keep track of user
    actions in Jenkins is to keep tabs on exactly what changes were made to
    build job configurations. When something goes wrong, it can be useful to
    know what changes were done and so be able to undo them. The
    JobConfigHistory plugin lets you do<indexterm class="endofrange"
        id="I_indexterm7_d1e11316" significance="normal" startref="ch07-at1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11318"
        significance="normal" startref="ch07-at2">
        <primary></primary>
      </indexterm> just this.</para>

    <para>The <indexterm class="startofrange" id="ch07-jobconfig"
        significance="normal">
        <primary>JobConfigHistory plugin</primary>
      </indexterm><indexterm class="startofrange" id="ch07-jobconfig2"
        significance="normal">
        <primary>plugins</primary>

        <secondary>JobConfigHistory</secondary>
      </indexterm>JobConfigHistory plugin is a powerful tool that lets you
    keep a full history of changes made to both job and system configuration
    files. You install it from the Plugin Manager in the usual way. Once
    installed, you can fine-tune the job history configuration in the Manage
    Jenkins screen (see <xref
    linkend="fig-hudson-security-confighistory-setup" />).</para>

    <figure float="0" id="fig-hudson-security-confighistory-setup">
      <title>Setting up Job Configuration History</title>

      <mediaobject id="I_mediaobject7_d1e11338">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0729.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0729.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Here, you can configure a number of useful nonstandard options. In
    particular, you should specify a directory where Jenkins can store
    configuration history, in the “Root history folder” field. This is the
    directory where Jenkins will store a record of both system-related and
    job-related configuration changes. It can be either an absolute directory
    (such as <filename moreinfo="none">/var/hudson/history</filename>), or a
    relative directory, calculated from the Jenkins home directory (see <xref
    linkend="sec-hudson-home-directory" />). If you don’t do this, job
    configuration history will be stored with the jobs, and will be lost if
    you delete a job.</para>

    <para>There are a few other useful options in the Advanced section. The
    “Save system configuration changes” checkbox lets you keep track of
    system-wide configuration updates, and not just job-specific ones. And the
    “Do not save duplicate history” checkbox allows you to avoid recording
    configuration updates if no actual changes have been made. If not, a new
    version of the configuration will be recorded, even if you have only
    pressed the Save button without making any changes. Jenkins can also cause
    this to happen internally—for example, system configuration settings are
    all saved whenever the main configuration page is saved, even if no
    changes have been made.</para>

    <para>Once you have set up this plugin, you can access the configuration
    history both for the whole server, including system configuration updates,
    as well as the changes made to the configuration of each project. In both
    cases, you can view these changes by clicking on the Job Config History
    icon to the right of the screen. Clicking on this icon from the Jenkins
    dashboard will display a view of all of your configuration history,
    including job changes and system-wide changes (see <xref
    linkend="fig-hudson-jobconfig-global-history" />).</para>

    <figure float="none" id="fig-hudson-jobconfig-global-history">
      <title>Viewing Job Configuration History</title>

      <mediaobject id="I_mediaobject7_d1e11359">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0730.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0730.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>If you click on a system-wide change (indicated by the “(system)”
    suffix in the list), Jenkins takes you to a screen that lists all of the
    versions of that file, and allows you to view the differences between the
    different versions (see <xref
    linkend="fig-hudson-jobconfig-config-history" />). The differences are
    displayed as <emphasis>diff</emphasis> files, which is not particularly
    readable in itself. However, for small changes, the readable XML format of
    most of the Jenkins configuration files makes this sufficient to
    understand what changes were made.</para>

    <figure float="0" id="fig-hudson-jobconfig-config-history">
      <title>Viewing differences in Job Configuration History</title>

      <mediaobject id="I_mediaobject7_d1e11374">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0731.pdf" format="PDF" />
        </imageobject>

        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0731.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The JobConfigHistory plugin is a powerful tool. However, at the time
    of writing, it does have its limits. As mentioned, the plugin only
    displays the differences in raw <filename moreinfo="none">diff</filename>
    format, and you can’t restore a previous version of a configuration file
    (those doing this out of context could be dangerous in some circumstances,
    particularly for system-wide configuration files). Nevertheless, it gives
    a very clear picture of the changes that have been made, both to your
    build jobs and to your system<indexterm class="endofrange"
        id="I_indexterm7_d1e11384" significance="normal"
        startref="ch07-jobconfig">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11386"
        significance="normal" startref="ch07-jobconfig2">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11388"
        significance="normal" startref="ch07-audit1">
        <primary></primary>
      </indexterm><indexterm class="endofrange" id="I_indexterm7_d1e11390"
        significance="normal" startref="ch07-audit2">
        <primary></primary>
      </indexterm> configuration.</para>
  </sect1>

  <sect1 id="sect-security-conclusion">
    <title>Conclusion</title>

    <para>In this chapter we have looked at a variety of ways to configure
    security in Jenkins. The Jenkins security model, with the two orthogonal
    concepts of Authentication and Authorization, is flexible and extensible.
    For a Jenkins installation of any size, you should try to integrate your
    Jenkins security strategy with the organization as a whole. This can go
    from simply integrating with your local LDAP repository to setting up or
    using a full-blown SSO solution such as Crown or CAS. In either case, it
    will make the system considerably easier to administrate in the long
    run.</para>
  </sect1>
</chapter>
