<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-notification">
  <title>Notification</title>
  <sect1 id="sect-notification-introduction">
    <title>Introduction</title>
    <para><indexterm id="I_indexterm8_d1e11406" significance="normal"><primary>notifications</primary></indexterm>Bien qu'il soit important que votre serveur de build construise votre
    logiciel, il est encore plus important que votre serveur de build signale aux personnes
    quand il ne peut le faire. Une part importante de la proposition de valeur de tout
    environnement d'intégration continue est d'améliorer le flux d'information
    sur la santé de votre projet, que ce soit des tests d'intégration échoués ou des régressions
    dans la suite des tests d'intégration, ou d'autres problèmes de qualité comme une
    baisse dans la couverture de code ou de métriques de qualité de code. Dans tous les cas, un serveur d'intégration continue
    doit permettre aux bonnes personnes de connaitre les nouveaux problèmes, et il doit pouvoir le
    faire rapidement. C'est ce que nous appelons Notification.</para>
    <para>Il y a deux principales catégories de stratégies de notification, que
    j'appelle<indexterm id="I_indexterm8_d1e11412" significance="normal"><primary>notifications</primary><secondary>passive (pull)</secondary></indexterm><indexterm id="I_indexterm8_d1e11417" significance="normal"><primary>notifications passives (pull)</primary></indexterm> <emphasis>passive</emphasis> et <emphasis><indexterm id="I_indexterm8_d1e11425" significance="normal"><primary>notifications actives (push)</primary></indexterm><indexterm id="I_indexterm8_d1e11428" significance="normal"><primary>notifications</primary><secondary>notifications actives (push)</secondary></indexterm>active</emphasis> (ou
    <emphasis>pull</emphasis>/<emphasis>push</emphasis>). Les notifications passives
    (pull) demandent aux développeurs de consulter consciemment le statut du dernier
    build, et comprennent les flux RSS, les radiateurs de build, et (dans une certaine mesure)
    les e-mails. Les notifications actives (push) vont alerter les développeurs de manière pro-active
    quand un build échoue, et comprennent des méthodes telles que des notificateurs intégrés au bureau, le chat,
    et SMS. Les deux approches ont leurs points positifs et négatifs. Les stratégies
    de notifications passives telles que les radiateurs de build peuvent diffuser une connaissance
    générale sur les builds échoués, et aider à installer une culture d'équipe où
    la correction des builds cassés revêt une haute priorité. Des formes plus directes de
    notification peuvent encourager activement les développeurs à prendre les choses en
    mains propres et corriger les builds cassés plus rapidement.</para>
  </sect1>
  <sect1 id="sect-notification-email">
    <title>Notification email</title>
    <para>La notification <indexterm class="startofrange" id="ch08-email1" significance="normal"><primary>notifications</primary><secondary>email</secondary></indexterm><indexterm class="startofrange" id="ch08-email2" significance="normal"><primary>notifications email</primary></indexterm>email est la forme la plus évidente et la plus commune de
    notification. L'email est bien connu, omniprésent, facile à utiliser et facile à
    configurer (voir <xref linkend="sect-configuration-email"/>). Donc, quand
    les équipes mettent en place leur premier environnement d'intégration continue, c'est généralement
    la stratégie de notification initiale qu'ils essaient.</para>
    <para>Vous activez les notifications email dans Jenkins en cochant la case Notification
    par email et en fournissant la liste d'adresses email des
    personnes qui doivent être notifiées (voir <xref linkend="fig-hudson-email-configuration"/>). Par défaut, Jenkins
    enverra un email pour <indexterm id="I_indexterm8_d1e11461" significance="normal"><primary>tâches de build</primary><secondary>échoués</secondary><tertiary>notifications pour</tertiary></indexterm><indexterm id="I_indexterm8_d1e11468" significance="normal"><primary>tâches de build</primary><secondary>build instable de</secondary><tertiary>notifications pour</tertiary></indexterm><indexterm id="I_indexterm8_d1e11475" significance="normal"><primary>builds instables</primary><secondary>notifications pour</secondary></indexterm>chaque build échoué ou instable. Rappelez-vous, il enverra aussi
    un nouvel email dès le premier build réussi après une série de builds échoués ou
    instables, pour indiquer que le problème a été résolu.</para>
    <figure float="0" id="fig-hudson-email-configuration">
      <title>Configurer les notifications email</title>
      <mediaobject id="I_mediaobject8_d1e11484">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0801.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0801.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Normallement, un build ne devrait pas prendre trop d'essais pour fonctionner à
    nouveau—les développeurs doivent diagnostiquer et reproduire le problème localement, le corriger
    localement, et alors seulement commiter leur correction dans le contrôle de version. Des erreurs répétées
    de build indiquent généralement soit une erreur de configuration chronique soit des mauvaises
    pratiques de développement (par exemple, des développeurs committant les modifications sans
    vérifier que cela fonctionne localement d'abord).</para>
    <para>Vous pouvez également choisir d'envoyer un email distinct à tous les développeurs qui ont
    des changements committés dans le build échoué. C'est généralement une bonne idée, car
    les développeurs qui ont committés des changements depuis le dernier build sont naturellement
    les personnes qui devraient être les plus intéressées par les résultats du build. Jenkins
    va récupérer l'adresse email de l'utilisateur à partir du domaine de sécurité courament
    configuré (voir <xref linkend="sect-security-realms"/>), ou en
    dérivant l'adresse email à partir de l'utilisateur du contrôle de version si vous l'avez configuré
    (voir <xref linkend="sect-configuration-email"/>).</para>
    <para>Si vous utilisez cette option, il peut être moins utile d'inclure l'équipe
    entière dans la liste de distribution principale. Vous inclurez de préférence les personnes
    qui seront intéressées par le suivi du résultat de chaque build (tels que
    les responsables techniques), et laisser Jenkins informer les développeurs <phrase role="keep-together">contributeurs</phrase> directement.</para>
    <para>Cela implique que les changements ont provoqué l'échec du build,
    ce qui est généralement (mais pas toujours) le cas. Cependant, si les builds sont
    peu fréquent (par exemple les builds nocturnes, ou si un build est en attente pendant
    plusieurs heures avant d'être abandonné), de nombreux changements peuvent être
    committés, et il est alors difficile de savoir lequel était en fait responsable
    de l'échec du build.</para>
    <para>Tous les builds ne sont pas semblables quand aux notifications email.
    Les développeurs ayant committés des changements sont particulièrement intéressés par les résultats
    des builds de tests unitaires et d'intégration (surtout ceux déclenchés par
    leurs propres changements), alors que les testeurs seront plus intéressés par
    jeter un coup d'oeil sur le statut des tests d'acceptance automatisés. Donc la
    confuguration des notifications email sera différente pour chaque tâche de build. En fait, il
    est utile de définir une stratégie de notification email. Un exemple d'une telle
    stratégie de notification email est donné comme suit:</para>
    <itemizedlist>
      <listitem>
        <para>Builds rapides (tests unitaires/d'intégration, s'exécutent en moins de 5
        minutes): les notifications sont envoyées aux chefs d'équipes et aux développeurs
        qui ont committés des changements.</para>
      </listitem>
      <listitem>
        <para>Builds lents (builds de tests d'acceptance, s'exécutent après les builds
        rapides): les notifications sont envoyées aux chefs d'équipes, aux testeurs et aux développeurs
        qui ont committés des changements.</para>
      </listitem>
      <listitem>
        <para>Builds noctures (métriques de qualité, tests de performance et autres; s'exécutent uniquement
        si les autres builds fonctionnent): tous les membres d'équipe—Ceux-ci fournissent une
        photo instantanée de la santé du projet avant la réunion quotidienne.</para>
      </listitem>
    </itemizedlist>
    <para>En fait, vous devriez considérer quelle stratégie de notification est
    appropriée pour chaque tâche de build au cas par cas, plutôt que
    l'application d'une politique globale pour toutes les tâches de build.</para>
  </sect1>
  <sect1 id="sect-notification-advanced-email">
    <title>Notification par email avancée</title>
    <para>Par défaut, les notifications par email Jenkins sont un outil plutôt brut.
    Les messages de notification sont toujours envoyés au même groupe de
    personnes. Vous ne pouvez pas envoyer des messages à différentes personnes en fonction de ce
    qui a mal tourné, ou mettre en œuvre toute sorte de politique d'escalade. Il serait
    utile, par exemple, d'être en mesure de notifier les développeurs qui ont committés
    les modifications la première fois qu'un build échoue, et envoyer un message différent au
    chef d'équipe ou à l'équipe entière si le build échoue une seconde fois</para>
    <para>Le<indexterm class="startofrange" id="ch08-ext1" significance="normal"><primary>plugins</primary><secondary>Email-ext</secondary></indexterm><indexterm class="startofrange" id="ch08-ext2" significance="normal"><primary>plugin Email-ext</primary></indexterm> plugin Email-ext vous permet de définir un stratégie de notification email plus
    fine. Ce plugin ajoute une case Editable Email Notification
    (voir <xref linkend="fig-hudson-email-ext-configuration"/>),
    qui remplace efficacement la notification par email standard de Jenkins. Ainsi,
    vous pouvez définir une liste de destinataire par défaut et affiner le contenu du
    message électronique, et aussi définir une stratégie de notification plus précise avec les
    différents messages et les listes de destinataires pour les différents événements. Notez qu'une
    fois que vous avez installé et configuré ce plugin pour votre tâche de build, vous
    pouvez désactiver la configuration normale de notification email.</para>
    <figure float="none" id="fig-hudson-email-ext-configuration">
      <title>Configurer les notifications email avancées</title>
      <mediaobject id="I_mediaobject8_d1e11539">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0802.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0802.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Ce plugin a deux fonctionnalités liées mais distinctes. Tout d'abord,
    il vous permet de personnaliser le message de notification par email. Vous pouvez choisir parmi
    un grand nombre de mots clés prédéfinis pour créer vos propres titre et corps du message
    personnalisés. Vous incluez un mot clé dans votre modèle de message en utilisant la
    notation familière dollar (e.g., <literal moreinfo="none">${BUILD_NUMBER}</literal> ou
    <literal moreinfo="none">$BUILD_NUMBER)</literal>. Certains mots clés acceptent des paramètres,
    que vous pouvez spécifier en utilisant le format <literal moreinfo="none">name=value</literal> (e.g.,
    <literal moreinfo="none">${BUILD_LOG, maxLines=100}</literal> ou <literal moreinfo="none">${ENV,
    var="PATH"}</literal>). Les mots clés les plus utiles sont:</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal moreinfo="none">${DEFAULT_SUBJECT}</literal>
        </term>
        <listitem>
          <para>Le sujet par défaut configuré dans la page de configuration Jenkins</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${DEFAULT_CONTENT}</literal>
        </term>
        <listitem>
          <para>Le corps du message par défaut configuré dans la page de configuration Jenkins</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${PROJECT_NAME}</literal>
        </term>
        <listitem>
          <para>Le nom du projet</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${BUILD_NUMBER}</literal>
        </term>
        <listitem>
          <para>Le numéro de build courant</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${BUILD_STATUS}</literal>
        </term>
        <listitem>
          <para>Le statut du build courant (échec, succès, etc.)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${CAUSE}</literal>
        </term>
        <listitem>
          <para>La cause du build</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${BUILD_URL}</literal>
        </term>
        <listitem>
          <para>Un lien vers la page correspondante du build sur Jenkins</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${FAILED_TESTS}</literal>
        </term>
        <listitem>
          <para>Information sur les tests unitaires échoués, si certains ont
          échoués</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${CHANGES}</literal>
        </term>
        <listitem>
          <para>Changements effectués depuis le dernier build</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal moreinfo="none">${CHANGES_SINCE_LAST_SUCCESS}</literal>
        </term>
        <listitem>
          <para>Tous les changements effectués depuis le dernier build avec succès</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>Vous pouvez obtenir une liste complète des mots clés disponibles, et les options pour
    ceux qui acceptent des paramètres, en cliquant sur l'icône d'aide en face de 
    Contexte Token Reference.</para>
    <para>Le bouton Avancé vous permet de définir une statégie de notification
    plus sophistiquée, basée sur le concept de triggers (voir <xref linkend="fig-email-notification-triggers"/>). Les triggers <indexterm id="I_indexterm8_d1e11638" significance="normal"><primary>tâches de build</primary><secondary>échoué</secondary><tertiary>notifications pour</tertiary></indexterm><indexterm id="I_indexterm8_d1e11645" significance="normal"><primary>tâche de build</primary><secondary>build instable de</secondary><tertiary>notifications pour</tertiary></indexterm><indexterm id="I_indexterm8_d1e11652" significance="normal"><primary>builds instables</primary><secondary>notifications pour</secondary></indexterm>déterminent quand les notifications email doivent être envoyées.
    Les triggers supportés sont les suivants:</para>
    <variablelist>
      <varlistentry>
        <term>Failure</term>
        <listitem>
          <para>Chaque fois qu'un build échoue.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Still Failing</term>
        <listitem>
          <para>Pour tous les builds en échec suivants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Unstable</term>
        <listitem>
          <para>Chaque fois qu'un build est instable.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Still Unstable</term>
        <listitem>
          <para>Pour tous les builds instables suivants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Success</term>
        <listitem>
          <para>Pour chaque build avec succès.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Fixed</term>
        <listitem>
          <para>Quand un build passe d'échec ou instable à
          succès.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Before Build</term>
        <listitem>
          <para>Avant chaque début de build.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <figure float="0" id="fig-email-notification-triggers">
      <title>Configurer les triggers de notification email</title>
      <mediaobject id="I_mediaobject8_d1e11704">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0803.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0803.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Vous pouvez configurer autant (ou aussi peu) de triggers que vous le souhaitez. La
    liste des destinataires et le modèle de message peuvent être personnalisés pour chaque
    trigger, par exemple en utilisant les triggers Still Failing et
    Still Unstable, vous pouvez mettre en place une stratégie de notification qui avertit que
    développeur ayant committé des changements la première fois qu'une tâche de build échoue, mais
    continue à informer le chef d'équipe si elle échoue une seconde fois. Vous pouvez
    choisir d'envoyer le message uniquement à des développeurs qui ont committés lors
    du build («Send to committers"), ou d'inclure également tous ceux qui ont
    committés depuis le dernier build avec succès. Cela assure que
    tous ceux qui peuvent être impliqués dans l'échec du build seront
    notifiés de manière <phrase role="keep-together">appropriée</phrase>.</para>
    <para>Vous pouvez également personnaliser le contenu du message en cliquant sur
    l'option More Configuration (comme indiqué pour le trigger Still Failing dans <xref linkend="fig-email-notification-triggers"/>). De cette façon, vous pouvez personnaliser
    des messages différents qui seront envoyés dans des cas distincts.</para>
    <para>Les triggers interagissent intelligement entre eux. Donc, si vous configurez à la fois le
    trigger Failing et le trigger Still Failing, seul le trigger Still Failing
    sera activé lors du second échec de build.</para>
    <para>Un exemple d'un tel message personnalisé est illustré dans <xref linkend="fig-hudson-email-notification-message"/>.</para>
    <figure float="0" id="fig-hudson-email-notification-message">
      <title>Message de notification personnalisé</title>
      <mediaobject id="I_mediaobject8_d1e11728">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0804.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0804.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Globalement, toutefois, comme stratégie de notification, l'email n'est pas sans
    défaut. Certains développeurs ferment leurs clients de messagerie par moment afin
    d'éviter d'être interrompu. Dans les grandes organisations, le nombre d'emails
    qui arrivent chaque jour peut être considérable, et les notifications d'échec de
    de build peuvent être cachées parmi une foule d'autres messages moins importants.
    Donc les échecs de build peuvent ne pas avoir toujours l'attention prioritaire qu'ils
    demandent dans un environnement d'intégration continue finement réglé. Dans les sections suivantes, nous
    nous pencherons sur certaines stratégies de notification autres qui peuvent être utilisées pour augmenter
    la sensibilisation des équipes sur les builds échoués et encourager les développeurs à les corriger<indexterm id="I_indexterm8_d1e11735" class="endofrange" startref="ch08-ext1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11737" class="endofrange" startref="ch08-ext2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11739" class="endofrange" startref="ch08-email1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11741" class="endofrange" startref="ch08-email2" significance="normal"><primary>notifications email</primary></indexterm> plus vite.</para>
  </sect1>
  <sect1 id="sect-notification-claiming">
    <title>Revendiquer des builds</title>
    <para>Quand<indexterm id="I_indexterm8_d1e11750" significance="normal"><primary>tâches de build</primary><secondary>échoués</secondary><tertiary>revendiquer</tertiary></indexterm><indexterm id="I_indexterm8_d1e11757" significance="normal"><primary>revendiquer des builds échoués</primary></indexterm><indexterm id="I_indexterm8_d1e11760" significance="normal"><primary>utilisateurs</primary><secondary>revendiquer des builds échoués</secondary></indexterm> un build échoue, il peut être utile de savoir que quelqu'un
    a repéré le problème et travaille dessus. Cela évite d'avoir plus d'un
    développeur gaspillant son temps à essayer de corriger le problème
    séparément.</para>
    <para>Le plugin Claim permet aux développeurs d'indiquer qu'ils se sont
    appropriés un build échoué, et qu'ils essaient de le corriger. Vous pouvez
    installer ce plugin de manière habituelle. Une fois installé, les développeurs peuvent revendiquer
    un build échoué comme le leur, et éventuellement ajouter un commentaire pour expliquer la
    cause suspectée du build et de ce que le développeur a l'intention de faire à son sujet.
    Le build revendiqué sera alors marqué comme tel dans l'histoire des builds, de sorte
    que les autres développeurs peuvent éviter de gaspiller inutilement du temps à
    investiguer.</para>
    <para>Pour activer la revendication pour une tâche de build, vous devez cocher la case “Allow
    broken build claiming” dans la page de configuration de la tâche de build. Alors,
    vous pourrez revendiquer un build cassé dans la page de détails
    du build (voir <xref linkend="fig-hudson-notification-claim"/>).
    Les builds revendiqués seront affichés avec une icône dans l'historique des builds indiquant qu'ils
    ont été revendiqués. Vous pouvez aussi effectuer une revendication de build “sticky,” afin que
    tous les échecs ultérieurs de build pour cette tâche seront aussi automatiquement
    revendiqués par ce développeur, jusqu'à ce que le problème soit résolu.</para>
    <figure float="0" id="fig-hudson-notification-claim">
      <title>Revendiquer un build échoué</title>
      <mediaobject id="I_mediaobject8_d1e11775">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0805.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0805.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-notification-rss">
    <title>Fils RSS</title>
    <para>Jenkins<indexterm class="startofrange" id="ch08-rss1" significance="normal"><primary>fils RSS, des résultats de build</primary></indexterm><indexterm class="startofrange" id="ch08-rss2" significance="normal"><primary>rapporter</primary><secondary>résultats de test</secondary><tertiary sortas="RSS feeds">dans les fils RSS</tertiary></indexterm><indexterm class="startofrange" id="ch08-rss3" significance="normal"><primary>notifications</primary><secondary>fils RSS</secondary></indexterm> fournit aussi des fils RSS pratiques pour les résultats de build,
    tant pour les résultats globaux sur l'ensemble de vos builds (ou juste les
    builds d'une vue particulière), ou les résultats d'un build spécifique. Les icônes
    de fils RSS sont disponibles au bas des tableaux de bord des builds (voir <xref linkend="fig-hudson-notification-rss-view"/>) et au bas du
    panneau de l'historique des builds pour les tâches de build individuel, vous donnant accès
    soit à l'ensemble des résultats des builds, ou simplement aux builds échoués.</para>
    <figure float="0" id="fig-hudson-notification-rss-view">
      <title>Fils RSS dans Jenkins</title>
      <mediaobject id="I_mediaobject8_d1e11806">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0806.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0806.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Les URLs des fils RSS sont simples, et fonctionnent pour toute page Jenkins
    affichant un ensemble de résultats de build. Vous devez juste rajouter <filename moreinfo="none">/rssAll</filename> pour obtenir le fil RSS de tous les
    résultats de build d'une page, ou <filename moreinfo="none">/rssFailed</filename> pour
    n'obtenir que les résultats des build échoués. et <filename moreinfo="none">/rssLatest</filename> vous fournira un fil RSS
    contenant uniquement les derniers résultats de build. Mais la façon la plus simple de récupérer
    l'URL est de cliquer simplement sur l'icône RSS dans la page Jenkins
    correspondante.</para>
    <para>Il y a plétore de lecteurs RSS, à la fois commerciaux et
    open source, disponible pour pratiquement toutes les plates-formes et périphériques; ce
    peut être un excellent moyen pour garder un œil sur les résultats de build. La plupart des navigateurs
    (Firefox en particulier) et des clients email supportent les fils RSS. Certains
    lecteurs ont des problèmes avec l'authentification, cependant, si votre instance
    Jenkins est sécurisée, vous devrez peut-être faire un peu de configuration supplémentaire pour
    voir les résultats de votre build.</para>
    <para>Les fils RSS peuvent être une source d'information sur l'ensemble des résultats
    de build, et vous permettent de voir l'état de vos builds en un coup d'œil, sans
    avoir à se connecter au serveur. Néanmoins, la plupart des lecteurs RSS sont par
    nature passifs-vous pouvez consulter l'état de vos builds, mais le
    lecteur RSS ne sera généralement pas en mesure de vous notifier si un nouveau build
    en échec<indexterm id="I_indexterm8_d1e11826" class="endofrange" startref="ch08-rss1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11828" class="endofrange" startref="ch08-rss2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11830" class="endofrange" startref="ch08-rss3" significance="normal"><primary/></indexterm> apparait.</para>
  </sect1>
  <sect1 id="sect-build-radiator">
    <title>Radars de build</title>
    <para>Le <indexterm class="startofrange" id="ch08-rad1" significance="normal"><primary>radars d'information</primary></indexterm><indexterm class="startofrange" id="ch08-rad2" significance="normal"><primary>radars de build</primary></indexterm><indexterm class="startofrange" id="ch08-rad3" significance="normal"><primary>notifications</primary><secondary>radars de build</secondary></indexterm><indexterm class="startofrange" id="ch08-rad4" significance="normal"><primary>radars, information</primary></indexterm>concept de radars d'information est utilisé couramment dans les cercles
    agiles. Selon le gourou agile Alistair Cockburn:</para>
    <blockquote>
      <para>Un radar d'information est un écran affiché dans un endroit que
      les gens peuvent voir quand ils travaillent ou passent. Il affiche des informations aux lecteurs
      dont ils se soucient sans avoir à poser à quelqu'un une question. Cela signifie plus de
      communication avec moins d'interruptions.</para>
    </blockquote>
    <para>Dans le contexte d'un serveur d'intégration continue, un radar d'information est un
    dispositif ou affichage éminent qui permet aux membres d'équipe et autres de facilement
    voir si l'un des builds est actuellement rompu. Il montre généralement soit un
    résumé de tous les résultats du build courant, soit seulement ceux en échec, et est
    affiché sur un grand écran plat situé bien en vue sur un mur. Cette
    sorte de radar d'information spécialisé est souvent connu comme un
    <emphasis>radar de build</emphasis>.</para>
    <para>Utilisés correctement, les radars de build sont parmi les stratégies de notification passive
    les plus efficaces. Ils sont très efficaces pour faire en sorte que
    tout le monde est conscient des build échoués. En outre, contrairement à certains des
    périphériques de retours extrèmes que nous discuterons plus tard dans ce chapitre, un radar
    de build peut contenir plusieurs tâches de build, y compris plusieurs tâches<phrase role="keep-together"> de build </phrase> échoués, et donc peut encore être efficacement
    utilisé dans un contexte d'équipes multiples.</para>
    <para>Il y a plusieurs solutions de radars de build pour Jenkins. Une des plus
    simples est d'utiliser le plugin Jenkins Radiator View. Ce plugin ajoute un nouveau
    type de tâche que vous pouvez créer: le (voir <xref linkend="fig-hudson-notification-radiator-job"/>).</para>
    <figure float="none" id="fig-hudson-notification-radiator-job">
      <title>Créer une vue radar</title>
      <mediaobject id="I_mediaobject8_d1e11873">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0807.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0807.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Configurer la vue radar est similaire à la configuration d'uneu
    vue liste plus conventionnelles-vous devez simplement spécifier les tâches de build que vous voulez
    inclure dans la vue, soit en les choisissant individuellement ou en utilisant une
    expression régulière.</para>
    <para>Comme la vue radar occupe tout l'écran, modifier
    ou supprimer une vue radar est un peu délicat. En fait, la seule façon d'ouvrir
    l'écran de configuration de la vue est d'ajouter
    <filename moreinfo="none">/configure</filename> à l'URL de la vue: si votre radar
    est nommé “build-<phrase role="keep-together">radiator</phrase>,” vous pouvez
    éditer la configuration de la vue en ouvrant
    <emphasis>http://my.hudson.server/view/build-radiator/configure</emphasis>.</para>
    <para>La vue radar (voir <xref linkend="fig-hudson-notification-radiator"/>) affiche une grande boite rouge ou
    jaune pour chaque build échoué ou instable, avec le nom de la tâche de build en
    lettres capitales, ainsi que d'autres détails. Vous pouvez configurer la
    la vue radar pour afficher les builds avec succès avec les builds en échec
    (ils seront affichés dans de petites boites vertes). Cependant, un bon radar
    ne devrait afficher que les builds échoués, à moins que tous les
    builds soient <indexterm id="I_indexterm8_d1e11895" class="endofrange" startref="ch08-rad1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11897" class="endofrange" startref="ch08-rad2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11899" class="endofrange" startref="ch08-rad3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e11901" class="endofrange" startref="ch08-rad4" significance="normal"><primary/></indexterm>avec succès.</para>
    <figure float="0" id="fig-hudson-notification-radiator">
      <title>Afficher une vue radar</title>
      <mediaobject id="I_mediaobject8_d1e11907">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0808.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0808.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-notification-instant-messaging">
    <title>Messagerie instantanée</title>
    <para>La <indexterm class="startofrange" id="ch08-im1" significance="normal"><primary>messagerie instantanée (IM)</primary></indexterm><indexterm class="startofrange" id="ch08-im2" significance="normal"><primary>notifications</primary><secondary>messagerie instantanée</secondary></indexterm><indexterm id="I_indexterm8_d1e11925" significance="normal"><primary>IM</primary><see>messagerie instantanée</see></indexterm>messagerie instantanée (ou IM) est aujourd'hui largement utilisée comme un moyen rapide,
    léger à la fois pour la communication professionnelle et personnelle.
    La messagerie instantanée est, par définition, instantanée, ce qui lui donne un avantage sur l'email
    quand il s'agit de notification rapide. Il est également «push» plutôt que
    «Pull», lorsque vous recevez un message, il apparaîtra sur votre écran et
    attire votre attention. Il est un peu plus difficile de l'ignorer ou de reporter
    qu'un simple message email.</para>
    <para>Jenkins offre un bon support pour les notifications via messagerie
    instantanée. Le<indexterm id="I_indexterm8_d1e11933" significance="normal"><primary>plugins</primary><secondary>messagerie instantanée</secondary></indexterm><indexterm id="I_indexterm8_d1e11938" significance="normal"><primary>plugin Instant Messaging</primary></indexterm> plugin Instant Messaging fournit un support générique pour
    communiquer avec Jenkins en utilisant la messagerie instantanée. Des <phrase role="keep-together">plugins </phrase>spécifiques peuvent ensuite être ajoutés
    pour les différents protocoles de messagerie instantanée telsq que Jabber et IRC.</para>
    <sect2>
      <title>Notification IM avec Jabber</title>
      <para>De<indexterm class="startofrange" id="ch08-jabber1" significance="normal"><primary>protocole Jabber</primary></indexterm><indexterm class="startofrange" id="ch08-jabber2" significance="normal"><primary>messagerie instantanée (IM)</primary><secondary>protocole Jabber pour</secondary></indexterm> nombreux serveurs de messagerie instantanée sont basés sur Jabber, un
      protocole de messagerie instantanée open source, basé sur XML. Jenkins fournit un bon
      support de la messagerie instantanée Jabber, de telle sorte que les développeurs peuvent recevoir
      des notifications en temps réel des échecs de builds. De plus, le plugin exécute
      un bot de messagerie instantanée qui écoute les canaux de chat et permet aux développeurs de lancer
      des commandes sur le serveur Jenkins via des messages chat.</para>
      <para>La mise en place du support de la messagerie instantanée dans Jenkins est simple. D'abord, vous
      devez installer à la fois le plugin Jenkins instant-messaging plugin et
      le<indexterm id="I_indexterm8_d1e11961" significance="normal"><primary>plugins</primary><secondary>Jabber Notifier</secondary></indexterm><indexterm id="I_indexterm8_d1e11966" significance="normal"><primary>plugin Jabber Notifier</primary></indexterm> plugin Jenkins Jabber notifier en utilisant la page standard du gestionnaire
      de plugins et en redémarrant Jenkins (voir <xref linkend="fig-email-notification-jabber-plugins"/>).</para>
      <figure float="0" id="fig-email-notification-jabber-plugins">
        <title>Installation des plugins Jenkins de messagerie instantanée</title>
        <mediaobject id="I_mediaobject8_d1e11975">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0809.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0809.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Une fois cela fait, vous devez configurer votre serveur de messagerie
      instantanée. N'importe quel serveur Jabber peut faire l'affaire. Vous pouvez utiliser un service public comme
      Google Chat, ou configurer votre propre serveur de messagerie instantanée localement (le
      serveur de chat open source Java <ulink url="http://www.igniterealtime.org/projects/openfire/index.jsp">OpenFire</ulink>
      est un bon choix). Utiliser un service public pour les communications internes
      peut être mal vu par les administrateurs système, et vous pouvez avoir
      des difficultés pour passer les firewalls de l'entreprise. Configurer votre propre
      service de chat interne, d'autre part, fait sens pour une
      équipe de développement ou organisation en général, car il fournit un autre
      canal de communication qui fonctionne bien pour des questions techniques ou
      commentaires entre les développeurs. Les exemples suivants utiliseront un
      serveur OpenFire local, mais l'approche générale fonctionne pour tout
      serveur-<phrase role="keep-together">Jabber</phrase> compatible.</para>
      <para>La première étape consiste à créer un compte dédié sur votre
      serveur Jabber pour Jenkins. Celui-ci est juste un compte de chat ordinaire, mais il
      doit être distinct de vos comptes développeurs (voir <xref linkend="fig-hudson-notification-im-users"/>).</para>
      <figure float="none" id="fig-hudson-notification-im-users">
        <title>Jenkins nécessite son propre compte de messagerie instantanée Jenkins</title>
        <mediaobject id="I_mediaobject8_d1e11995">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0810.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0810.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Une fois que vous avez configuré un compte de messagerie instantanée, vous devez configurer Jenkins
      pour envoyer des notifications de messagerie instantanée via ce compte. Aller à la page de configuration principale
      et cochez la case Enable Jabber Notification (voir <xref linkend="fig-hudson-notification-jabber-basic"/>). Ici, vous fournissez
      l'identifiant Jabber et mot de passe pour votre compte de messagerie instantanée. Jenkins peut habituellement
      retrouver le serveur de messagerie instantanée à partir de l'identifiant Jabber (s'il est différent, vous pouvez
      le remplacer dans les options avancées). Si vous utilisez les salons de chat en groupe
      (une autre stratégie de communication utile pour les équipes de développement), vous
      pouvez aussi fournir le nom de ces salons de discussion ici. De cette façon, Jenkins
      sera en mesure de traiter les instructions envoyées dans les salons de chat, ainsi
      que ceux reçus comme des messages directs.</para>
      <figure float="none" id="fig-hudson-notification-jabber-basic">
        <title>Mise en place de notifications de base Jabber dans Jenkins</title>
        <mediaobject id="I_mediaobject8_d1e12007">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0811.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0811.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>C'est tout ce dont vous avez besoin pour une configuration de base. Cependant, vous devrez peut-être
      donner quelques détails supplémentaires dans la section avancée pour des détails qui sont
      spécifiques à votre installation (voir <xref linkend="fig-hudson-notification-jabber-advanced"/>). Ici, vous pouvez
      spécifier le nom et port de votre serveur Jabber, si ils ne peuvent être
      dérivés de l'identifiant Jenkins Jabber. Vous pouvez également fournir un suffixe
      par défaut qui peut être appliqué à l'utilisateur Jenkins pour générer
      l'identifiant Jabber correspondant. Surtout, si vous avez sécurisé votre
      serveur Jenkins, vous devrez fournir un nom d'utilisateur Jenkins valide et
      mot de passe afin que le bot de messagerie instantanée puisse réagir correctement <phrase role="keep-together">à des instructions</phrase>.</para>
      <figure float="0" id="fig-hudson-notification-jabber-advanced">
        <title>Configuration avancée Jabber</title>
        <mediaobject id="I_mediaobject8_d1e12022">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0812.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0812.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Une fois que ceci est configuré, vous devez configurer une stratégie de notification Jabber
      pour chacun de vos tâches de build. Ouvrez la page de configuration de tâche de build
      et cliquez sur l'option Jabber Notification.</para>
      <para>D'abord, vous définissez une liste de destinaires pour les messages. Vous
      pouvez envoyer des messages à des individus (utilisez simplement l'identifiant Jabber correspondant,
      tel que <emphasis>joe@jabber.acme.com</emphasis>) ou à des salons de chat que vous avez
      crées. Pour les salons de chat, vous devez normalement ajouter une “*” au début
      de l'identifiant de salon de chat (e.g.,
      “*gameoflife@conference.jabber.acme.org”). Cependant, si l'identifiant de salon de chat
      contient “@conference.”, Jenkins comprendra que c'est un salon de chat
      et ajoutera automatiquement l'“*”. L'approche de salon de chat est plus
      souple, bien que vous devez avoir l'assurance que les développeurs sont connectés
      de manière permanente au salon de chat pour que cette stratégie soit véritablement
      efficace.</para>
      <para>Vous devez aussi définir une stratégie de notification. Celle-ci détermine
      lesquels de vos résultats de build provoqueront un envoi de message. Les options
      sont:</para>
      <variablelist>
        <varlistentry>
          <term>all</term>
          <listitem>
            <para>Envoie une notification pour chaque build.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>failure</term>
          <listitem>
            <para>Envoie une notification uniquement pour les builds échoués et instables.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>failure and fixed</term>
          <listitem>
            <para>Envoie une notification pour les builds échoués et instables, et
            le premier build avec succès suivant un build échoué ou instable.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>change</term>
          <listitem>
            <para>Envoie une notification quand le résultat de build change.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Si vous utilisez les salons de chat, vous pouvez demander à Jenkins d'envoyer
      une notification au salon de chat quand un build démarre (en utilisant l'option
      “Notify on build starts”).</para>
      <para>Pour les builds démarrés par les systèmes de gestion de version, Jenkins peut aussi notifier des destinataires
      additionnels, en utilisant le suffixe par défaut décrit précédemment pour générer
      l'identifiant Jabber à partir de l'utilisateur du système de gestion de version. Vous pouvez choisir de notifier:</para>
      <variablelist>
        <varlistentry>
          <term>SCM committers</term>
          <listitem>
            <para>Tous les utilisateurs qui ont committés des changements pour le build courant,
            et donc soupçonnés d'avoir cassé le build.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SCM culprits</term>
          <listitem>
            <para>Tous les utilisateurs qui ont committés des changements depuis le dernier build avec succès.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SCM fixers</term>
          <listitem>
            <para>Tous les utilisateurs qui ont committés des changements du premier build avec succès après un build échoué ou instable.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Upstream committers</term>
          <listitem>
            <para>Envoie une notification aux utilisateurs qui ont committés des changements pour les builds en amont ainsi que ceux de build courant. Cela fonctionne automatiquement pour les tâches de build Maven, mais
            nécessite l'activation de l'empreinte digitale (fingerprinting) pour les autres types de build.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Au moment de l'écriture, vous ne pouvez avoir qu'une stratégie
      de notification, de sorte que certaines des options avancées, que nous avons vu dans <xref linkend="sect-notification-advanced-email"/> ne sont pas encore possibles avec
      la messagerie instantanée.</para>
      <para>Les développeurs seront notifiés via leur client de messagerie instantanée favori (voir
      <xref linkend="fig-hudson-notification-im-messages"/>). Les développeurs peuvent
      aussi intéragir avec le serveur de build via une session de chat, en utilisant un ensemble de
      commandes simples. Quelques exemples de commandes les plus utiles sont décrites:</para>
      <itemizedlist>
        <listitem>
          <para><literal moreinfo="none">!build game-of-life</literal>—Démarre le
          build <emphasis>game-of-life</emphasis> immédiatement.</para>
        </listitem>
        <listitem>
          <para><literal moreinfo="none">!build game-of-life 15m</literal>—Démarre le
          build <emphasis>game-of-life</emphasis> dans 15 minutes.</para>
        </listitem>
        <listitem>
          <para><literal moreinfo="none">!comment game-of-life 207 'oops'</literal>—Ajouter
          une description à un certain build.</para>
        </listitem>
        <listitem>
          <para><literal moreinfo="none">!status game-of-life</literal>—Affiche le status
          du dernier build de cette tâche de build.</para>
        </listitem>
        <listitem>
          <para><literal moreinfo="none">!testresult game-of-life</literal>—Affiche le résultat complet
          du dernier build.</para>
        </listitem>
        <listitem>
          <para><literal moreinfo="none">!health game-of-life</literal>—Affiche un résumé plus
          complet de l'état de santé du dernier build.</para>
        </listitem>
      </itemizedlist>
      <para>Vous pouvez obtenir une liste complete des commandes en envoyant le message
      <literal moreinfo="none">!help</literal> à l'utilisateur<indexterm id="I_indexterm8_d1e12141" class="endofrange" startref="ch08-jabber1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12143" class="endofrange" startref="ch08-jabber2" significance="normal"><primary/></indexterm> Jenkins.</para>
      <figure float="none" id="fig-hudson-notification-im-messages">
        <title>Messages Jenkins Jabber en action</title>
        <mediaobject id="I_mediaobject8_d1e12150">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0813.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0813.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Notification IM Notification avec IRC</title>
      <para>Une<indexterm class="startofrange" id="ch08-irc1" significance="normal"><primary>IRC (Internet Relay Chat)</primary></indexterm><indexterm class="startofrange" id="ch08-irc3" significance="normal"><primary>messagerie instantanée (IM)</primary><secondary>IRC pour</secondary></indexterm> autre forme de messagerie instantanée Internet populaire est
      Internet Relay Chat, ou IRC. IRC est traditionnellement centré sur les groupes
      de discussions (même si la messagerie directe est également supportée), et est une
      forme très populaire de la communication pour les développeurs, en particulier dans le monde
      open source.</para>
      <para>Le<indexterm id="I_indexterm8_d1e12171" significance="normal"><primary>plugins</primary><secondary>IRC</secondary></indexterm><indexterm id="I_indexterm8_d1e12176" significance="normal"><primary>plugin IRC</primary></indexterm> plugin Jenkins IRC vous permet d'interagir avec votre serveur Jenkins
      server via un canal IRC, à la fois pour recevoir des messages de notification et pour
      envoyer des commandes au serveur. Comme le plugin Jabber, vous devez
      installer le plugin Instant Messaging pour qu'il<indexterm id="I_indexterm8_d1e12180" class="endofrange" startref="ch08-im1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12182" class="endofrange" startref="ch08-im2" significance="normal"><primary/></indexterm> fonctionne.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-notification-irc">
    <title>IRC Notification</title>
    <para>
      <emphasis>Contributed by Juven Xu</emphasis>
    </para>
    <para>Internet Relay Chat (or IRC) is a popular form of instant messaging,
    primarily designed for group communication in channels. For example,
    Jenkins has <ulink url="http://jenkins-ci.org/content/chat">a channel set
    up on Freenode</ulink> so users and developers can discuss Jenkins related
    topics. You will see many users ask questions and most of the time more
    experienced users will be prompt in providing useful answers.</para>
    <para>Just like instant messaging through Jabber, you can configure
    Jenkins to “push” notification through IRC. Some IRC clients such as
    <ulink url="http://xchat.org/">xchat</ulink> support alert configuration
    so that when the message arrives, it can blink the tray icon or make a
    beep sound. To set up IRC support on Jenkins, first you need to
    install<indexterm id="I_indexterm8_d1e12201" significance="normal"><primary>plugins</primary><secondary>IRC</secondary></indexterm><indexterm id="I_indexterm8_d1e12206" significance="normal"><primary>IRC plugin</primary></indexterm> the <ulink url="http://wiki.jenkins-ci.org/display/JENKINS/IRC+Plugin">IRC
    plugin</ulink> and the <ulink url="http://wiki.jenkins-ci.org/display/JENKINS/Instant+Messaging+Plugin">Instance
    Messaging plugin</ulink>. Simply go to the standard plugin manager, tick
    their checkbox and then restart Jenkins (see <xref linkend="hudson-notification-irc-plugins-install"/>).</para>
    <figure float="none" id="hudson-notification-irc-plugins-install">
      <title>Install the Jenkins IRC plugins</title>
      <mediaobject id="I_mediaobject8_d1e12221">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0814.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0814.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Once it’s done, you need to enable the IRC plugin and configure it
    to fit into your own environment. Basically, this involves providing the
    hostname and port of the IRC server you are using, a dedicated IRC
    channel, and a nickname for the IRC plugin. It’s a good practice to set up
    a dedicated channel for CI notification, so as people chat in other
    channels, they won’t be disturbed. You may also want to configure extra
    details in the Advanced sector. All of these are available in the
    Configure System page (see <xref linkend="hudson-notification-irc-advanced"/>).</para>
    <figure float="0" id="hudson-notification-irc-advanced">
      <title>Advanced IRC notification configuration</title>
      <mediaobject id="I_mediaobject8_d1e12233">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0815.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0815.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>In addition to the hostname, port, channel, and nickname we
    mentioned earlier, you can also configure IRC server password or NIckServ
    password if your environment requires them. Command prefixes need to be
    configured if you want to interact with the server via IRC messages. This
    is basically the same as using Jabber (see <xref linkend="sect-notification-instant-messaging"/>). Finally, you may want
    to let the IRC plugin use the <literal role="keep-together" moreinfo="none">/notice</literal> command instead of the default
    <literal moreinfo="none">/msg</literal> command. <literal moreinfo="none">/notice</literal> is the same as
    <literal moreinfo="none">/msg</literal> except that the message will be contained in
    dashes, which will prevent a response from most robots.</para>
    <para>Once the global configuration is ready, you can enable IRC
    notification for each build job and set up a notification strategy. Open
    the build job configuration page, go to the Post-build Actions section and
    click on the IRC Notification option. If you want to set up a notification
    strategy rather than using the default one, click the “Advanced...” button
    (see <xref linkend="hudson-notification-irc-job"/>).</para>
    <figure float="0" id="hudson-notification-irc-job">
      <title>Advanced build job IRC notification configuration</title>
      <mediaobject id="I_mediaobject8_d1e12261">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0816.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0816.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Notification strategies (when to send notification messages, and to
    whom) are discussed in <xref linkend="sect-notification-instant-messaging"/>. Both the Jabber plugin
    and the IRC plugin depend on the Instant Messaging Plugin, so they share a
    number of common core features. Some options are specific to IRC plugin,
    however. Here, for example, you can define a customized channel if you
    don’t like the global default. Finally, for a channel notification
    message, you can choose what information to send in the notification
    messages. Your options are build summary, SCM changes, and failed
    tests.</para>
    <para>Once you save the configuration, you should be good to go. Based on
    what you’ve configured, this plugin will join the appropriate IRC channels
    and send notification messages for build jobs.</para>
    <para>In <xref linkend="hudson-notification-irc-xchat"/>, for example,
    the IRC plugin joins the #ci-book channel on freenode. First, user juven
    committed some change with scm message “feature x added” and IRC plugin
    let everyone on the channel know that the build was successful. Then juven
    committed another change for feature y, but this time the build failed.
    John noticed it and fixed the build error. The IRC plugin now happily said
    “Yippie, build fixed!” Note that some lines in this screen are
    highlighted, this is because I logged in as user “juven” and I configured
    my XChat IRC client to highlight messages containing<indexterm id="I_indexterm8_d1e12277" class="endofrange" startref="ch08-irc1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12279" class="endofrange" startref="ch08-irc3" significance="normal"><primary/></indexterm> my nickname.</para>
    <figure float="none" id="hudson-notification-irc-xchat">
      <title>IRC notification messages in action</title>
      <mediaobject id="I_mediaobject8_d1e12285">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0817.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0817.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-notification-desktop">
    <title>Desktop Notifiers</title>
    <para>The <indexterm class="startofrange" id="ch08-desktop1" significance="normal"><primary>desktop notifiers</primary></indexterm><indexterm class="startofrange" id="ch08-desktop2" significance="normal"><primary>notifications</primary><secondary>desktop notifiers</secondary></indexterm>best push notification strategies integrate smoothly into
    the developer’s daily work environment. This is why instant messaging can
    be an effective strategy if developers are already in the habit of using
    instant messaging for other work-related activities.</para>
    <para>Desktop notification tools also fall into this category. Desktop
    notification tools are tools that run locally on the developer machine,
    either as an independent application or widget, or as part of the
    developer’s IDE.</para>
    <para>If you are using <indexterm id="I_indexterm8_d1e12308" significance="normal"><primary>Eclipse plugin</primary></indexterm><indexterm id="I_indexterm8_d1e12311" significance="normal"><primary>plugins</primary><secondary>Eclipse</secondary></indexterm><indexterm id="I_indexterm8_d1e12316" significance="normal"><primary>Eclipse</primary><secondary>desktop notifiers with</secondary></indexterm>Eclipse, the <ulink url="http://code.google.com/p/hudson-eclipse/">Jenkins Eclipse
    plugin</ulink> displays a health icon at the bottom of the Eclipse window.
    If you click on the icon, you can see a detailed view of the Jenkins
    projects (see <xref linkend="fig-hudson-notification-eclipse"/>). In the
    Eclipse preferences, you provide the URL of your Jenkins server along with
    any required authentication details. The configuration is fairly simple,
    however, and you can only connect to a single Jenkins instance for a given
    Eclipse workspace.</para>
    <figure float="none" id="fig-hudson-notification-eclipse">
      <title>Jenkins notifications in Eclipse</title>
      <mediaobject id="I_mediaobject8_d1e12330">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0818.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0818.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
        If you are using
        NetBeans IDE<indexterm><primary>NetBeans</primary></indexterm>,
        you already have integration with Hudson and Jenkins.
        Open the <guilabel>Services</guilabel> window and add servers under <guilabel>Hudson Builders</guilabel>.
        (If you open a Maven project whose <code>ciManagement</code> specifies
        <code>hudson</code> or <code>jenkins</code> as the <code>system</code>, the corresponding server
        will be registered automatically.)
        This integration has various features beyond build notifications in the status line,
        such as <guilabel>Test Results</guilabel> window integration, build log and change log display, workspace
        browsing, and a job setup wizard.
    </para>
    <figure id="fig-hudson-netbeans">
        <title>Jenkins connection in NetBeans</title>
        <mediaobject>
            <imageobject role="web">
                <imagedata fileref="figs/web/hudson-netbeans.png" format="PNG"/>
            </imageobject>
        </mediaobject>
    </figure>
    <para>The <indexterm class="startofrange" id="ch08-tray1" significance="normal"><primary>Tray Application plugin</primary></indexterm><indexterm class="startofrange" id="ch08-tray2" significance="normal"><primary>plugins</primary><secondary>Tray Application plugin</secondary></indexterm>Jenkins Tray Application plugin (see <xref linkend="fig-hudson-tray-launch"/>) lets you start up a small Java client
    application using Java Web Start from your Jenkins dashboard.</para>
    <figure float="0" id="fig-hudson-tray-launch">
      <title>Launching the Jenkins Tray Application</title>
      <mediaobject id="I_mediaobject8_d1e12351">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0819.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0819.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This application sits in your system tray, lets you view the current
    state of your builds at a glance, and also brings up pop-up windows
    notifying you of new build failures (see <xref linkend="fig-hudson-tray"/>).</para>
    <figure float="0" id="fig-hudson-tray">
      <title>Running the Jenkins Tray Application</title>
      <mediaobject id="I_mediaobject8_d1e12363">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0820.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0820.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This is certainly a useful application, but it suffers from a few
    limitations. At the time of writing, the Jenkins Tray Application did not
    support accessing secured Jenkins servers. In addition, the developer
    needs to remember to restart it each morning. This may seem a minor issue,
    but in general, when it comes to notification strategies, the less you
    have to ask of your developers the better.</para>
    <para>One of the best options for Jenkins desktop notification is to use a
    service like Notifo (see <xref linkend="sect-notifo"/>), which provides
    both desktop and mobile clients. We will see how this works in detail in
    the<indexterm id="I_indexterm8_d1e12374" class="endofrange" startref="ch08-tray1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12376" class="endofrange" startref="ch08-tray2" significance="normal"><primary/></indexterm> next section.</para>
  </sect1>
  <sect1 id="sect-notifo">
    <title>Notification via Notifo</title>
    <para><ulink url="http://www.notifo.com">Notifo</ulink> is <indexterm class="startofrange" id="ch08-notifo" significance="normal"><primary>Notifo</primary></indexterm><indexterm class="startofrange" id="ch08-phone" significance="normal"><primary>notifications</primary><secondary sortas="smartphones">to smartphones</secondary></indexterm><indexterm class="startofrange" id="ch08-phone2" significance="normal"><primary>smartphones, notifications to</primary></indexterm>a fast and economical service to send real-time
    notifications to your smartphone or desktop. In the context of a Jenkins
    server, you can use it to set up free or low-cost real-time notification
    for your Jenkins build results. Individual accounts (which you need to be
    able to receive notifications) are free. You need to set up a service
    account to send notification messages from your Jenkins server. This is
    where Notifo earn their keep, though at the time of writing a service
    account can send up to 10,000 notifications per month free of charge,
    which is usually plenty for an average Jenkins instance. One of the strong
    points of a real-time notification service like Notifo is that
    notification messages can be sent to the same users on different devices:
    smartphones and desk top clients, in particular.</para>
    <para>Setting up Jenkins notification with Notifo is relatively
    straightforward. First, go to the Notifio website and sign up to create an
    account. Each team member who wants to be notified will need their own
    Notifo account. They will also need to install the Notifo client on each
    device on which they need to receive notification messages. At the time of
    writing, Notifo clients were available for Windows and Mac OS X desktops,
    and iPhones, with support for Linux and other smartphones on the
    way.</para>
    <para>Next, you need to set up a Notifo service account for your Jenkins
    server. You can do this with one of your developer accounts, or create a
    new account for the purpose. Log on to the Notifo website, and go to the
    My Services menu. Here, click on Create Service (see <xref linkend="fig-hudson-notification-notifo-service"/>), and fill in the
    fields. The most important is the Service Username, which needs to be
    unique. You can also specify the Site URL and the Default Notification URL
    to point to your Jenkins instance, so that users can open the Jenkins
    console by clicking on the notification message.</para>
    <figure float="0" id="fig-hudson-notification-notifo-service">
      <title>Creating a Notifo service for your Jenkins instance</title>
      <mediaobject id="I_mediaobject8_d1e12407">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0821.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0821.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>To receive notification messages from the Jenkins server, developers
    now need to subscribe to this service. You can then add developers to the
    list of subscribers in the service Subscribers page, by sending them
    subscription requests. Once the service has been created and the users are
    all subscribed, you can configure your project to send out Notifo
    notifications (see <xref linkend="fig-hudson-notification-notifo-config"/>). You need the provide
    the API username of the Jenkins service you set up, as well as the API
    Secret, both of which you can see in the Notifo Service Dashboard.</para>
    <figure float="0" id="fig-hudson-notification-notifo-config">
      <title>Configuring Notifo notifications in your Jenkins build
      job</title>
      <mediaobject id="I_mediaobject8_d1e12419">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0822.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0822.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Once this is set up, Jenkins will send almost real-time
    notifications of build failures to any Notifo clients the developer is
    running, whether it is on a desktop or on a mobile device (see <xref linkend="fig-hudson-notifo-iphone"/>).</para>
    <figure float="0" id="fig-hudson-notifo-iphone">
      <title>Receiving a Notifo notification on an iPhone</title>
      <mediaobject id="I_mediaobject8_d1e12431">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0823.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0823.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>At the time of writing, sophisticated notification strategies are
    not supported—you just provide a list of Notifo usernames who need to be
    notified. Nevertheless, this remains a very effective notification tool
    for frontline <indexterm id="I_indexterm8_d1e12438" class="endofrange" startref="ch08-desktop1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12440" class="endofrange" startref="ch08-desktop2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12442" class="endofrange" startref="ch08-notifo" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12444" class="endofrange" startref="ch08-phone2" significance="normal"><primary/></indexterm>developers.</para>
  </sect1>
  <sect1 id="sect-notification-mobile">
    <title>Mobile Notification</title>
    <para>If your <indexterm id="I_indexterm8_d1e12453" significance="normal"><primary>notifications</primary><secondary sortas="mobile devices">to mobile devices</secondary></indexterm><indexterm id="I_indexterm8_d1e12458" significance="normal"><primary>mobile devices, notifications to</primary></indexterm>Jenkins server is visible on the Internet (even if you have
    set up authentication on your Jenkins server), you can also monitor your
    builds via your iPhone or Android mobile device. The free Hudson Helper
    application (see <xref linkend="fig-hudson-notification-iphone"/>), for
    example, lets you list your current build jobs (either all of the build
    jobs on the server, or only the build jobs in a particular view). You can
    also view the details of a particular build job, including the current
    status, failing tests and build time, and even start and stop
    builds.</para>
    <figure float="0" id="fig-hudson-notification-iphone">
      <title>Using the Hudson Helper iPhone app</title>
      <mediaobject id="I_mediaobject8_d1e12467">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0824.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0824.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>For Android phones, you can also install the Hudson Mood widget will
    also provide updates and alerts about build failures.</para>
    <para>Note that these mobile applications rely on a data connection, so
    while they will typically work well locally, you should not rely on them
    if the developer in question is out of the <indexterm id="I_indexterm8_d1e12476" class="endofrange" startref="ch08-phone" significance="normal"><primary/></indexterm>country.</para>
  </sect1>
  <sect1 id="sect-notification-sms">
    <title>SMS Notification</title>
    <para>These <indexterm class="startofrange" id="ch08-sms1" significance="normal"><primary>notifications</primary><secondary>SMS messages</secondary></indexterm><indexterm class="startofrange" id="ch08-sms2" significance="normal"><primary>SMS messages, notifications using</primary></indexterm>days, SMS is another ubiquitous communication channel which
    has the added advantage of reaching people even when they are out of the
    office. For a build engineer, this can be a great way to monitor critical
    builds, even when developers or team leads are away from their
    desks.</para>
    <para><ulink url="http://en.wikipedia.org/wiki/SMS_gateway">SMS
    gateways</ulink> are services that let you <phrase role="keep-together">send</phrase> SMS notifications via
    specially-formatted email addresses (for example,
    <emphasis>123456789@mysmsgateway.com</emphasis> might send an SMS message
    to 123456789). Many mobile vendors provide this service, as do many
    third-party service providers. There is no built-in support for SMS
    Gateways in Jenkins, but the basic functionality of these gateways makes
    integration relatively easy: you simply add the special email addresses to
    the normal notification list. Alternatively, using the advanced email
    configuration, you can set up a separate rule containing only the SMS
    email addresses (see <xref linkend="fig-hudson-sms-notification-config"/>). Doing this makes it
    easier to fine-tune the message contents to suit an SMS message
    format.</para>
    <figure float="0" id="fig-hudson-sms-notification-config">
      <title>Sending SMS notifications via an SMS Gateway Service</title>
      <mediaobject id="I_mediaobject8_d1e12508">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0825.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0825.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Once you have done this, your users will receive prompt notification
    of build results in the form of SMS messages (see <xref linkend="fig-hudson-sms-notification"/>). The main disadvantage of this
    approach is arguably that it is not free, and requires the use of a
    third-party commercial service. That said, it is really the only
    notification technique capable of reaching developers when they are out of
    Internet range or who do not have a data-enabled smartphone. Indeed, this
    technique is popular among system administrators, and can be very useful
    for certain critical <indexterm id="I_indexterm8_d1e12517" class="endofrange" startref="ch08-sms1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm8_d1e12519" class="endofrange" startref="ch08-sms2" significance="normal"><primary/></indexterm>build jobs.</para>
    <figure float="0" id="fig-hudson-sms-notification">
      <title>Receiving notification via SMS</title>
      <mediaobject id="I_mediaobject8_d1e12525">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0826.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0826.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-notification-noise">
    <title>Making Noise</title>
    <para>If you <indexterm id="I_indexterm8_d1e12535" significance="normal"><primary>notifications</primary><secondary>sounds in</secondary></indexterm><indexterm id="I_indexterm8_d1e12540" significance="normal"><primary>sounds, in notifications</primary></indexterm>have your Jenkins instance running on a machine that is
    physically located in proximity to the development team, you may also want
    to add sounds into the mix of notification strategies. This can be an
    effective strategy for small co-located teams, though it becomes trickier
    if the build server is set up on a virtual machine or elsewhere in the
    building.</para>
    <para>There are two ways to integrate audio feedback into your build
    process in Jenkins: the Jenkins Sounds plugin and the Jenkins Speaks
    plugin. Both can be installed via the Plugin Manager page in the usual
    manner.</para>
    <para>The<indexterm id="I_indexterm8_d1e12548" significance="normal"><primary>plugins</primary><secondary>Sounds</secondary></indexterm><indexterm id="I_indexterm8_d1e12553" significance="normal"><primary>Sounds plugin</primary></indexterm> Jenkins Sounds plugin is the most flexible of the two. It
    allows you to build a detailed notification strategy based on the latest
    build result and also (optionally) on the previous build result as well
    (see <xref linkend="fig-hudson-sounds"/>). For example, you can configure
    Jenkins to play one sound the first time a build fails, a different sound
    if the build fails a second time, and yet another sound when the build is
    fixed.</para>
    <figure float="0" id="fig-hudson-sounds">
      <title>Configuring Jenkins Sounds rules in a build job</title>
      <mediaobject id="I_mediaobject8_d1e12562">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0827.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0827.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>To set this up, you need to tick the Jenkins Sounds checkbox in the
    Post-build Actions section of your build job configuration page. You can
    add as many sound configuration rules as you like. Adding a rule is simple
    enough. First, you need to choose which build result will trigger the
    sound. You also need to specify the previous build results for which this
    rule is applicable: Not Build (NB), Aborted (Ab), Failed (Fa),
    Unsuccessful (Un) or Successful (Su).</para>
    <para>The Jenkins Sounds plugin proposes a large list of pre-defined
    sounds, which usually offer plenty of choice for even the most discerning
    build administrator, but you can add your own to the list if you really
    want to. Sounds are stored as a ZIP or JAR file containing sound files in
    a flat directory structure (i.e., no subdirectories). The list of sounds
    proposed by the plugin is simply the list of filenames, minus the
    extensions. The plugin supports AIFF, AU, and WAV files.</para>
    <para>In the System Configuration page, you can give Jenkins a new sound
    archive file, using the <filename moreinfo="none">http://</filename>
    notation if your sound archive file is available on a local web server, or
    the <filename moreinfo="none">file://</filename> notation if it is
    available locally (see <xref linkend="fig-hudson-sounds-config"/>). Once
    you have saved the configuration, you can test the sounds in your sound
    archive via the Test Sound button in the Advanced section.</para>
    <figure float="none" id="fig-hudson-sounds-config">
      <title>Configuring Jenkins Sounds</title>
      <mediaobject id="I_mediaobject8_d1e12584">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0828.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0828.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The Jenkins Sounds plugin is an excellent choice if you want to
    complement your more conventional notification techniques. Short,
    recognizable sounds are a great way to grab a developer’s attention and
    let the team know that something needs fixing. They will then be a bit
    more receptive when the more detailed notifications follow.</para>
    <para>Another <indexterm id="I_indexterm8_d1e12593" significance="normal"><primary>notifications</primary><secondary>spoken</secondary></indexterm><indexterm id="I_indexterm8_d1e12598" significance="normal"><primary>Speaks plugin</primary></indexterm><indexterm id="I_indexterm8_d1e12601" significance="normal"><primary>plugins</primary><secondary>Speaks</secondary></indexterm>option is the Jenkins Speaks plugin. With this plugin, you
    can get Jenkins to broadcast a customized announcement (in a very robotic
    voice) when your build fails (see <xref linkend="fig-hudson-speaks"/>).
    You can configure the exact message using Jelly. Jelly is an XML-based
    scripting language used widely in the lower levels of Jenkins.</para>
    <figure float="none" id="fig-hudson-speaks">
      <title>Configuring Jenkins Speaks</title>
      <mediaobject id="I_mediaobject8_d1e12613">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0829.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0829.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The advantage of this approach lies in it’s precision: since you can
    use Jenkins variables in the Jelly script, you can get Jenkins to say just
    about anything you want about the state of the build. Here is a simple
    example:</para>
    <programlisting id="I_programlisting8_d1e12620" format="linespecific">&lt;j:choose&gt;
  &lt;j:when test="${build.result!='SUCCESS'}"&gt;
    Your attention please. Project ${build.project.name} has failed
    &lt;j:if test="${build.project.lastBuild.result!='SUCCESS'}"&gt; again&lt;/j:if&gt;
  &lt;/j:when&gt;
  &lt;j:otherwise&gt;&lt;!-- Say nothing --&gt;&lt;/j:otherwise&gt;
&lt;/j:choose&gt;</programlisting>
    <para>If you leave this field blank, the plugin will use a default
    template that you can configure in the System Configuration page. In fact,
    it is usually a good idea to do this, and only to use a project-specific
    script if you really need to.</para>
    <para>The disadvantage is that the robotic voice can make it a little hard
    to understand. For this reason, it is a good idea to start your
    announcement with a generic phrase such as “Your attention please,” or to
    combine it with the Jenkins Sounds plugin, so that you have developers’
    attention before the actual message is broadcast. Using hyphens in your
    project names (e.g., <emphasis>game-of-life</emphasis> rather then
    <emphasis>gameoflife</emphasis>) will also help the plugin know how to
    pronounce your project names.</para>
    <para>Both these approaches are useful for small teams, but can be limited
    for larger ones, when the server is not physically located in close
    proximity to the development team. Future versions may support playing
    sounds on a separate machine, but at the time of writing this feature was
    not available.</para>
  </sect1>
  <sect1 id="sect-notification-extreme">
    <title>Extreme Feedback Devices</title>
    <para>Many more imaginative notification tools and strategies exist, and
    there is plenty of scope for improvisation if you are willing to improvise
    with electronics a little. This includes devices such as Ambient Orbs,
    Lava Lamps, traffic lights, or other more exotic USB-controlled devices.
    The Build Radiator (see <xref linkend="sect-build-radiator"/>) also falls
    into this category if you project it onto a big enough screen.</para>
    <para>One <indexterm id="I_indexterm8_d1e12643" significance="normal"><primary>notifications</primary><secondary sortas="Nabaztag">using Nabaztag</secondary></indexterm>device that integrates very nicely with Jenkins is the
    Nabaztag. The Nabaztag (see <xref linkend="fig-hudson-nabaztag"/>) is a
    popular WiFi-enabled robotic rabbit that can flash colored lights, play
    music, or even speak. Once advantage of the Nabaztag is that, since it
    works via WiFi, it is not constrained to be located near the build server,
    and so will work even if your Jenkins instance is in a server room or on a
    virtual machine. As far as extreme feedback devices go, these little
    fellows are hard to beat.</para>
    <figure float="0" id="fig-hudson-nabaztag">
      <title>A Nabaztag</title>
      <mediaobject id="I_mediaobject8_d1e12654">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0830.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0830.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>And <indexterm id="I_indexterm8_d1e12661" significance="normal"><primary>Nabaztag plugin</primary></indexterm><indexterm id="I_indexterm8_d1e12664" significance="normal"><primary>plugins</primary><secondary>Nabaztag</secondary></indexterm>best of all, there is a Jenkins plugin available for the
    Nabaztag. Once you have installed the Nabaztag plugin and restarted
    Jenkins, it is easy to configure. In Jenkins’s main Configuration page, go
    to the Global Nabaztag Settings section and enter the serial number and
    secret token for your electronic bunny (see <xref linkend="fig-hudson-nabaztag-config"/>). You can also provide some
    default information about how your build bunny should react to changes in
    build status (should it report on starting and successful builds, for
    example), what voice it should use, and what message it should say when a
    build fails, succeeds, is fixed, or fails again. Then, to activate
    Nabaztag notification for a particular build job, you need to tick the
    Nabaztag Publisher option in your build job configuration. <phrase role="keep-together">Depending</phrase> on your environment, for example,
    you may or may not want all of your builds to send notifications to your
    Nabaztag.</para>
    <figure float="0" id="fig-hudson-nabaztag-config">
      <title>Configuring your Nabaztag</title>
      <mediaobject id="I_mediaobject8_d1e12678">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0831.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0831.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>With the notable exception of the build radiator, many of these
    devices have similar limitations to the Jenkins Speaks and Jenkins Sounds
    plugins (see <xref linkend="sect-notification-noise"/>)—they are best
    suited for small, co-located teams, working on a limited number of
    projects. Nevertheless, when they work, they can be a useful addition to
    your general notification strategy.</para>
  </sect1>
  <sect1 id="sect-notification-conclusion">
    <title>Conclusion</title>
    <para>Notification is a vital part of your overall CI strategy. After all,
    a failed build is of little use if there is no one listening. Nor is
    notification a one-size-fits-all affair. You need to think about your
    organization, and tailor your strategy to suite the local corporate
    culture and predominant tool set.</para>
    <para>Indeed, it is important to define and implement a well thought-out
    notification strategy that suits your environment. Email, for example, is
    ubiquitous, so this will form the backbone of many notification
    strategies, but if you work in a larger team or with a busy technical
    lead, you may want to consider setting up an escalation strategy based on
    the advanced email options (see <xref linkend="sect-notification-advanced-email"/>). But you should complement
    this with one of the more active strategies, such as instant messaging or
    a desktop notifier. If your team already uses a chat or IRC channel to
    communicate, try to integrate this into your notification strategy as
    well. And SMS notification is a great strategy for really critical build
    jobs.</para>
    <para>You should also ensure that you have both passive and active (or
    pull and push) notification strategies. A prominent build radiator or an
    extreme feedback device, for example, sends a strong message to the team
    that fixing builds is a priority task, and can help install a more agile
    team culture.</para>
  </sect1>
</chapter>
