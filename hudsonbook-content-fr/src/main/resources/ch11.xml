<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-distributed-builds">
  <title>Builds distribués</title>
  <sect1 id="sect-distributed-builds-introduction">
    <title>Introduction</title>
    <para><indexterm class="startofrange" id="ch11-dist1" significance="normal">
        <primary>distributed builds</primary>
      </indexterm><indexterm class="startofrange" id="ch11-dist2"
        significance="normal">
        <primary>tâches de build</primary>
        <secondary>distribuées parmi des serveurs de build</secondary>
      </indexterm><indexterm id="I_indexterm11_d1e16025" significance="normal">
        <primary>serveur de build</primary>
        <secondary>multiples, exécution des builds sur</secondary>
        <see>builds distribués</see>
      </indexterm>L'une des fonctionnalités les plus puissantes de Jenkins est
    sans aucun doute sa capacité à répartir les tâches de build sur un large
    nombre de machines. Il est assez simple de configurer une ferme de serveurs
    de build, soit pour répartir la charge sur de multiples machines, soit pour
    exécuter des tâches de build dans différents environnements. C'est une
    stratégie très efficace qui peut potentiellement accroître considérablement
    la capacité de votre infrastructure d'IC.</para>
    <para>Les builds distribués sont généralement utilisés soit pour absorber
    une charge additionnelle, par exemple pour absorber les pics d'activité dans
    les builds en ajoutant dynamiquement des machines supplémentaires selon les
    besoins, soit pour exécuter des tâches de build spécialisées dans des
    systèmes d'exploitation ou des environnements spécifiques. Par exemple, vous
    pourriez avoir besoin d'exécuter une tâche de build spéciale sur une machine
    ou un système d'exploitation particulier. Si vous avez besoin d'exécuter des
    tests web en utilisant Internet Explorer, vous devrez utiliser une machine
    Windows. Ou alors une de vos tâches de build pourrait être particulièrement
    consommatrice en ressources, et nécessiter de l'exécuter sur une machine
    dédiée afin de ne pas pénaliser d'autres tâches de build.</para>
    <para>La demande sur des serveurs de build peut aussi fluctuer dans le
    temps. Si vous travaillez avec des cycles de release de produit, vous pouvez
    avoir besoin de beaucoup plus de tâches de build en fin de cycle, par
    exemple, lorsque des tests fonctionnels ou de régression plus complets
    deviennent plus fréquents.</para>
    <para>Dans ce chapitre, nous discuterons de comment configurer et gérer une
    ferme de serveurs de build en utilisant Jenkins.</para>
  </sect1>
  <sect1 id="sect-distributed-build-architecture">
    <title>L'Architecture de build distribuée de Jenkins</title>
    <para>Jenkins<indexterm class="startofrange" id="ch11-ms1"
        significance="normal">
        <primary>builds distribués</primary>
        <secondary>architecture maître/esclave pour</secondary>
      </indexterm><indexterm class="startofrange" id="ch11-ms2"
        significance="normal">
        <primary>tâches de build</primary>
        <secondary>serveurs de build distribué parmi</secondary>
        <tertiary>architecture maître/esclave pour</tertiary>
      </indexterm><indexterm class="startofrange" id="ch11-ms3"
        significance="normal">
        <primary>architecture maître/esclave pour les builds
        distribués</primary>
      </indexterm><indexterm class="startofrange" id="ch11-ms4"
        significance="normal">
        <primary>lmachine esclave</primary>
        <secondary sortas="distributed builds">pour les builds
        distribués</secondary>
      </indexterm> utilise une architecture maître/esclave pour gérer les builds
    distribués. Votre serveur Jenkins principal (celui que nous avons utilisé
    jusqu'à présent) est le maître. En un mot, le rôle du maître est de gérer
    l'ordonnancement des tâches de build, de répartir les builds sur les
    esclaves pour leur exécution réelle, surveiller les esclaves (en les mettant
    éventuellement hors-ligne si nécessaire) et enfin enregistrer et présenter
    les résultats de build. Même dans une architecture distribuée, une instance
    maître de Jenkins peut aussi exécuter des tâches de build
    directement.</para>
    <para>Le rôle des esclaves est de faire ce qu'on leur dit, ce qui inclut
    l'exécution de tâches de build envoyées par le maître. Vous pouvez
    configurer un projet pour qu'il s'exécute toujours sur un esclave
    particulier, sur un type particulier de machine, ou simplement laisser
    Jenkins sélectionner le prochain esclave disponible.</para>
    <para>Un esclave est un petit exécutable Java qui fonctionne sur une machine
    distante et se met en écoute de requêtes de la part de l'instance maître
    Jenkins. Les esclaves peuvent (et c'est généralement le cas) s'exécuter sur
    différents systèmes d'exploitation. L'instance esclave peut être démarrée de
    façons diverses, en fonction du système d'exploitation et de l'architecture
    réseau. Une fois que l'instance esclave est en marche, elle communique avec
    l'instance maître au travers d'une connexion TCP/IP. Nous regarderons
    différentes configurations dans le reste de ce <indexterm class="endofrange"
        id="I_indexterm11_d1e16072" significance="normal" startref="ch11-dist1">
        <primary/>
      </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16074"
        significance="normal" startref="ch11-dist2">
        <primary/>
      </indexterm>chapitre.</para>
  </sect1>
  <sect1 id="sect-master-slave-strategies">
    <title>Stratégies Maître/Esclave dans Jenkins</title>
    <para>Il existe différentes façons de configurer une ferme de build
    distribuée avec Jenkins, en fonction de votre système d'exploitation et de
    votre architecture réseau. Dans tous les cas, le fait qu'une tâche de build
    s'exécute sur un esclave, et comment cet esclave s'exécute, est transparent
    pour l'utilisateur final : les résultats du build et les artefacts finiront
    toujours sur le serveur maître.</para>
    <para>Créer un nouveau<indexterm id="I_indexterm11_d1e16084"
        significance="normal">
        <primary>tâches de build</primary>
        <secondary>distribuées parmi des serveurs de build</secondary>
        <tertiary>créer des noeuds esclaves</tertiary>
      </indexterm><indexterm id="I_indexterm11_d1e16091" significance="normal">
        <primary>builds distribués</primary>
        <secondary>noeuds esclaves pour</secondary>
        <tertiary>créer</tertiary>
      </indexterm> noeud esclave Jenkins est un processus simple. Premièrement,
    rendez vous dans l'écran Administrer Jenkins et cliquez sur Gérer les
    noeuds. Cet écran affiche la liste des agents esclaves (aussi connus en tant
    que “Noeuds” en termes plus politiquement corrects), comme montré dans <xref
    linkend="fig-jenkins-manage-nodes"/>. A partir de là, vous pouvez configurer
    de nouveaux noeuds en cliquant sur le bouton Nouveau Noeud. Vous pouvez
    aussi configurer quelques-uns des paramètres liés à votre installation de
    build distribuée (see <xref linkend="node-monitoring"/>).</para>
    <figure float="none" id="fig-jenkins-manage-nodes">
      <title>Gérer les noeuds esclaves</title>
      <mediaobject id="I_mediaobject11_d1e16106">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1101.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1101.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Il y a plusieurs stratégies différentes lorsqu'il s'agit de gérer les
    noeuds esclaves Jenkins, en fonction de vos systèmes d'exploitation cibles
    et d'autres considérations architecturales. Ces stratégies affectent la
    façon dont vous configurez vos noeuds esclaves, nous devons donc les
    considérer séparément. Dans les sections suivantes, nous regarderons les
    façons les plus fréquemment utilisées d'installer et de configurer des
    esclaves Jenkins :</para>
    <itemizedlist>
      <listitem>
        <para>Le maître démarre l'agent esclave via ssh</para>
      </listitem>
      <listitem>
        <para>Démarrage de l'agent esclave manuellement en utilisant Java Web
        Start</para>
      </listitem>
      <listitem>
        <para>Installation de l'agent esclave en tant que service Windows</para>
      </listitem>
      <listitem>
        <para>Démarrage de l'agent esclave directement depuis la ligne de
        commande sur la machine esclave</para>
      </listitem>
    </itemizedlist>
    <para>Chacune de ces stratégies possède ses utilisations, ses avantages et
    ses inconvénients. Regardons chacune d'entre elles.</para>
    <sect2>
      <title>Le Maître Démarre l'Agent Esclave en utilisant SSH</title>
      <para>Si vous <indexterm class="startofrange" id="ch11-start"
          significance="normal">
          <primary>tâches de build</primary>
          <secondary>distribuées parmi des serveurs de build</secondary>
          <tertiary>démarrer des noeuds esclaves</tertiary>
        </indexterm><indexterm class="startofrange" id="ch11-ssh"
          significance="normal">
          <primary>builds distribués</primary>
          <secondary>noeuds esclaves pour</secondary>
          <tertiary>démarrer en utilisant SSH</tertiary>
        </indexterm><indexterm class="startofrange" id="ch11-ssh2"
          significance="normal">
          <primary>SSH, démarrer un noeud esclave en utilisant</primary>
        </indexterm>travaillez dans un environnement Unix, la façon la plus
      pratique de démarrer un esclave Jenkins est sans aucun doute d'utiliser
      SSH. Jenkins possède son propre client SSH intégré, et presque tous les
      environnements Unix supportent SSH (habituellement <literal
      moreinfo="none">sshd</literal>) de base.</para>
      <para>Pour créer un esclave de type Unix, cliquez sur le bouton Nouveau
      Noeud comme nous l'avons mentionné ci-dessus. Cela vous demande d'entrer
      le nom de votre esclave, et son type (voir <xref
      linkend="fig-jenkins-new-slave"/>). Au moment de l'écriture de ces lignes,
      seuls les “esclaves passifs” sont supportés en standard ; ces esclaves
      répondent simplement aux requêtes de build en provenance du noeud maître.
      C'est la façon la plus commune de mettre en place une architecture de
      build distribuée, et c'est la seule option disponible dans une
      installation par défaut.</para>
      <figure float="none" id="fig-jenkins-new-slave">
        <title>Créer un nouveau noeud esclave</title>
        <mediaobject id="I_mediaobject11_d1e16161">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1102.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1102.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Dans cet écran, vous devez simplement fournir un nom pour votre
      esclave. Lorsque vous cliquez sur OK, Jenkins vous permet de fournir plus
      de détails sur vos machines esclaves (voir <xref
      linkend="fig-jenkins-slave-ssh"/>).</para>
      <figure float="0" id="fig-jenkins-slave-ssh">
        <title>Créer un noeud esclave Unix</title>
        <mediaobject id="I_mediaobject11_d1e16173">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1103.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1103.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Ce nom est simplement un moyen unique pour identifier votre machine
      esclave. Ce peut être n'importe quoi, mais il pourrait être utile que ce
      nom vous rappelle la machine physique sur laquelle cela fonctionne. Il est
      aussi utile que ce nom soit compatible avec le système de fichiers et un
      format URL. Les espaces sont autorisés, mais cela vous facilitera la vie
      de les éviter. Ainsi, “Slave-1” est meilleur que “Slave 1”.</para>
      <para>La description est aussi purement destinée à la lecture humaine, et
      peut être utilisée pour indiquer pourquoi utiliser cet esclave plutôt
      qu'un autre.</para>
      <para>Comme sur l'écran principal de configuration Jenkins, le nombre
      d'exécuteurs vous permet de définir le nombre de tâches de build
      concurrentes que ce noeud peut exécuter.</para>
      <para>Tout noeud esclave Jenkins nécessite aussi un emplacement qu'il
      puisse utiliser comme racine, ou, plus précisément un répertoire dédié sur
      la machine esclave que l'agent esclave puisse utiliser pour exécuter des
      tâches de build. Vous définissez ce répertoire dans le champ racine du
      disque distant. Vous devez fournir un chemin local, spécifique à l'OS, tel
      que <filename moreinfo="none">/var/jenkins</filename> pour une machine
      Unix ou <filename moreinfo="none">C:\jenkins</filename> sur Windows. Rien
      d'essentiel n'est stocké dans ce répertoire — tout ce qui est important
      est renvoyé à la machine maître une fois que le build est effectué. Vous
      n'avez donc généralement pas besoin de vous inquiéter de sauvegarder ces
      répertoires comme c'est le cas avec ceux du maître.</para>
      <para>Les libellés sont un concept particulièrement utile quand votre
      architecture distribuée commence à grossir. Vous définissez des libellés,
      des tags, pour chaque noeud de build, et configurez ensuite une tâche de
      build afin qu'elle s'exécute avec un libellé particulier. Les libellés
      peuvent avoir trait au système d'exploitation (unix, windows, macosx,
      etc.), aux environnements (staging, recette, développement, etc.) ou
      n'importe quel critère que vous trouveriez utile. Par exemple, vous pouvez
      configurer vos tests automatisés WebDriver/Selenium pour qu'ils
      s'exécutent avec Internet Explorer, mais seulement sur des noeuds esclaves
      avec le libellé “windows”.</para>
      <para>Le champ <emphasis>Usage</emphasis> vous permet de configurer
      l'intensité avec laquelle Jenkins utilisera cet esclave. Vous avez le
      choix parmi trois options : utiliser cet esclave autant que possible,
      réserver pour les tâches de build dédiées, ou le mettre en ligne quand
      c'est nécessaire.</para>
      <para>La première option “Utiliser cet esclave autant que possible”,
      indique à Jenkins d'utiliser librement cet esclave dès qu'il devient
      disponible, pour toute tâche qu'il peut exécuter. C'est de loin l'option
      la plus utilisée, et généralement celle que vous voulez.</para>
      <para>Quelques fois, cependant, la seconde option peut s'avérer utile.
      Dans la configuration du projet, vous pouvez lier une tâche de build à un
      noeud spécifique — c'est utile quand une tâche particulière, comme un
      déploiement automatisé ou une suite de tests de performance, nécessite
      d'être exécutée sur une machine spécifique. Dans ce cas, l'option
      “Réserver cette machine pour les tâches associées uniquement” peut avoir
      du sens. Vous pouvez aller encore plus loin en positionnant le nombre
      maximum d'Exécuteurs à 1. Dans ce cas, non seulement cet esclave sera
      réservé pour un type particulier de tâche, mais il sera uniquement capable
      d'exécuter une seule de ces tâches de build à tout instant time. C'est une
      configuration très utile pour les tests de performance ou de charge, où
      vous avez besoin de réserver la machine pour qu'elle exécute ses tests
      sans interférence.</para>
      <para>La troisième option est “Mettre cet esclave en ligne lors de demande
      et hors-ligne sinon” (voir <xref linkend="fig-jenkins-slave-idle"/>).
      Comme le nom l'indique, cette option indique à Jenkins de mettre cet
      esclave en ligne lorsque la demande est élevée et de le mettre hors-ligne
      lors la demande faiblit. Ceci permet de garder quelques esclaves de build
      pour les périodes d'utilisation importante, sans avoir à maintenir un
      agent esclave en fonctionnement sur en permanence. Quand vous choisissez
      cette option, vous devez aussi fournir quelques détails supplémentaires.
      Le “Délai de la demande” indique combien de minutes les tâches doivent
      avoir attendu dans la file d'attente avant que cet esclave ne soit mis en
      ligne. Le champ Délai d'inactivité indique combien de temps l'esclave doit
      avoir été inactif avant que Jenkins ne le mette hors-ligne.</para>
      <figure float="none" id="fig-jenkins-slave-idle">
        <title>Mettre un esclave hors-ligne lorsqu'inactif</title>
        <mediaobject id="I_mediaobject11_d1e16208">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1104.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1104.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>La méthode de lancement décide de comment Jenkins lancera le noeud,
      comme nous l'avons mentionné précédemment. Pour la configuration dont nous
      parlons ici, vous choisiriez “Lancer les agents esclaves sur machines Unix
      via SSH”. Le bouton Avancé vous permet d'entrer des détails additionels
      dont Jenkins a besoin pour se connecter à la machine esclave Unix : un nom
      d'hôte, un login et mot de passe et un numéro de port. Vous pouvez aussi
      fournir un chemin vers un fichier de clé privée SSH sur la machine maître
      (e.g., <literal moreinfo="none">id_dsa</literal> ou <literal
      moreinfo="none">id_rsa</literal>) à utiliser pour une authentification
      “sans mot de passe” par clés Publique/Privée.</para>
      <para>Vous pouvez aussi configurer quand Jenkins démarre ou arrête
      l'esclave. Par défaut, Jenkins gardera simplement l'esclave en
      fonctionnement et l'utilisera chaque fois qu'il en aura besoin (l'option
      “Garder cet esclave en ligne autant que possible”). Si Jenkins remarque
      que l'esclave est déconnecté (par exemple à cause d'un redémarrage
      serveur), il essaiera de le redémarrer s'il le peut. Sinon, Jenkins peut
      être plus conservateur avec vos ressources systèmes, et mettre l'esclave
      hors-ligne lorsqu'il n'en a pas besoin. Pour faire cela, choisissez
      simplement l'option “Mettre cet esclave en ligne si nécessaire et
      hors-ligne en cas d'inactivité”. C'est utile si vous avez régulièrement
      des pics et accalmies de l'activité de build, car un esclave peut être mis
      hors-ligne pour conserver les ressources systèmes pour d'autres tâches, et
      remis en ligne lorsque c'est nécessaire.</para>
      <para>Jenkins a aussi besoin de savoir où il peut trouver les outils de
      build dont il a besoin pour vos tâches de build sur les machines esclaves.
      Ceci inclut aussi bien les JDKs que les outils de build comme Maven, Ant,
      et Gradle. Si vous avez configuré vos outils de build pour être
      automatiquement installés, vous n'aurez typiquement pas de configuration
      supplémentaire à effectuer pour vos machines esclaves ; Jenkins
      téléchargera et installera les outils au besoin. D'un autre côté, si vos
      outils de build sont installés localement sur la machine esclave, vous
      aurez besoin d'indiquer à Jenkins où il peut les trouver. Ceci se fait en
      cochant la case Emplacement des outils, et en fournissant les chemins
      locaux pour chaque outil nécessaire à vos tâches de build (voir <xref
      linkend="fig-jenkins-slave-node-tools"/>).</para>
      <figure float="none" id="fig-jenkins-slave-node-tools">
        <title>Configurer l'emplacement des outils</title>
        <mediaobject id="I_mediaobject11_d1e16230">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1105.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1105.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Vous pouvez aussi spécifier des variables d'environnement. Celles-ci
      seront passées à vos tâches de build, et ce peut être un moyen de
      permettre à vos tâches de se comporter différemment en fonction de
      l'endroit où elles s'exécutent.</para>
      <para>Une fois que vous avez fait cela, votre nouveau noeud esclave
      apparaîtra dans la liste des ordinateurs sur la page des Noeuds Jenkins
      <indexterm class="endofrange" id="I_indexterm11_d1e16239"
          significance="normal" startref="ch11-ssh">
          <primary/>
        </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16241"
          significance="normal" startref="ch11-ssh2">
          <primary/>
        </indexterm> (voir <xref linkend="fig-jenkins-slave-nodes"/>).</para>
      <figure float="0" id="fig-jenkins-slave-nodes">
        <title>Votre nouveau noeud esclave en action</title>
        <mediaobject id="I_mediaobject11_d1e16250">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1106.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1106.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Démarrer l'agent esclave manuellement via Java Web Start</title>
      <para>Une autre <indexterm class="startofrange" id="ch11-jws1"
          significance="normal">
          <primary>builds distribués</primary>
          <secondary>noeuds esclaves pour</secondary>
          <tertiary>lancés avec Java Web Start</tertiary>
        </indexterm><indexterm class="startofrange" id="ch11-jws2"
          significance="normal">
          <primary>Java Web Start</primary>
          <secondary>lancer des noeuds esclaves avec</secondary>
        </indexterm>option est de démarrer l'agent esclave depuis la machine
      esclave elle-même en utilisant Java Web Start (JNLP). Cette approche est
      utile si le serveur ne peut pas se connecter à l'esclave, par exemple si
      la machine esclave s'exécute de l'autre côté d'un firewall. Cela
      fonctionne quel que soit le système d'exploitation de votre esclave,
      toutefois c'est le plus souvent utilisé pour des esclaves Windows. Cela
      présente quelques inconvénients majeurs : le noeud esclave ne peut pas
      être démarré, ou redémarré, automatiquement par Jenkins. Ainsi, si
      l'esclave tombe, l'instance maître ne peut pas le redémarrer.</para>
      <para>Quand vous faites cela sur une machine Windows, vous devez démarrer
      l'esclave Jenkins manuellement au moins une fois. Ceci implique d'ouvrir
      un navigateur sur la machine, ouvrir la page du noeud esclave sur le
      maître Jenkins et de lancer l'esclave en utilisant l'icône JNLP bien
      visible. Une fois que vous avez lancé l'esclave, vous pouvez l'installer
      comme un service Windows.</para>
      <para>Il y a aussi des fois où vous avez besoin de faire cela depuis la
      ligne de commande, dans un environnement Unix. Vous pourriez avoir besoin
      de ça à cause d'un firewall ou d'autres problèmes réseau, ou parce que SSH
      n'est pas disponible dans votre environnement.</para>
      <para>Détaillons à présent les deux processus.</para>
      <para>La première chose que vous devez faire dans tous les cas est de
      créer un nouvel esclave. Comme pour tout noeud esclave, vous faites cela
      en cliquant sur l'entrée Nouveau noeud dans l'écran Noeuds. Lors de la
      saisie des détails concernant votre noeud esclave, assurez-vous de choisir
      “Lancer les agents esclave via JNLP” dans le champ Méthode de Lancement
      (voir <xref linkend="fig-jenkins-jnlp-slave"/>). Rappelez-vous aussi que
      c'est un noeud esclave Windows, la racine du système de fichiers distant
      doit être un chemin Windows (comme <filename
      moreinfo="none">C:\jenkins-slave</filename>). Ce répertoire n'a pas à
      exister : Jenkins le créera automatiquement s'il manque.</para>
      <figure float="0" id="fig-jenkins-jnlp-slave">
        <title>Créer un noeud esclave pour JNLP</title>
        <mediaobject id="I_mediaobject11_d1e16289">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1107.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1107.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Une fois que vous avez sauvé cette configuration, ensuite,
      connectez-vous sur la machine esclave et ouvrez l'écran du noeud esclave
      dans un navigateur, comme montré sur <xref
      linkend="fig-jenkins-launch-jnlp"/>. Vous verrez un large bouton orange
      Lancer — si vous cliquez sur ce bouton, vous devriez être capable de
      lancer un agent esclave directement depuis votre navigateur.</para>
      <figure float="0" id="fig-jenkins-launch-jnlp">
        <title>Lancer un esclave via Java Web Start</title>
        <mediaobject id="I_mediaobject11_d1e16301">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1108.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1108.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Si tout va bien, ceci ouvrira une petite fenêtre indiquant que votre
      esclave est à présent en fonctionnement (voir <xref
      linkend="fig-jenkins-slave-agent"/>).</para>
      <figure float="0" id="fig-jenkins-slave-agent">
        <title>L'agent esclave Jenkins en action</title>
        <mediaobject id="I_mediaobject11_d1e16313">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1109.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1109.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Les navigateurs sont inconstants, toutefois, et Java Web Start n'est
      pas toujours simple à utiliser. Cette approche fonctionne habituellement
      avec Firefox, bien que vous deviez auparavant avoir installé le JRE Java
      pour que Firefox comprenne Java. Utiliser JNLP avec Internet Explorer
      requiert un ensemble (non négligeable) de bricolages pour associer les
      fichiers <filename moreinfo="none">*.jnlp</filename> avec l'exécutable
      Java Web Start, un fichier appelé <command
      moreinfo="none">javaws</command>, que vous trouverez dans le répertoire
      <filename moreinfo="none">bin</filename> de Java. Il est en fait
      probablement plus simple de le lancer depuis la ligne de commande comme
      discuté ci-dessous.</para>
      <para>Une approche plus fiable, quoique bas-niveau, est de démarrer
      l'esclave depuis la ligne de commande. Pour faire ça, invoquez simplemet
      l'exécutable <command moreinfo="none">javaws</command> depuis une fenêtre
      de commande comme suit :</para>
      <screen format="linespecific">C:&gt; javaws http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp</screen>
      <para>La commande exacte que vous devez exécuter, notamment avec l'URL
      correcte, est idéalement affichée dans la fenêtre du noeud esclave Jenkins
      juste en dessous du bouton de lancement JNLP (voir <xref
      linkend="fig-jenkins-launch-jnlp"/>).</para>
      <para>Si la sécurité est activée sur votre serveur Jenkins, Jenkins
      communiquera avec l'esclave sur un port spécifique non standard. Si pour
      une raison quelconque ce port est inaccessible, le noeud esclave échouera
      au lancement et affichera un message d'erreur similaire à celui montré
      dans <xref linkend="fig-jenkins-slave-unable-to-connect"/>.</para>
      <figure float="none" id="fig-jenkins-slave-unable-to-connect">
        <title>L'esclave Jenkins échouant à la connexion au maître</title>
        <mediaobject id="I_mediaobject11_d1e16348">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1110.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1110.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Ceci est habituellement un signe qu'un firewall bloque un port. Par
      défaut, Jenkins choisit un port par défaut pour la communication TCP avec
      ses esclaves. Cependant si vous devez avoir un port spécifique que votre
      firewall autorise, vous pouvez forcer Jenkins à utiliser un port fixe dans
      l'écran de configuration système en sélectionnant l'option Fixe dans “Port
      TCP pour les agents esclaves JNLP”, comme <indexterm class="endofrange"
          id="I_indexterm11_d1e16355" significance="normal" startref="ch11-jws1">
          <primary/>
        </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16357"
          significance="normal" startref="ch11-jws2">
          <primary/>
        </indexterm>montré dans <xref linkend="fig-jenkins-tcp-ports"/>.</para>
      <figure float="0" id="fig-jenkins-tcp-ports">
        <title>Configurer le port de l'esclave Jenkins</title>
        <mediaobject id="I_mediaobject11_d1e16365">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1111.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1111.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Installer un esclave Jenkins comme Service Windows</title>
      <para>Une fois <indexterm class="startofrange" id="ch11-win1"
          significance="normal">
          <primary>builds distribués</primary>
          <secondary>noeuds esclaves pour</secondary>
          <tertiary>installer comme service Windows</tertiary>
        </indexterm><indexterm class="startofrange" id="ch11-win2"
          significance="normal">
          <primary>services Windows</primary>
          <secondary>installer des noeuds esclaves comme</secondary>
        </indexterm>que vous avez démarré votre esclave sur votre machine
      Windows, vous pouvez vous épargner la peine d'avoir à le redémarrer
      manuellement chaque fois que votre machine redémarre en l'installant comme
      service Windows. Pour faire cela, sélectionnez l'option de menu “Installer
      comme Service Windows” dans le menu Fichier de la fenêtre de l'agent
      esclave (voir <xref linkend="fig-jenkins-install-slave-service"/>).</para>
      <figure float="none" id="fig-jenkins-install-slave-service">
        <title>Installer l'esclave Jenkins comme service Windows</title>
        <mediaobject id="I_mediaobject11_d1e16393">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1112.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1112.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Une fois que c'est fait, votre noeud esclave Jenkins démarrera
      automatiquement chaque fois que la machine démarre, et peut être
      administré tout comme n'importe quel autre service Windows<indexterm
          class="endofrange" id="I_indexterm11_d1e16400" significance="normal"
          startref="ch11-win1">
          <primary/>
        </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16402"
          significance="normal" startref="ch11-win2">
          <primary/>
        </indexterm> (voir <xref
      linkend="fig-jenkins-slave-service-installed"/>).</para>
      <figure float="none" id="fig-jenkins-slave-service-installed">
        <title>Gérer le service Windows Jenkins</title>
        <mediaobject id="I_mediaobject11_d1e16410">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1113.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1113.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Démarrer le noeud esclave en mode Headless</title>
      <para>Vous <indexterm id="I_indexterm11_d1e16420" significance="normal">
          <primary>builds distribués</primary>
          <secondary>noeuds esclaves pour</secondary>
          <tertiary>démarrer en mode headless</tertiary>
        </indexterm><indexterm id="I_indexterm11_d1e16427" significance="normal">
          <primary>mode headless, démarrer des noeuds esclaves en</primary>
        </indexterm>pouvez aussi démarrer un agent esclave en mode headless,
      directement depuis la ligne de commande. C'est utile si vous n'avez pas
      d'interface utilisateur disponible, par exemple si vous démarrer noeud
      esclave JNLP sur une machine Unix. Si vous travaillez avec des machines
      Unix, il est généralement plus facile et plus flexible d'utiliser
      simplement une connexion SSH, mais il y a parfois des contraintes de
      réseau ou d'archiecture qui vous empêchent d'utiliser SSH. Dans ce genre
      de cas, il est encore possible d'exécuter un noeud esclave depuis la ligne
      de commande.</para>
      <para>Pour démarrer le noeud esclave de cette façon, vous devez utiliser
      le fichier <filename moreinfo="none">slave.jar</filename> de Jenkins. Vous
      pouvez le trouver dans <filename
      moreinfo="none">JENKINS_HOME/war/WEB-INF/slave.jar</filename>. Une fois ce
      fichier localisé et copié sur la machine esclave Windows, vous pouvez
      l'exécuter comme suit :</para>
      <screen format="linespecific">java -jar slave.jar \
 -jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp</screen>
      <para>Et si votre serveur Jenkins nécessite une authentification, passez
      simplement l'option <literal moreinfo="none">-auth
      username:password</literal> :</para>
      <screen format="linespecific">java -jar slave.jar \
 -jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp
 -auth scott:tiger</screen>
      <para>Une fois que vous avez démarré l'agent esclave, assurez de
      l'installer comme service Windows, comme indiqué dans la section
      précédente.</para>
    </sect2>
    <sect2>
      <title>Démarrer un esclave Windows en tant que service distant</title>
      <para>Jenkins <indexterm id="I_indexterm11_d1e16456" significance="normal">
          <primary>builds distribués</primary>
          <secondary>noeuds esclaves pour</secondary>
          <tertiary>démarrer en tant que service distant</tertiary>
        </indexterm><indexterm id="I_indexterm11_d1e16463" significance="normal">
          <primary>service distant, démarrer des noeuds esclaves en tant
          que</primary>
        </indexterm><indexterm id="I_indexterm11_d1e16466" significance="normal">
          <primary>services services</primary>
          <secondary>démarrer des noeuds esclaves en tant que</secondary>
        </indexterm>peut aussi gérer un esclave Windows distant comme un service
      Windows, en utilisant le service Windows Management Instrumentation
      (WMI)<indexterm id="I_indexterm11_d1e16472" significance="normal">
          <primary>WMI (Windows Management Instrumentation)</primary>
        </indexterm> qui est installé par défaut sur Windows 2000 ou après (voir
      <xref linkend="fig-jenkins-slave-service"/>). Quand vous choisissez cette
      option, vous avez seulement besoin de fournir un nom d'utilisateur et un
      mot de passe Windows. Le nom du noeud doit être le nom de machine de la
      machine esclave.</para>
      <para>Ceci est certainement pratique, parce que cela ne requiert pas de se
      connecter à la machine Windows pour la configurer. Toutefois, cette
      méthode possède quelques limitations — en particulier, vous ne pouvez pas
      exécuter d'applications nécessitant une interface graphique, vous ne
      pouvez donc pas mettre en place un esclave de cette façon pour faire du
      test Web, par exemple. En pratique, cela peut se révéler un peu compliqué
      à paramétrer, parce que vous pourriez avoir besoin de configurer le
      firewall Windows pour ouvrir les ports et services appropriés. Si vous
      rencontrez des problèmes, assurez-vous que votre configuration réseau
      autorise les connexions TCP aux ports 135, 139, et 445, ainsi que les
      connexions UDP aux ports 137 et 138 (voir <ulink
      url="https://wiki.jenkins-ci.org/display/JENKINS/Windows+slaves+fail+to+start+via+DCOM"/>
      pour plus de détails).</para>
      <figure float="0" id="fig-jenkins-slave-service">
        <title>Permettre à Jenkins de contrôler un esclave Windows comme un
        service Windows</title>
        <mediaobject id="I_mediaobject11_d1e16499">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1114.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1114.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="sect-build-job-ties">
    <title>Associating a Build Job with a Slave or Group of Slaves</title>
    <para>In the <indexterm class="startofrange" id="ch11-job1"
        significance="normal">
        <primary>distributed builds</primary>
        <secondary>slave nodes for</secondary>
        <tertiary>associating with build jobs</tertiary>
      </indexterm><indexterm class="startofrange" id="ch11-job2"
        significance="normal">
        <primary>build jobs</primary>
        <secondary>distributed across build servers</secondary>
        <tertiary>associating slave nodes to jobs</tertiary>
      </indexterm>previous section, we saw how you can assign labels to your
    slave nodes. This is a convenient way to group your slave nodes according to
    characteristics such as operating system, target environment, database type,
    or any other criteria that is relevant to your build process. A common
    application of this practice is to run OS-specific functional tests on
    dedicated slave nodes, or to reserve a particular machine exclusively to
    performance tests.</para>
    <para>Once you have assigned labels to your slave nodes, you also need to
    tell Jenkins where it can run the build jobs. By default, Jenkins will
    simply use the first available slave node, which usually results in the best
    overall turn-around time. If you need to tie a build job to a particular
    machine or group of machines, you need to tick the “Restrict where this
    project can be run” checkbox in the build configuration page (see <xref
    linkend="fig-jenkins-label-expression"/>). Next, enter the name of the
    machine, or a label identifying a group of machines, into the Label
    Expression field. Jenkins will provide a dynamic dropdown showing the
    available machine names and labels as you type.</para>
    <figure float="0" id="fig-jenkins-label-expression">
      <title>Running a build job on a particular slave node</title>
      <mediaobject id="I_mediaobject11_d1e16531">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1115.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1115.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This field also accepts boolean expressions, allowing you to define
    more complicated constraints about where your build job should run. How to
    use these expressions is best illustrated by an example. Suppose you have a
    build farm with Windows and Linux slave nodes (identified by the labels
    “windows” and “linux”), distributed over three sites (“sydney”,
    “sanfrancisco”, and “london”). Your application also needs to be tested
    against several different databases (“oracle”, “db2”, “mysql”, and
    “postgres”). You also use labels to distinguish slave nodes used to deploy
    to different environments (test, uat, production).</para>
    <para>The simplest use of label expressions is to determine where a build
    job can or cannot be executed. If your web tests require Internet Explorer,
    for example, you will need them to run on a Windows machine. You could
    express this by simply quoting the corresponding label:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16540">windows</programlisting>
    <para>Alternatively, you might want to run tests against Firefox, but only
    on Linux machines. You could exclude Windows machines from the range of
    candidate build nodes by using the <literal moreinfo="none">!</literal>
    negation operator:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16547">!windows</programlisting>
    <para>You can also use the <command moreinfo="none">and</command> (<literal
    moreinfo="none">&amp;&amp;</literal>) and <command
    moreinfo="none">or</command> (<literal moreinfo="none">!!</literal>)
    operators to combine expressions. For example, suppose the Postgres database
    is only tested for Linux. You could tell Jenkins to run a particular build
    job only on Linux machines installed with postgres using the following
    expression:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16563">linux &amp;&amp; postgres</programlisting>
    <para>Or you could specify that a particular build job is only to be run on
    a UAT environment in Sydney or London:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16568">uat &amp;&amp; (sydney || london)</programlisting>
    <para>If your machine names contain spaces, you will need to enclose them in
    double quotes:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16572">"Windows 7" || "Windows XP"</programlisting>
    <para>There are also two more advanced logical operators that you may find
    useful. The <command moreinfo="none">implies</command> operator (<literal
    moreinfo="none">=&gt;</literal>) lets you define a logical constraint of the
    form “if A is true, then B must also be true.” For example, suppose you have
    a build job that can run on any Linux distribution, but if it is executed on
    a Windows box, it must be Windows 7. You could express this constraint as
    follows:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16582">windows -&gt; "Windows 7"</programlisting>
    <para>The other logical operator is the <command
    moreinfo="none">if-and-only-if</command> (<literal
    moreinfo="none">&lt;=&gt;</literal>) operator. This operation lets you
    define stronger constraints of the form “If A is true, then B must be true,
    but if A is false, then B must be false.” For example, suppose that Windows
    7 tests are only to be run in a UAT environment, and that only Windows 7
    tests are to be run in the UAT environment. You could express this as
    <indexterm class="endofrange" id="I_indexterm11_d1e16592"
        significance="normal" startref="ch11-job1">
        <primary/>
      </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16594"
        significance="normal" startref="ch11-job2">
        <primary/>
      </indexterm>shown here:</para>
    <programlisting format="linespecific" id="I_programlisting11_d1e16597">"Windows 7" &lt;-&gt; uat</programlisting>
  </sect1>
  <sect1 id="node-monitoring">
    <title>Node Monitoring</title>
    <para>Jenkins <indexterm id="I_indexterm11_d1e16604" significance="normal">
        <primary>distributed builds</primary>
        <secondary>slave nodes for</secondary>
        <tertiary>monitoring</tertiary>
      </indexterm><indexterm id="I_indexterm11_d1e16611" significance="normal">
        <primary>build jobs</primary>
        <secondary>distributed across build servers</secondary>
        <tertiary>monitoring slave nodes</tertiary>
      </indexterm><indexterm id="I_indexterm11_d1e16618" significance="normal">
        <primary>build agents</primary>
        <secondary>monitoring</secondary>
      </indexterm>doesn’t just dispatch build jobs to slave agents and hope for
    the best: it pro-actively monitors your slave machines, and will take a node
    offline if it considers that the node is incapable of safely performing a
    build. You can fine-tune exactly what Jenkins monitors int the Manage Nodes
    screen (see <xref linkend="fig-jenkins-node-monitoring"/>). Jenkins monitors
    the slave agents in several different ways. It monitors the response time:
    an overly slow response time can indicate either a network problem or that
    the slave machine is down. It also monitors the amount of disk space,
    temporary directory space and swap space available to the Jenkins user on
    the slave machine, since build jobs can be notoriously disk-hungry. It also
    keeps tabs on the system clocks, as if the clocks are not correctly
    synchronized, odd errors can sometimes happen. If any of these criteria is
    not up to scratch, Jenkins will automatically take the server
    offline.</para>
    <figure float="none" id="fig-jenkins-node-monitoring">
      <title>Jenkins proactively monitors your build agents</title>
      <mediaobject id="I_mediaobject11_d1e16629">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1116.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1116.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="I_sect111_d1e16634">
    <title>Cloud Computing</title>
    <para>Cloud computing<indexterm class="startofrange" id="ch11-cloud1"
        significance="normal">
        <primary>cloud computing, for builds</primary>
      </indexterm><indexterm class="startofrange" id="ch11-cloud2"
        significance="normal">
        <primary>distributed builds</primary>
        <secondary sortas="cloud-based">with cloud-based build farm</secondary>
      </indexterm><indexterm class="startofrange" id="ch11-cloud3"
        significance="normal">
        <primary>build jobs</primary>
        <secondary>distributed across build servers</secondary>
        <tertiary>cloud-based build farm for</tertiary>
      </indexterm> involves using hardware resources on the Internet as an
    extension and/or replacement of your local computing architecture. Cloud
    computing is expanding into many areas of the enterprise, including email
    and document sharing (Gmail and Google Apps are particularly well-known
    examples, but there are many others), off-site data storage (such as Amazon
    S3), as well as more technical services such as source code repositories
    (such as GitHub, Bitbucket, etc.) and many others.</para>
    <para>Of course externalized hardware architecture solutions have been
    around for a long time. The main thing that distinguishes the cloud
    computing with more traditional services is the speed and flexibility with
    which a service can be brought up, and brought down when it is no longer
    needed. In a cloud computing environment, a new machine can be running and
    available within seconds.</para>
    <para>However, cloud computing in the context of Continuous Integration is
    not always as simple as it might seem. For any cloud-based approach to work,
    some of your internal resources may need to be available to the outside
    world. This can include opening access to your version control system, your
    test databases, and to any other resources that your builds and tests
    require. All these aspects need to be considered carefully when choosing a
    cloud-based CI architecture, and may limit your options if certain resources
    simply cannot be accessed from the Internet. Nevertheless, cloud-based CI
    has the potential of providing huge benefits when it comes to
    scalability.</para>
    <para>In the following sections, we will look at how to use the Amazon EC2
    cloud computing services to set up a cloud-based build farm.</para>
    <sect2>
      <title>Using Amazon EC2</title>
      <para>In <indexterm class="startofrange" id="ch11-amazon"
          significance="normal">
          <primary>Amazon EC2 cloud computing service</primary>
        </indexterm>addition to selling books, Amazon is one of the more
      well-known providers of cloud computing services. If you are willing to
      pay for the service, Amazon can provide you build machines that can be
      either used permanently as part of your build farm, or brought online as
      required when your existing build machines become overloaded. This is an
      excellent and reasonably cost-efficient way to absorb extra build load on
      an as-needed basis, and without the headache of extra physical machines to
      maintain.</para>
      <para>If you want the flexibility of a cloud-based CI architecture, but
      don’t want to externalize your hardware, another option is to set up a
      <indexterm id="I_indexterm11_d1e16672" significance="normal">
          <primary>Eucalyptus cloud</primary>
        </indexterm>Eucalyptus cloud. Eucalyptus is an open source tool that
      enables you to create a local private cloud on existing hardware.
      Eucalyptus uses an API that is compatible with Amazon EC2 and S3, and
      works well with Jenkins.</para>
      <sect3>
        <title>Setting up your Amazon EC2 build farm</title>
        <para>Amazon EC2 is probably the most popular and well-known commercial
        cloud computing service. To use this service, you will need to create an
        EC2 account with Amazon if you do not already have one. The process
        required to do this is well documented on the Amazon website, so we will
        not dwell on this here. Once you have created your account, you will be
        able to create the virtual machines and machine images that will make up
        your EC2-based build farm.</para>
        <para>When using Amazon EC2, you create virtual machines, called
        instances, using the Amazon Web<indexterm id="I_indexterm11_d1e16683"
            significance="normal">
            <primary>AWS (Amazon Web Services)</primary>
          </indexterm><indexterm id="I_indexterm11_d1e16686"
            significance="normal">
            <primary>Amazon Web Services (AWS)</primary>
          </indexterm> Services (AWS) Management Console (see <xref
        linkend="fig-jenkins-aws-console"/>). This website is where you manage
        your running instances and create new ones. You create these instances
        from predefined images, called <indexterm id="I_indexterm11_d1e16692"
            significance="normal">
            <primary>AMI (Amazon Machine Image)</primary>
          </indexterm><indexterm id="I_indexterm11_d1e16695"
            significance="normal">
            <primary>Amazon Machine Image (AMI)</primary>
          </indexterm>Amazon Machine Images (AMIs). There are many AMI images,
        both from Amazon and in the public domain, that you can use as a
        starting point, covering most of the popular operating systems. Once you
        have created a new instance, you can connect to it using either SSH (for
        unix machines) or Windows Remote Desktop Connection, to configure it for
        your purposes.</para>
        <figure float="none" id="fig-jenkins-aws-console">
          <title>You manage your EC2 instances using the Amazon AWS Management
          Console</title>
          <mediaobject id="I_mediaobject11_d1e16702">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_1117.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_1117.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>To set up a build farm, you will also need to configure your have
        one, just go to the Key Pairs menu in the Security build server to be
        able to access your EC2 instances. In particular, you will need to
        install the Amazon EC2 API tools, set up the appropriate private/public
        keys, and allow SSH connections from your server or network to your
        Amazon instances. Again, the details of how to do this are well
        documented for all the major operating systems on the EC2
        website.</para>
        <para>You can use Amazon EC2 instances in two ways—either create slave
        machines on Amazon EC2 and use them as remote machines, or have Jenkins
        create them for you dynamically on demand. Or you can have a combination
        of the two. Both approaches have their uses, and we will discuss each of
        them in the following sections.</para>
      </sect3>
      <sect3>
        <title>Using EC2 instances as part of your build farm</title>
        <para>Creating a new EC2 instance is as simple as choosing the base
        image you want to use. You will just need to provide some details about
        the instance, such as its size and capacity, and the private key you
        want to use to access the machine. Amazon will then create a new running
        virtual machine based on this image. Once you have set it up, an EC2
        instance is essentially a machine like any other, and it is easy and
        convenient to set up permanent or semipermanent EC2 machines as part of
        your build infrastructure. You may even opt to use an EC2 image as your
        master server.</para>
        <para>Setting up an existing EC2 instance as a Jenkins slave is little
        different to setting up any other remote slave. If you are setting up a
        Unix or Linux EC2 slave, you will need to refer to the private key file
        (see <xref linkend="fig-jenkins-ec2-linux"/>) that you used to create
        the EC2 instance on the AWS Management console. Depending on the flavor
        of Linux you are using, you may also need to provide a username. Most
        distributions connect as root, but some, such as Ubuntu, need a
        different user name.</para>
        <figure float="none" id="fig-jenkins-ec2-linux">
          <title>Configuring an Amazon EC2 slave</title>
          <mediaobject id="I_mediaobject11_d1e16723">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_1118.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_1118.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>
      <sect3>
        <title>Using dynamic instances</title>
        <para>The second approach involves creating new Amazon EC2 machines
        dynamically, as they are required. Setting up dedicated instances is not
        difficult, but it does not scale well. A better approach is to let
        Jenkins create new instances as require. To do this, you will need to
        install the Jenkins<indexterm id="I_indexterm11_d1e16733"
            significance="normal">
            <primary>plugins</primary>
            <secondary>Amazon EC2</secondary>
          </indexterm><indexterm id="I_indexterm11_d1e16738"
            significance="normal">
            <primary>Amazon EC2 plugin</primary>
          </indexterm> Amazon EC2 plugin. This plugin lets your Jenkins instance
        start slaves on the EC2 cloud on demand, and then kill them off when
        they are no longer needed. The plugin works both with Amazon EC2, and
        the <indexterm id="I_indexterm11_d1e16742" significance="normal">
            <primary>Ubuntu Enterprise Cloud</primary>
          </indexterm>Ubuntu Enterprise Cloud. We will be focusing on Amazon EC2
        here. Note that at the time of writing the Amazon EC2 Plugin only
        supported managing Unix EC2 images.</para>
        <para>Once you have installed the plugin and restarted Jenkins, go to
        the main Jenkins configuration screen and click on Add a New Cloud (see
        <xref linkend="fig-jenkins-ec2-cloud"/>). Choose Amazon EC2. You will
        need to provide your Amazon Access Key ID and Secret Access Key so that
        Jenkins can communicate with your Amazon EC2 account. You can access
        these in the Key Pairs screen of your EC2 dashboard.</para>
        <figure float="0" id="fig-jenkins-ec2-cloud">
          <title>Configuring an Amazon EC2 slave</title>
          <mediaobject id="I_mediaobject11_d1e16753">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_1119.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_1119.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will also need to provide your RSA private key. If you don’t
        have one, just go to the Key Pairs menu in the Security Credentials
        screen and create one. This will create a new key pair for you and
        download the private key. Keep the private key in a safe place (you will
        need it if you want to connect to your EC2 instances via SSH).</para>
        <para>In the advanced options, you can use the Instance Cap field to
        limit the number of EC2 instances that Jenkins will launch. This limit
        refers to the total number of active EC2 instances, not just the ones
        that Jenkins is currently running. This is useful as a safety measure,
        as you pay for the time your EC2 instances spend active.</para>
        <para>Once you have configured your overall EC2 connection, you need to
        define the machines you will work with. You do this by specifying the
        Amazon Mirror Image (AMI) identifier of the server image you would like
        to start. Amazon provides some starter images, and many more are
        available from the community, however not all images will work with EC2.
        At the time of writing, only certain images based on 32-bit Linux
        distributions work correctly.</para>
        <para>The predefined Amazon and public AMI images are useful starting
        points for your permanent virtual machines, but for the purposes of
        implementing a dynamic EC2-based cloud, you need to define your own AMI
        with the essential tools (Java, build tools, SCM configuration and so
        forth) preinstalled. Fortunately, this is a simple <phrase
        role="keep-together">process</phrase>: just start off with a generic AMI
        (preferably one compatible with the Jenkins EC2 plugin), and install
        everything your builds need. Make sure you use an EBS image. This way,
        changes you make to your server instance are persisted on an EBS volume
        so that you don't lose them when the server shuts down. Then create a
        new image by selecting the Create Image option in the Instances screen
        on the EC2 management console (see <xref
        linkend="fig-jenkins-ec2-create-image"/>). Make sure SSH is open from
        your build server’s IP address in the default security group on Amazon
        EC2. If you don’t do this, Jenkins will time out when it tries to start
        up a new slave node.</para>
        <para>Once you have prepared your image, you will be able to use it for
        your EC2 <phrase role="keep-together">configuration</phrase>.</para>
        <figure float="0" id="fig-jenkins-ec2-create-image">
          <title>Creating a new Amazon EC2 image</title>
          <mediaobject id="I_mediaobject11_d1e16779">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_1120.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_1120.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Now Jenkins will automatically create a new EC2 instance using
        this image when it needs to, and delete (or “terminate,” in Amazon
        terms) the instance once it is no longer needed. Alternatively, you can
        bring a new EC2 slave online manually from the Nodes screen using the
        Provision via EC2 button (see <xref
        linkend="fig-jenkins-amazon-cloud-manual"/>). This is a useful way to
        test your <indexterm class="endofrange" id="I_indexterm11_d1e16788"
            significance="normal" startref="ch11-cloud1">
            <primary/>
          </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16790"
            significance="normal" startref="ch11-cloud2">
            <primary/>
          </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16792"
            significance="normal" startref="ch11-cloud3">
            <primary/>
          </indexterm><indexterm class="endofrange" id="I_indexterm11_d1e16794"
            significance="normal" startref="ch11-amazon">
            <primary/>
          </indexterm>configuration.</para>
        <figure float="none" id="fig-jenkins-amazon-cloud-manual">
          <title>Bringing an Amazon EC2 slave online manually</title>
          <mediaobject id="I_mediaobject11_d1e16801">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_1121.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_1121.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="sect-distributed-builds-Using-the-Cloudbees">
    <title>Using the CloudBees DEV@cloud Service</title>
    <para>Another option you might consider is running your Jenkins instance
    using a dedicated cloud-based Jenkins architecture, such as the DEV@cloud
    service offered by CloudBees. CloudBees provides Jenkins as a service as
    well as various development services (like Sonar) around Jenkins. Using a
    dedicated Jenkins-specific service, there is no need to install (or manage)
    Jenkins masters or slaves on your machines. A master instance is
    automatically configured for you, and when you give a job to be built,
    CloudBees provisions a slave for you and takes it back when the job is
    done.</para>
    <para>How does this approach compare with the Amazon EC2-based architecture
    we discussed in the previous section? The main advantage of this approach is
    that there is much less work involved in managing your CI architecture
    hardware. Using the Amazon EC2 infrastructure means you don't need to worry
    about hardware, but you still need to configure and manage your server
    images yourself. The CloudBees DEV@cloud architecture is more of a
    high-level, CI-centric service, which provides not only a Jenkins server but
    also other related tools such as SVN or Git repositories, user management,
    and Sonar. In addition, the pricing model (pay by the minute) is arguably
    better suited to a cloud-based CI architecture than the pay-by-the-hour
    approach used by Amazon.</para>
    <para>Amazon EC2-based services are often, though not always, used in a
    “hybrid cloud” environment where you are offloading your jobs to the cloud,
    but a bulk of your builds remain in-house. The CloudBees DEV@cloud service
    is a public cloud solution where the whole build is happening on the cloud
    (though CloudBees does also offer a similar solution running on a private
    cloud).</para>
    <para>Creating a CloudBees DEV@cloud account is straightforward, and you can
    use a free one to experiment with the service (note that the free CloudBees
    service only has a limited set of plugins available; you will need to sign
    up for the professional version to use the full plugin range). To signup for
    CloudBees, go to the <ulink
    url="https://grandcentral.cloudbees.com/account/signup">signup page</ulink>.
    You will need to enter some relevant information such as a user name, email
    information, and an account name. Once signed up, you will have access to
    both DEV@cloud and RUN@cloud (essentially the entire CloudBees platform)
    services.</para>
    <para>At this point, you will have to subscribe to the DEV@cloud service.
    For our purposes, you can get away with simply choosing the “free” option.
    You will have to wait for a few minutes as CloudBees provisions a Jenkins
    master for you. The next step is to validate your account (this helps
    CloudBees prevent dummy accounts from running spurious jobs on the service).
    Click on the validation link, and enter your phone number. An automated
    incoming phone call will give your pin; enter the pin on the form. Once this
    is done, you can start running builds.</para>
    <para>Your first port of call when you connect will be the management
    console (called GrandCentral). Click on the “Take me to Jenkins” button to
    go to your brand new Jenkins master instance.</para>
    <para>From here, your interaction with DEV@cloud platform is exactly like in
    a standalone Jenkins. When you can create a new build job, just point to
    your existing source code repository and hit build. DEV@cloud will provision
    a slave for you and kick off a build (it may take a minute or two for the
    slave to be provisioned).</para>
  </sect1>
  <?dbfo-need height=”2in”?>
  <sect1 id="sect-distributed-builds-conclusion">
    <title>Conclusion</title>
    <para>In Continuous Integration, distributed builds are the key to a truly
    scalable architecture. Whether you need to be able to add extra build
    capacity at the drop of a hat, or your build patterns are subject to
    periodic spikes in demand, a distributed build architecture is an excellent
    way to absorb extra load. Distributed builds are also a great way to
    delegate specialized tasks, such as OS-specific web testing, to certain
    dedicated <phrase role="keep-together">machines</phrase>.</para>
    <para>Once you start down the path of distributed builds, cloud-based
    distributed build farms are a very logical extension. Putting your build
    servers on the cloud makes it easier and more convenient to scale your build
    infrastructure when required, as much as is <phrase
    role="keep-together">required</phrase>.</para>
  </sect1>
</chapter>
