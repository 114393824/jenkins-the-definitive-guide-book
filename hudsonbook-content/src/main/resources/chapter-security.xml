<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Securing Hudson</title>

  <sect1>
    <title>Introduction</title>

    <para><indexterm>
        <primary>security</primary>
      </indexterm>Hudson supports several security models, and can integrate
    with several user repositories. In smaller organizations, where developers
    work in close proximity, security on your Hudson machine may not be a
    large concern - you may simply want to prevent unidentified users
    tampering with your build job configurations. For larger organizations,
    with multiple teams, a stricter approach might be required, where only
    team members and system administrators are allowed to modify their build
    job configurations. And in situations where the Hudson server may be
    exposed to a broader audience, such as on an internal corporate website,
    or even on the internet, certain build jobs may be visible to all users
    whereas others will need to be hidden to unauthorized users. </para>

    <para>In this chapter, we will look at how to configure different security
    configurations in Hudson, for different environments and
    circumstances.</para>
  </sect1>

  <sect1>
    <title>Activating Security in Hudson</title>

    <para>Setting up basic security in Hudson is easy enough. Go to the main
    configuration page and check the 'Enable security' checkbox (see <xref
    linkend="fig-hudson-enabling-security" />). This will display a number of
    options, that we will investigate in detail in this chapter. The first
    section, '<command>Security Realm</command>', determines where Hudson will
    look for users during authentication, and includes options such as using
    users stored in an LDAP server, using the underlying Unix user accounts
    (assuming, of course, that Hudson is running on a Unix machine), or using
    a simple built-in user database managed by Hudson.</para>

    <para>The second section, '<command>Authorization</command>', determines
    what users can do once they are logged in. This ranges from simple options
    like 'Anyone can do anything' or 'Logged-in users can do anything', to
    more sophisticated role and project-based authorization policies.</para>

    <figure id="fig-hudson-enabling-security">
      <title>Enabling security in Hudson</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-enabling-security.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the remainder of this chapter, we will look at how to configure
    Hudson security for a number of common scenarios.</para>
  </sect1>

  <sect1 id="hudson-security-simple">
    <title>Simple Security in Hudson</title>

    <para>The most simple usable security model in Hudson involves allowing
    authenticated users to do anything, whereas non-authenticated users will
    just have a read-only view of the build jobs. This is great for small
    teams - developers can manage the build jobs, whereas other users
    (testers, BAs, project managers and so on) can view the build jobs as
    required to view the status of the project. Indeed, certain build jobs may
    be set up just for this purpose, displaying the results of automated
    acceptance tests or code quality metrics, for example.</para>

    <para>You can set up this sort of configuration is to choose 'Logged-in
    users can do anything' in the Authorization section. There are several
    ways that Hudson can authenticate users (see <xref
    linkend="sec-identifying-users" />), but for this example, we will be
    using the simplest option, which is to use Hudson's own built in database
    (see <xref linkend="hudson-users-internal" />).. This is the configuration
    illustrated in <xref linkend="fig-hudson-enabling-security" />.</para>

    <para>Make sure you tick the 'Allow users to sign up' option. This option
    will display a 'Sign up' link at the top of the screen to let users create
    their own user account as required (see <xref
    linkend="fig-hudson-user-signup" />). It is a good idea for developers to
    use their SCM username here: in this case, Hudson will be able to work out
    what users contributed to the SCM changes that triggered a particular
    build.</para>

    <para><figure id="fig-hudson-user-signup">
        <title>The Hudson Sign up page</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/hudson-user-signup.png" width="4.3in" />
          </imageobject>
        </mediaobject>
      </figure>This approach is obviously a little too simple for many
    situations - it is useful for small teams working in close proximity,
    where the aim is to know who's changes caused (or broke) a particular
    build, rather than to manage access in any more restrictive way.</para>
  </sect1>

  <sect1>
    <title>Role or Matrix-based security</title>

    <para>Letting signed-in users do anything is certainly flexible, and may
    be all you need for a small team. For larger or multiple teams, or cases
    where Hudson is being used outside the development environment, a more
    sophisticated approach is generally required. </para>

    <para>- Setting up an admin user</para>

    <para>- Help! I've locked myself out!</para>

    <para>- </para>
  </sect1>

  <sect1>
    <title>Project-based security</title>

    <para></para>
  </sect1>

  <sect1>
    <title id="sec-identifying-users">Identifying Hudson users</title>

    <para></para>

    <sect2 id="hudson-users-internal">
      <title>Using Hudson's built-in user database</title>

      <para>The easiest way to manage user accounts in Hudson is to use
      Hudson's internal user database. This is a good option if you want to
      keep things simple, as very little setup or configuration is required.
      Users who need to log on to the Hudson server can sign up and create an
      account for themselves, and, depending on the security model chosen, an
      administrator can then decide what these users are allowed to do.</para>

      <para>Hudson automatically adds all SCM users to this database whenever
      a change is committed to source code monitored by Hudson. These user
      names are used mainly to record who is responsible for each build job.
      You can view the list of currently known users by clicking on the
      'People' menu entry (see <xref linkend="fig-hudson-user-list" />). Here,
      you can visualize the users that Hudson currently knows about, and also
      see the last project they committed changes to. Note that this list
      contains all of the users who have ever committed changes to the
      projects that Hudson monitors - they may not be (and usually aren't) all
      active Hudson users who are able to log on to the Hudson server.</para>

      <para><figure id="fig-hudson-user-list">
          <title>You can also manage Hudson users from the Hudson
          configuration page</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/hudson-user-list.png" width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>If you click on a user in this list, Hudson takes you to a page
      displaying various details about this user, including the user's full
      name and the build jobs they have contributed to (see <xref
      linkend="fig-hudson-user-builds" />). From here, you can also modify or
      complete the details about this user, such as their password or email
      address.</para>

      <para><figure id="fig-hudson-user-builds">
          <title>You can also manage Hudson users from the Hudson
          configuration page</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/hudson-user-builds.png"
                         width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>A user appearing in this list cannot necessarily log on to Hudson.
      To be able to log on to Hudson, the user account needs to be set up with
      a password. There are essentially two ways to do this. If you have
      activated the 'Allow users to sign up' option, users can simply sign up
      with their SCM user name and provide their email address and a password
      (see <xref linkend="hudson-security-simple" />). Alternatively, you can
      activate a user by clicking on the 'Configure' menu option in the user
      details screen, and provide an email address and password yourself, as
      discussed earlier (see <xref linkend="fig-hudson-edit-user" />).</para>

      <para><figure id="fig-hudson-edit-user">
          <title>You can also manage Hudson users from the Hudson
          configuration page</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/hudson-edit-user.png" width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>It is worth noting that, if your email addresses are synchronized
      with your version control user names (for example, if you work at
      acme.com, and user 'joe' in your version control system has an email
      address of 'joe@acme.com'), you can get Hudson to derive the email
      address from a user name by adding a suffix that you configure in the
      'Email Notification' section (see <xref
      linkend="fig-security-email-config" />). If you have set up this sort of
      configuration, you don't need to specify the email address for new users
      unless it does not respect this convention.</para>

      <para><figure id="fig-security-email-config">
          <title>Synchronizing email addresses</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/security-email-config.png"
                         width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure>Another way to manage the current active users (those who can
      actually log on to Hudson) is by clicking on the 'Manage Users' in the
      main Hudson configuration page (see <xref
      linkend="fig-hudson-manage-users" />).</para>

      <para><figure id="fig-hudson-manage-users">
          <title>You can also manage Hudson users from the Hudson
          configuration page</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/hudson-manage-users.png"
                         width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure>From here, you can view and edit the users who can log in to
      Hudson (see <xref linkend="fig-hudson-user-database" />). This includes
      both users that have signed up manually (if this option has been
      activated) and SCM users that you have activated by configuring them
      with a password. You can also edit a user's details (for example
      modifying their email address or resetting their password), or even
      remove them from the list of active users. Doing this will not remove
      them from the overall user list (their name will still appear in the
      build history, for example), but they will no longer be able to log on
      to the Hudson server.</para>

      <para><figure id="fig-hudson-user-database">
          <title>The Hudson user database</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/hudson-user-database.png"
                         width="4.3in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para> </para>
    </sect2>

    <sect2>
      <title>Using an LDAP repository</title>

      <para></para>
    </sect2>

    <sect2>
      <title>Delegating to the servlet container</title>

      <para></para>
    </sect2>

    <sect2>
      <title>Using Unix users and groups</title>

      <para></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Keeping track of user actions</title>

    <para>In addition to configuring user accounts and access rights, it can
    also be useful to keep track of the individual actions that users
    performed: in other words, who did what to your server configuration. This
    sort of audit trail facility is even required in many
    organizations.</para>

    <para>There are two Hudson plugins that can help you do this. The Audit
    Trail Plugin keeps a record of user changes in a special log file. And the
    JobConfigHistory Plugin lets you keep a copy of previous versions of the
    various system and job configuration files that Hudson uses.</para>

    <para>The <command>Audit Trail Plugin</command> keeps track of the main
    user actions in a set of rolling log files. To set this up, go to the
    'Plugin Manager' page and select the 'Audit Trail Plugin' in the list of
    available plugins. Then, as usual, click on Install and restart Hudson
    once the plugin has been downloaded.</para>

    <para>You can set up the audit trail configuration in the Audit Trail
    section of the main Hudson configuration page (see <xref
    linkend="fig-hudson-security-audit-trail" />). The most important field is
    the Log Location, which is where you indicate the directory in which the
    log files are to be written. The audit trail is designed to produce
    system-style log files, which are often placed in a special system
    directory such as <filename>/var/log</filename>. You can also configure
    the number of log files to be maintained, and the (approximate) maximum
    size of each file. The simplest option is to provide an absolute path
    (such as <filename>/var/log/hudson.log</filename>), in which case Hudson
    will write to log files with names like
    <filename>/var/log/hudson.log.1</filename>,
    <filename>/var/log/hudson.log.2</filename> and so forth. Of course, you
    need to ensure that the user running your Hudson instance is allowed to
    write to this directory.</para>

    <para><figure id="fig-hudson-security-audit-trail">
        <title>Enabling security in Hudson</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/hudson-security-audit-trail.png"
                       width="4.3in" />
          </imageobject>
        </mediaobject>
      </figure>You can also use the format defined in the Java logging <ulink
    url="http://download.oracle.com/javase/1.5.0/docs/api/java/util/logging/FileHandler.html">FileHandler</ulink>
    class for more control over the generated log files. In this format, you
    can insert variables such as '%h', for the current user's home directory,
    and '%t', for the system temporary directory, to build a more dynamic file
    path. </para>

    <para>By default, the details recorded in the audit logs are fairly sparse
    - they effectively record key actions performed, such as creating,
    modifying or deleting job configurations or views, and the user who
    performed the actions. The log also shows how individual build jobs
    started. An extract of the default log is shown here:</para>

    <para><programlisting>Dec 27, 2010 9:16:08 AM /job/game-of-life/configSubmit by johnsmart
Dec 27, 2010 9:16:42 AM /view/All/createItem by johnsmart
Dec 27, 2010 9:16:57 AM /job/game-of-life-prod-deployment/doDelete by johnsmart
Dec 27, 2010 9:24:38 AM job/game-of-life/ #177 Started by user johnsmart
Dec 27, 2010 9:25:57 AM job/game-of-life-acceptance-tests/ #107 Started by upstream project 
"game-of-life" build number 177
Dec 27, 2010 9:25:58 AM job/game-of-life-functional-tests/ #7 Started by upstream project 
"game-of-life" build number 177
Dec 27, 2010 9:28:15 AM /configSubmit by johnsmart</programlisting>This audit
    trail is certainly useful, especially from a system administration
    perspective. However, it doesn't provide any information about the exact
    changes that were made the the Hudson configuration. Nevertheless, one of
    the most important reasons to keep track of user actions in Hudson is to
    keep tabs on exactly what changes were made to build job configurations.
    When something goes wrong, it can be useful to know what changes were done
    and so be able to undo them. The <command>JobConfigHistory
    Plugin</command> lets you do just this.</para>

    <para>The JobConfigHistory plugin is a powerful tool that lets you keep a
    full history of changes made to both job and system configuration files.
    You install it from the Plugin Manager in the usual way. Once installed,
    you can fine-tune the job history configuration in the <command>Manage
    Hudson</command> screen (see figure <xref
    linkend="fig-hudson-security-confighistory-setup" />). </para>

    <para><figure id="fig-hudson-security-confighistory-setup">
        <title>Setting up Job Configuration History</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/hudson-security-confighistory-setup.png"
                       width="4.3in" />
          </imageobject>
        </mediaobject>
      </figure>Here, you can configure a number of useful non-standard
    options. In particular, you should specify a directory where Hudson can
    store configuration history, in the 'Root history folder' field. This is
    the directory where Hudson will store a record of both system-related and
    job-related configuration changes. It can be either an absolute directory
    (such as '/var/hudson/history'), or a relative directory, calculated from
    the Hudson home directory (see <xref
    linkend="sec-hudson-home-directory" />). If you don't do this, job
    configuration history will be stored with the jobs, and will be lost if
    you delete a job. </para>

    <para>There are a few other useful options in the 'Advanced' section. The
    'Save system configuration changes' checkbox lets you keep track of
    system-wide configuration updates, and not just job-specific ones. And the
    'Do not save duplicate history' checkbox allows you to avoid recording
    configuration updates if no actual changes have been made. If not, a new
    version of the configuration will be recorded, even if you have only
    pressed the 'Save' button without making any changes. Hudson can also
    cause this to happen internally - for example, system configuration
    settings are all saved whenever the main configuration page is saved, even
    if no changes have been made. </para>

    <para>Once you have set up this plugin, you can access the configuration
    history both for the whole server, including system configuration updates,
    as well as the changes made to the configuration of each project. In both
    cases, you can view these changes by clicking on the 'Job Config History'
    icon to the right of the screen. Clicking on this icon from the Hudson
    dashboard will display a view of all of your configuration history,
    including job changes and system-wide changes (see figure <xref
    linkend="fig-hudson-jobconfig-global-history" />). </para>

    <para><figure id="fig-hudson-jobconfig-global-history">
        <title>Setting up Job Configuration History</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/hudson-jobconfig-global-history.png"
                       width="4.3in" />
          </imageobject>
        </mediaobject>
      </figure>If you click on a system-wide change (indicated by the
    "(system)" suffix in the list), Hudson takes you to a screen that lists
    all of the versions of that file, and allows you to view the differences
    between the different versions (see figure <xref
    linkend="fig-hudson-jobconfig-config-history" />). The differences are
    displayed as 'diff' files, which is not particularly readable in itself.
    However, for small changes, the readable XML format of most of the Hudson
    configuration files makes this sufficient to understand what changes were
    made. </para>

    <para><figure id="fig-hudson-jobconfig-config-history">
        <title>Setting up Job Configuration History</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/hudson-jobconfig-config-history.png"
                       width="4.3in" />
          </imageobject>
        </mediaobject>
      </figure>The JobConfigHistory plugin is a powerful tool. However, at the
    time of writing, it does have its limits. As mentioned, the plugin only
    displays the differences in raw 'diff' format, and you can't restore a
    previous version of a configuration file (those doing this out of context
    could be dangerous in some circumstances, particularly for system-wide
    configuration files). Nevertheless, it gives a very clear picture of the
    changes that have been made, both to your build jobs and to your system
    configuration.</para>
  </sect1>

  <sect1>
    <title>Conclusion</title>

    <para>TODO</para>
  </sect1>
</chapter>
