<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuring your Hudson server</title>

  <section>
    <title>Introduction</title>

    <para><indexterm>
        <primary>configuration</primary>
      </indexterm>Before you can start creating your build jobs in Hudson, you
    need to do a little configuration, to ensure that your Hudson server works
    smoothly in your particular environment. Hudson is highly configurable,
    and, although most options are provided with sensible default values, or
    are able to find the right tools build tools the system path and
    environment variables, it is always a good idea to know exactly what your
    build server is doing.</para>

    <para>Hudson is globally very easy to configure. The administration
    screens are intuitive, and the contextual online help (the blue question
    mark icons next to each field) is detailed and precise. In this chapter,
    we will look at how to configure your server in detail, including how to
    configure Hudson to use different versions of Java, build tools such as
    Ant and Maven, and SCM tools such as CVS and Subversion.</para>
  </section>

  <section>
    <title>The configuration dashboard - the Manage Hudson screen</title>

    <para>In Hudson, you manage virtually all aspects of system configuration
    in the 'Manage Hudson' screen (see <xref linkend="manage-hudson" />). You
    can also get to this screen directly from anywhere in the application by
    typing 'manage' in the Hudson search box. This screen changes depending on
    what plugins you install, so don't be surprised if you see more that what
    we show here.</para>

    <para>This screen lets you configure different aspects of your Hudson
    server (see <xref linkend="fig-hudson-manage-hudson" />).</para>

    <para><figure id="fig-hudson-manage-hudson">
        <title>You configure your Hudson installation in the 'Manage Hudson'
        screen</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/hudson-manage-hudson.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/hudson-manage-hudson.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure>Each link on this page takes you to a dedicated configuration
    screen, where you can manage different parts of the Hudson server. Some of
    the more interesting options are discussed here:<variablelist>
        <varlistentry>
          <term>Configure System</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Configure System</secondary>
              </indexterm>This is where you manage paths to the various tools
            you use in your builds, such as JDKs, and versions of Ant and
            Maven, as well as security options, email servers, and other
            system-wide configuration details. Many of the plugins that you
            install will also need to be configured here - Hudson will add the
            fields dynamically when you install the plugins.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Reload Configuration from Disk</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Reload Configuration from Disk</secondary>
              </indexterm>As we saw in the previous chapter, Hudson stores all
            its system and build job configuration details as XML files stored
            in the Hudson home directory (see <xref
            linkend="sec-hudson-home-directory" />). It also stores all of the
            build history in the same directory. If you are migrating build
            jobs from one Hudson instance to another, or archiving old build
            jobs, you will need to add or remove the corresponding build job
            directories to Hudson's <filename>builds</filename> directory. You
            don't need to take Hudson offline to do this - you can simply use
            the 'Reload Configuration from Disk' to reload the Hudson system
            and build job configurations directly. This process can be a
            little slow if there is a lot of build history, as Hudson loads
            not only the build configurations but also all of the historical
            data as well.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Manage Plugins</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Manage Plugins</secondary>
              </indexterm>One of the best features of Hudson is it's
            extensible architecture. There is a large ecosystem of third-party
            open source plugins available, enabling you to add extra features
            to your build server, from support for different SCM tools such as
            Git, Mercurial or ClearCase, to code quality and code coverage
            metrics reporting. We will be looking at many of the more popular
            and useful plugins throughout this book. Plugins can be installed,
            updated and removed through the 'Manage Plugins' screen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>System Information</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>System Information</secondary>
              </indexterm>This screen displays a list of all the current Java
            system properties and system environment variables. Here, you can
            check exactly what version of Java Hudson is running in, what user
            it is running under, and so forth. You can also check that Hudson
            is using the correct environmnet variable settings. It's main use
            is for trouble-shooting, so that you can make sure that your
            server is running with the system properties and variables you
            think it is.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>System Log</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>System Log</secondary>
              </indexterm>The System Log screen is a convenient way to view
            the Hudson log files in real time. Again, the main use of this
            screen is for troubleshooting.</para>

            <para>You can also subscribe to RSS feeds for various levels of
            log messages. For example, as a Hudson administrator, you might
            want to subscribe to all the ERROR and WARNING log
            messages.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Load Statistics</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Load Statistics</secondary>
              </indexterm>Hudson keeps track of how busy your server is in
            terms of the number of concurrent builds and the length of the
            build queue (which gives an idea of how long your builds need to
            wait before being executed). These statistics can give you an idea
            of whether you need to add extra capacity or extra build nodes to
            your infrastructure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Script Console</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Script Console</secondary>
              </indexterm>This screen lets you run Groovy scripts on the
            server. It is useful for advanced trouble-shooting: since it
            requires a strong knowledge of the internal Hudson architecture,
            it is mainly useful for plugin developers and the like.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Manage Nodes</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Manage Nodes</secondary>
              </indexterm>Hudson handles parallel and distributed builds well.
            In this screen, you can configure how many builds you want Hudson
            to run simultaneously, and, if you are using distributed builds,
            set up build nodes. A build node is another machine that Hudson
            can use to execute its builds. We will look at how to configure
            distributed builds in detail in <xref
            linkend="chapter-distributed-builds" />.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prepare for Shutdown</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>Prepare for Shutdown</secondary>
              </indexterm>If you need to shutdown Hudson, or the server Hudson
            is running on, it is best not to do so when a build is being
            executed. To shut down Hudson cleanly, you can use the 'Prepare
            for Shutdown' link, which prevents any new builds from being
            started. Eventually, when all of the current builds have finished,
            you will be able to shut down Hudson cleanly.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>We will come back to some of these features in more detail later on
    in the book. In the following sections, we will focus on how to configure
    the most important Hudson system parameters.</para>
  </section>

  <section>
    <title>Configuring the system environment</title>

    <para>The most important Hudson administration page is the 'Configure
    System' screen (<xref linkend="configure-system" />). Here, you set up
    most of the fundamental tools that Hudson needs to do its daily work. The
    default screen contains a number of sections, each relating to a different
    configuration area or external tool. In addition, when you install
    plugins, their system-wide configuration is also often done in this
    screen.</para>

    <para><figure id="fig-configure-system">
        <title>System configuration in Hudson</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/hudson-system-configuration.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/hudson-system-configuration.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure>The 'Configure System' screen lets you define global parameters
    for your Hudson installation, as well as external tools required for your
    build process. The first part of this screen lets you define some general
    system-wide parameters.</para>

    <para>The Hudson home directory is displayed, for reference. This way, you
    can check at a glance that you are working with the home directory that
    you expect. Remember, you can change this directory by setting the
    <filename>HUDSON_HOME</filename> environment variable in your environment
    (see <xref linkend="sec-hudson-home-directory" os="" />).</para>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>System Message</secondary>
      </indexterm>The <command>System Message</command> field is useful for
    several purposes. This text is displayed at the top of your Hudson home
    page. You can use HTML tags, so it is a simple way to customize your build
    server by including the name of your server and a short blurb describing
    its purpose. You can also use it to display messages for all users, such
    as to announce system outages and so on.</para>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>Quiet Period</secondary>
      </indexterm>The <command>Quiet Period</command> is useful for SCM tools
    like CVS that commit file changes one by one, rather than grouped together
    in a single atomic transaction. Normally, Hudson will trigger a build as
    soon as it detects a change in the source repository. However, this
    doesn't suit all environments. If you are using an SCM tool like CVS, you
    don't want Hudson kicking off a build as soon as the first change comes
    in, as the repository will be in an inconsistent state until all of the
    changes have been committed. You can use the <command>Quiet
    Period</command> field to avoid issues like this. If you set a value here,
    Hudson will wait until no changes have been detected for the specified
    number of seconds before triggering the build. This helps to ensure that
    all of the changes have been committed and the repository is in a stable
    state before starting the build.</para>

    <para>For most modern version control systems, such as Subversion or
    Mercurial, commits are atomic. This means that changes in multiple files
    are submitted to the repository as a single unit, and the source code on
    the repository is guaranteed to be in a stable state at all times.
    However, some teams still use an approach where one logical change set is
    delivered in several commit operations. In this case, you can use the
    <command>Quiet Period</command> field to ensure that the build always uses
    a stable source code version.</para>

    <para>The <command>Quiet Period</command> value specified here is in fact
    the default system-wide value - if required, you can redefine this value
    individually for each project.</para>

    <para>You also manage user accounts and user rights here. By default,
    Hudson lets any user do anything. If you want a more restrictive approach,
    you will need to activate Hudson security here using the <command>Enable
    security</command> field. There are many ways to do this, and we look at
    this aspect of Hudson in <xref linkend="chapter-security" />.</para>
  </section>

  <section>
    <title>Configuring Global Properties</title>

    <para>TODO (seems to be buggy at time of writing)</para>
  </section>

  <section>
    <title>Configuring your JDKs</title>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>JDKs</secondary>
      </indexterm>If you are working with Hudson, you are most likely working
    with Java projects.</para>

    <para>By default, Hudson will build Java applications using the version of
    Java it finds on the system path, which is usually the version that Hudson
    itself is running under. However, for a production build server, you will
    probably want more control than this. For example, you may be running your
    Hudson server under Java 6, for performance reasons. However, your
    production server might be running under Java 5 or even Java 1.4. Large
    organisations are often cautious when it comes to upgrading Java versions
    in their production environments, and some of the more heavy-weight
    application servers on the market are notoriously slow to be certified
    with the latest JDKs.</para>

    <para>In any case, it is always a wise practice to build your application
    using a version of Java that is close to the one running on your
    production server. While an application compiled with Java 1.4 will run
    fine under Java 6, the inverse is not always true. Hudson lets you
    configure and use as many versions of Java as you want (see <xref
    linkend="fig-configure-jdk" />). Just add an appropriate name and
    <filename>JAVA_HOME</filename> path for each JDK you want to use in the
    <command>JDKs</command> section of the <command>Configure System</command>
    screen. Although you need to type the <filename>JAVA_HOME</filename> path
    manually, Hudson will check in real time both that the directory exists
    and that it looks like a valid JDK directory.</para>

    <para><figure id="fig-configure-jdk">
        <title>System configuration in Hudson</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/configuration-jdk.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/configuration-jdk.pdf" scalefit="0"
                       width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure>You can provide a path to an existing JDK, or you can ask
    Hudson to install a JDK for you.</para>

    <para>This second option is a particularly convenient way to set up a
    build server (see <xref linkend="fig-configure-jdk-installers" />). The
    first time a build needs to use this JDK, Hudson will download and install
    the specified version of Java into the <filename>tools</filename>
    directory in Hudson home directory. By default, Hudson proposes to
    download the JDK from the Sun website. Alternatively, you can provide the
    URL of the JDK binaries (either in the form of a ZIP or a GZip-compressed
    TAR file) - this lets you provide standard installations on a local
    server, for example.</para>

    <para><figure floatstyle="" id="fig-configure-jdk-installers">
        <title>Installing a JDK automatically</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/configuration-jdk-installer.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/configuration-jdk-installer.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure>The automatic installer will not work in all environments (if
    it can't find or identify your operating system to its satisfaction, for
    example, the installation will fail), but it is a useful way to set up new
    build servers or distributed build machines in a consistent manner.</para>
  </section>

  <section>
    <title>Configuring your build tools</title>

    <para>Build tools are the bread-and-butter of any build server, and Hudson
    is no exception. Out-of-the-box, Hudson supports three principal build
    tools: Ant, Maven, and the basic shell-script. Using Hudson plugins, you
    can also add support for other build tools such as Gant.</para>

    <section>
      <title>Maven</title>

      <para><indexterm>
          <primary>configuration</primary>

          <secondary>Maven</secondary>
        </indexterm><indexterm>
          <primary>Maven</primary>
        </indexterm>Maven is a high-level build scripting framework for Java
      that uses notions such as a standard directory structure, Convention
      over Configuration, and Declarative Dependency Management to simplify a
      lot of the low level scripting that you find in a typical Ant build
      script. In Maven, your project uses a standard, well-defined build life
      cycle - compile, test, package, deploy, and so forth. Each life cycle
      phase is associated with a Maven plugin. The various Maven plugins uses
      the standard directory structure to carry out these tasks with a minimum
      of intervention on your part. You can also extend Maven by overriding
      the default plugin configurations or by invoking additional
      plugins.</para>

      <para>Hudson provides excellent support for Maven, and has a good
      understanding of Maven project structures and dependencies. You can
      either get Hudson to install a specific version of Hudson automatically
      (as we are doing with Maven 3 in the example), or provide a path to a
      local Maven installation (see <xref linkend="fig-configure-maven"
      os="" />). You can configure as many versions of Maven for your build
      projects as you want, and use different versions of Maven for different
      projects.</para>

      <para><figure floatstyle="" id="fig-configure-maven">
          <title>Configuring Maven in Hudson</title>

          <mediaobject>
            <imageobject role="web" security="">
              <imagedata fileref="figs/web/configuration-maven.png" />
            </imageobject>

            <imageobject role="print" security="">
              <imagedata align="center"
                         fileref="figs/print/configuration-maven.pdf"
                         scalefit="0" width="100%" wordsize="" />
            </imageobject>
          </mediaobject>
        </figure>If you tick the 'Install automatically' check box, Hudson
      with download and install the requested version of Maven for you. You
      can either ask Hudson to download Maven directly from the Apache site,
      or from a (presumably local) URL of your choice. This is an excellent
      choice when you are using distributed builds, and, since Maven is
      cross-platform, it will work on any machine. You don't need to install
      Maven explicitly on each build machine - the first time a build machine
      needs to use Maven, it will download a copy and install it to the
      <filename>tools</filename> directory in the Hudson home
      directory.</para>

      <para>TODO: More about using the Installers</para>

      <para>Sometimes you need to pass Java system options to your Maven build
      process. For instance it is often useful to give Maven a bit of extra
      memory for heavy-weight tasks such as code coverage or site generation.
      Maven lets you do this by setting the <code>MAVEN_OPTS</code> variable.
      In Hudson, you can set a system-wide default value, to be used across
      all projects (see <xref linkend="fig-configure-mvnopts" />). This comes
      in handy if you want to use certain standard memory options (for
      example) across all projects, without having to set it up in each
      project by hand.<figure floatstyle="" id="fig-configure-mvnopts">
          <title>Configuring system-wide MVN_OPTS</title>

          <mediaobject>
            <imageobject role="web" security="">
              <imagedata fileref="figs/web/configuration-mvnops.png" />
            </imageobject>

            <imageobject role="print" security="">
              <imagedata align="center"
                         fileref="figs/print/configuration-mvnops.pdf"
                         scalefit="0" width="100%" wordsize="" />
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section>
      <title>Ant</title>

      <para><indexterm>
          <primary>configuration</primary>

          <secondary>Ant</secondary>
        </indexterm><indexterm>
          <primary>Ant</primary>
        </indexterm>Ant is a widely-used and very well-known build scripting
      language for Java. It is a flexible, extensible, relatively low-level
      scripting language, used in a large number of open source projects. An
      Ant build script (typically called <filename>build.xml</filename>) is
      made up of a number of <emphasis>targets</emphasis>. Each target
      performs a particular job in the build process, such as compiling your
      code or running your unit tests. It does so by executing
      <emphasis>tasks</emphasis>, which carry out a specific part of the build
      job, such as invoking <command>javac</command> to compile your code, or
      creating a new directory. Targets also have
      <emphasis>dependencies</emphasis>, indicating the order in which your
      build tasks need to be executed. For example, you need to compile your
      code before you can run your unit tests.</para>

      <para>Hudson provides excellent build-in support for Ant - you can
      invoke Ant targets from your build job, providing properties to
      customise the process as required. We look at how to do this in detail
      in <xref linkend="freestyle-builds" />.</para>

      <para>If Ant is available on the system path, Hudson will find it.
      However, if you want to know precisely what version of Ant you are
      using, or if you need to be able to use several different versions of
      Ant on different build jobs, you can configure as many installations of
      Ant as required (see <xref linkend="fig-configure-ant" />). Just provide
      a name and installation directory for each version of Ant in the
      <command>Ant</command> section of the <command>Configure
      System</command> screen. You will then be able to choose what version of
      Ant you want to use for each project.</para>

      <para>If you tick the 'Install automatically' check box, Hudson will
      download and install Ant into the <filename>tools</filename> directory
      of your Hudson home directory, just like it does for Maven. It will
      download an Ant installation the first time a build job needs to use
      Ant, either from the Apache web site or from a local URL. Again, this is
      a great way to standardize build servers and make it easier to add new
      distributed build servers to an existing infrastructure.</para>

      <para><figure floatstyle="" id="fig-configure-ant">
          <title>Configuring Ant in Hudson</title>

          <mediaobject>
            <imageobject role="web" security="">
              <imagedata fileref="figs/web/configuration-ant.png" />
            </imageobject>

            <imageobject role="print" security="">
              <imagedata align="center"
                         fileref="figs/print/configuration-ant.pdf"
                         scalefit="0" width="100%" wordsize="" />
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section>
      <title>Shell scripting language</title>

      <para>If you are running your build server on Unix or Linux, Hudson lets
      you insert shell scripts into your build jobs. This is handy for
      performing low-level, OS-related tasks that you don't want to do in Ant
      or Maven. In the <command>Shell</command> section, you define the
      default shell that will be used when executing these shell scripts. By
      default, this is <filename>/bin/sh</filename>, but there are times you
      may want to modify this to another command interpreter such as
      <filename>bash</filename> or <filename>Perl</filename>.</para>

      <para>In Windows, the <command>Shell</command> section does not apply -
      you use Windows batch scripting instead. So, on a Windows build server,
      you should leave this field blank.</para>
    </section>
  </section>

  <section>
    <title>Configuring your version control tools</title>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>CVS</secondary>
      </indexterm>Hudson supports CVS and Subversion out-of-the-box. Other
    version control systems are supported by plugins.</para>

    <section>
      <title>Configuring Subversion</title>

      <para><indexterm>
          <primary>configuration</primary>

          <secondary>Subversion</secondary>
        </indexterm>Subversion needs no special configuration, since Hudson
      uses native Java libraries to interact with Subversion repositories. If
      you need to authenticate to connect to a repository, Hudson will prompt
      you when you enter the Subversion URL in the build job
      configuration.</para>
    </section>

    <section>
      <title>Configuring CVS</title>

      <para>CVS needs little or no configuration. By default, Hudson will look
      for tools like CVS on the system path, though you can provide the path
      explicitly if it isn't on the system path. CVS keeps login and password
      details in a file called <filename>.cvspass</filename>, which is usually
      in your home directory. If this is not the case, you can provide a path
      where Hudson can find this file.</para>
    </section>

    <section>
      <title>Configuring Git</title>

      <para></para>
    </section>

    <section>
      <title>Configuring Mercurial</title>

      <para></para>
    </section>
  </section>

  <section id="sect-configuration-email">
    <title>Configuring the mail server</title>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>Email</secondary>
      </indexterm>The last of the basic configuration options you need to set
    up is the email server configuration. Email is Hudson's more fundamental
    notification technique - when a build fails, it will send an email message
    to the developer who committed the changes, and optionally to other team
    members as well. So Hudson needs you to (see <xref
    linkend="fig-configure-email" />).</para>

    <para>The System Admin email address is the address from which the
    notification messages are sent. You can also use this field to check the
    email setup - if you click on the 'Test configuration' button, Hudson will
    send a test email to this address.</para>

    <para>In many organizations, you can derive a user's email address from
    their login by adding the organization domain name. For example, at ACME,
    user John Smith will have a login of 'jsmith' and an email address of
    'jsmith@acme.com'. If this extends to your version control system, Hudson
    can save you a lot of configuration effort in this area. In the previous
    example, you could simply specify the default user e-mail suffix of
    'acme.com' and Hudson will figure out the rest.</para>

    <para>You also need to provide a proper base URL for your Hudson server
    (one that does not use localhost). Hudson uses this URL in the email
    notifications so that users can go directly from the email to the build
    failure screen on Hudson.</para>

    <para><figure floatstyle="" id="fig-configure-email">
        <title>Configuring an Email server in Hudson</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/configuration-email.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/configuration-email.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure>Hudson also provides for more sophisticated email
    configuration, using more advanced features such as SMTP authentication
    and SSL. If this is your case, click on the 'Advanced' button to configure
    these options.</para>

    <para><indexterm>
        <primary>Gmail</primary>
      </indexterm>For example, many organizations use Google Apps for their
    email services. You can configure Hudson to work with the Gmail service as
    shown in <xref linkend="fig-configure-gmail" os="" />. All you need to do
    in this case is to use the GMail SMTP server, and provide your Gmail
    username and password in the SMTP Authentication (you also need to use SSL
    and the non-standard port of 465).</para>

    <para><figure floatstyle="" id="fig-configure-gmail">
        <title>Configuring an Email server in Hudson to use a Google Apps
        domain</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/configuration-gmail.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/configuration-gmail.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure></para>
  </section>

  <section id="sect-configuration-proxies">
    <title>Configuring a proxy</title>

    <para><indexterm>
        <primary>proxy</primary>
      </indexterm>In most enterprise environments, your Hudson server will be
    situated behind a firewall, and will not have direct access to the
    internet. Hudson needs internet access to download plugins and updates,
    and also to install tools such as the JDK, Ant and Maven from remote
    sites. If you need to go through an HTTP proxy server to get to the
    internet, you can configure the connection details (the server and port,
    and if required the username and password) in the 'Advanced' tab on the
    'Plugin Manager' screen (see <xref linkend="fig-configuration-proxy" />).
    </para>

    <para>If your proxy is using Microsoft's <indexterm>
        <primary>NTLM</primary>

        <secondary>proxy authentication</secondary>
      </indexterm>NTLM authentication scheme, then you will need to provide a
    domain name as well as a username. You can place both in the 'User name'
    field: just enter the domain name, followed by a back-slash ('\'),
    followed by the username, such as "MyDomain\Joe Bloggs".</para>

    <para><figure floatstyle="" id="fig-configuration-proxy">
        <title>Configuring an Email server in Hudson to use a Google Apps
        domain</title>

        <mediaobject>
          <imageobject role="web" security="">
            <imagedata fileref="figs/web/configuration-proxy.png" />
          </imageobject>

          <imageobject role="print" security="">
            <imagedata align="center"
                       fileref="figs/print/configuration-proxy.pdf"
                       scalefit="0" width="100%" wordsize="" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Finally, if you are setting up Proxy access on your Hudson build
    server, remember that all of the other tools running on this server will
    need to know about the proxy as well. In particular, this may include
    tools such as Subversion (if you are accessing an external repository) and
    Maven (if you are not using an Enterprise Repository Manager).</para>
  </section>

  <section>
    <title>Allocating memory for your build jobs</title>

    <para>TODO</para>
  </section>

  <section>
    <title>Conclusion</title>

    <para>You don't need a great deal of configuration to get started with
    Hudson. The configuration that is required is fairly straight-forward, and
    is centralised in the <command>Configure System</command> screen. Once
    this is done, you are ready to create your first Hudson build job!</para>
  </section>
</chapter>
