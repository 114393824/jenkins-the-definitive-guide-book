<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<preface id="preface">
  <title>`Preface</title>

  <section>
    <title>Audience</title>

    <para>This book is aimed at at technical readers, though no prior
    experience with Continuous Integration is assumed. You may be new to
    Continuous Integration, and would like to learn about the benefits it can
    bring to your development team. Or, you might be using Jenkins or Hudson
    already, and want to discover how you can take your Continuous Integration
    infrastructure further.</para>

    <para>Much of the book discusses Jenkins in the context of Java or
    JVM-related projects. Nevertheless, even if you are using another
    technology stack, this book should give you a good grounding in Continuous
    Integration with Jenkins. We discuss how to build projects using several
    non-Java technologies, including as Grails, Ruby on Rails and .NET. In
    addition, many topics, such as general configuration, notification,
    distributed builds and security are applicable no matter what language you
    are using.</para>
  </section>

  <section>
    <title>Book layout</title>

    <para>Continuous Integration is like a lot of things: the more you put in,
    the more value you will get out. While even a basic Continuous Integration
    setup will produce positive improvements in your team process, there are
    significant advantages to gradually assimilating and implementing some of
    the more advanced techniques as well. To this end, this book is organized
    as a progressive trek into the world of Continuous Integration with
    Jenkins, going from simple to more advanced. In the first chapter, we
    start off with a sweeping overview of what Jenkins is all about, in the
    form of a high level guided tour. From there, we progress into how to
    install and configure your Jenkins server and how to set up basic build
    jobs. Once we have mastered the basics, we will delve into more advanced
    topics, including automated testing practices, security, more advanced
    notification techniques, and measuring and reporting on code quality
    metrics. Next </para>
  </section>

  <section id="preface-sect-fontConventions">
    <title> Font Conventions</title>

    <para>This book follows certain conventions for font usage. Understanding
    these conventions up-front makes it easier to use this book.</para>

    <variablelist>
      <varlistentry>
        <term><emphasis role="italic">Italic</emphasis></term>

        <listitem>
          <para>Used for filenames, file extensions, URLs, application names,
          emphasis, and new terms when they are first introduced.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><literal moreinfo="none">Constant width</literal></term>

        <listitem>
          <para>Used for Java class names, methods, variables, properties,
          data types, database elements, and snippets of code that appear in
          text.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><emphasis role="bold"> <literal moreinfo="none">Constant width
        bold</literal> </emphasis></term>

        <listitem>
          <para>Used for commands you enter at the command line and to
          highlight new code inserted in a running example.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><emphasis role="italic"> <literal moreinfo="none">Constant width
        italic</literal> </emphasis></term>

        <listitem>
          <para>Used to annotate output.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Command-line conventions</title>

    <para>From time to time, this book discusses command-line instructions.
    When we do, output produced by the console (e.g. command prompts or screen
    output) is displayed in normal characters, and commands (what you type)
    are written in <command>bold</command>. For example: <screen>$ <command>ls -al</command>
total 168
drwxr-xr-x   16 johnsmart  staff    544 21 Jan 07:20 .
drwxr-xr-x+  85 johnsmart  staff   2890 21 Jan 07:10 ..
-rw-r--r--    1 johnsmart  staff     30 26 May  2009 .owner
-rw-r--r--@   1 johnsmart  staff   1813 16 Apr  2009 config.xml
drwxr-xr-x  181 johnsmart  staff   6154 26 May  2009 fingerprints
drwxr-xr-x   17 johnsmart  staff    578 16 Apr  2009 jobs
drwxr-xr-x    3 johnsmart  staff    102 15 Apr  2009 log
drwxr-xr-x   63 johnsmart  staff   2142 26 May  2009 plugins
-rw-r--r--    1 johnsmart  staff     46 26 May  2009 queue.xml
-rw-r--r--@   1 johnsmart  staff     64 13 Nov  2008 secret.key
-rw-r--r--    1 johnsmart  staff  51568 26 May  2009 update-center.json
drwxr-xr-x    3 johnsmart  staff    102 26 May  2009 updates
drwxr-xr-x    3 johnsmart  staff    102 15 Apr  2009 userContent
drwxr-xr-x   12 johnsmart  staff    408 17 Feb  2009 users
drwxr-xr-x   28 johnsmart  staff    952 26 May  2009 war</screen></para>

    <para>Where necessary, the backslash character at the end of the line is
    used to indicate a line-break: you can type this all on one line (without
    the backslash) if you prefer. Don't forget to ignore the '&gt;' character
    at the start of the subsequent lines - it's a unix prompt
    character:<screen>$ <command>wget -O - http://jenkins-ci.org/debian/jenkins-ci.org.key \
</command>&gt; <command>| sudo apt-key add -</command></screen>For
    consistency, unless we are discussing a Windows-specific issue, we will
    use Unix-style command prompts (the dollar sign, '$'), as shown
    here:</para>

    <para><screen>$ <command>java -jar jenkins.war</command></screen></para>

    <para>or</para>

    <para><screen>$ <command>svn list svn://localhost</command></screen></para>

    <para>However, unless we say otherwise, Windows users can safely use these
    commands from the Windows command console:<screen>C:\Documents and Settings\Owner&gt; <command>java -jar jenkins.war</command></screen></para>

    <para>or</para>

    <screen>C:\Documents and Settings\Owner&gt; <command>svn list svn://localhost</command></screen>
  </section>

  <section>
    <title>Contributors</title>

    <para>The following people generously contributed their time, knowledge
    and writing skill to make this a better book:</para>

    <itemizedlist>
      <listitem>
        <para><command>Evgeny Goldin</command> is a Russian-born software
        engineer living in Israel. He is a lead developer at Thomson Reuters
        where he's responsible for a number of activities, some of which are
        directly related to Maven, Groovy and build tools such as Artifactory
        and Hudson. He has a vast experience in a range of technologies,
        including Perl, Java, JavaScript and Groovy. Build tools and dynamic
        languages are Evgeny's favorite subjects about which he often writes,
        presents or blogs. These days he is writing for GroovyMag, Methods
        &amp; Tools and runs two open-source projects of his own:
        "Maven-plugins" (evgeny-goldin.com/wiki/Maven-plugins) and "GCommons"
        (evgeny-goldin.com/wiki/GCommons). He blogs at
        http://evgeny-goldin.com/blog and can be found on Twitter as
        @evgeny_goldin. </para>

        <para>Evgeny contributed a section on generating your Maven build jobs
        automatically in the Advanced Builds chapter.</para>
      </listitem>

      <listitem>
        <para><command>Matthew McCullough</command> is an energetic 15 year
        veteran of enterprise software development, open source education, and
        co-founder of Ambient Ideas, LLC, a Denver consultancy. Matthew
        currently is a trainer for GitHub.com, author of the Git Master Class
        series for O'Reilly, speaker at over 30 national and international
        conferences, author of three of the top 10 DZone RefCards, and
        President of the Denver Open Source Users Group. His current topics of
        research center around project automation: build tools (Maven,
        Leiningen, Gradle), distributed version control (Git), Continuous
        Integration (Hudson) and Quality Metrics (Sonar). Matthew resides in
        Denver, Colorado with his beautiful wife and two young daughters, who
        are active in nearly every outdoor activity Colorado has to
        offer.</para>

        <para>Matthew wrote the section on integrating Git with
        Jenkins.</para>
      </listitem>

      <listitem>
        <para>Juven Xu is a software engineer from China who works for
        Sonatype. An active member of the Open Source community and recognized
        Maven expert, Juven was responsible for the Chinese translation of
        'Maven: The Definitive Guide' as well as an original Chinese reference
        book on Maven. He is also currently working on the Chinese translation
        of the present book.</para>

        <para>Juven wrote the section on IRC notifications.</para>
      </listitem>

      <listitem>
        <para><command>Rene Groeschke</command> is a software engineer at
        Cassidian Systems, formerly known as EADS Deutschland GmbH, as well as
        an Open Source enthusiast. A certified ScrumMaster with about 7 years
        experience as a programmer in several enterprise java projects, he is
        especially focused on agile methodologies like continuous integration
        and test driven development. Besides his daily business, the
        university of coorporate education in Friedrichshafen allows him to
        spread the word about scrum and scrum related topics by giving
        lectures for the bachelor students of information technology.</para>

        <para>Rene contributed the section on building projects with
        Gradle.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>The review team</title>

    <para></para>
  </section>

  <section>
    <title>Book Sponsors</title>

    <para></para>
  </section>

  <section>
    <title>Code examples</title>

    <para></para>
  </section>
</preface>
