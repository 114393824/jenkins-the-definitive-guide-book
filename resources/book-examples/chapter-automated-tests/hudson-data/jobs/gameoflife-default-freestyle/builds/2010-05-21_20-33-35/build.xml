<?xml version='1.0' encoding='UTF-8'?>
<build>
  <actions>
    <hudson.model.CauseAction>
      <causes>
        <hudson.triggers.SCMTrigger_-SCMTriggerCause/>
      </causes>
    </hudson.model.CauseAction>
    <hudson.scm.SubversionTagAction>
      <build class="build" reference="../../.."/>
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <no-comparator/>
        <entry>
          <hudson.scm.SubversionSCM_-SvnInfo>
            <url>svn://localhost/gameoflife/trunk</url>
            <revision>13</revision>
          </hudson.scm.SubversionSCM_-SvnInfo>
          <list/>
        </entry>
      </tags>
    </hudson.scm.SubversionTagAction>
    <hudson.scm.SVNRevisionState>
      <revisions>
        <entry>
          <string>svn://localhost/gameoflife/trunk</string>
          <long>13</long>
        </entry>
      </revisions>
    </hudson.scm.SVNRevisionState>
    <hudson.tasks.junit.TestResultAction>
      <owner class="build" reference="../../.."/>
      <descriptions class="java.util.concurrent.ConcurrentHashMap" serialization="custom">
        <unserializable-parents/>
        <java.util.concurrent.ConcurrentHashMap>
          <default>
            <segmentMask>15</segmentMask>
            <segmentShift>28</segmentShift>
            <segments>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
              <java.util.concurrent.ConcurrentHashMap_-Segment>
                <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
                  <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                    <default>
                      <state>0</state>
                    </default>
                  </java.util.concurrent.locks.AbstractQueuedSynchronizer>
                  <java.util.concurrent.locks.ReentrantLock_-Sync>
                    <default/>
                  </java.util.concurrent.locks.ReentrantLock_-Sync>
                </sync>
                <loadFactor>0.75</loadFactor>
              </java.util.concurrent.ConcurrentHashMap_-Segment>
            </segments>
          </default>
          <null/>
          <null/>
        </java.util.concurrent.ConcurrentHashMap>
      </descriptions>
      <failCount>5</failCount>
      <skipCount>0</skipCount>
      <totalCount>22</totalCount>
      <testData/>
    </hudson.tasks.junit.TestResultAction>
  </actions>
  <number>6</number>
  <result>FAILURE</result>
  <duration>12984</duration>
  <charset>MacRoman</charset>
  <keepLog>false</keepLog>
  <builtOn></builtOn>
  <workspace>/Users/johnsmart/Projects/Books/continuous-integration-with-hudson/resources/book-examples/chapter-automated-tests/hudson-data/jobs/gameoflife-default-freestyle/workspace</workspace>
  <hudsonVersion>1.352</hudsonVersion>
  <scm class="hudson.scm.SubversionChangeLogParser"/>
  <culprits>
    <string>unknown</string>
  </culprits>
</build>